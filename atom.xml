<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mingo的博客</title>
  <subtitle>My Personal Blog</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://mingotang.github.io/"/>
  <updated>2017-10-16T00:54:55.000Z</updated>
  <id>http://mingotang.github.io/</id>
  
  <author>
    <name>Mingo Tang</name>
    <email>mtang024@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DBMSSAS Assignment4</title>
    <link href="http://mingotang.github.io/2017/10/13/DBMSSAS-Assignment4/"/>
    <id>http://mingotang.github.io/2017/10/13/DBMSSAS-Assignment4/</id>
    <published>2017-10-13T05:29:49.000Z</published>
    <updated>2017-10-16T00:54:55.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Student – Course<br>In Student-Course database design, there is a given relation:<br><em>SC(sno, sname, sdept, deptaddr, phones, sports, cno, cname, grade)</em></p>
<ol>
<li>Analyze the relation by using 2nd, 3rd, BCNF and 4th NF. (Do not decompose relation here)</li>
<li>Decompose the relation to satisfy BCNF and 4th NF.</li>
</ol>
<hr>
<h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><h4 id="Analyze-the-relation-by-using-2nd-3rd-BCNF-and-4th-NF"><a href="#Analyze-the-relation-by-using-2nd-3rd-BCNF-and-4th-NF" class="headerlink" title="Analyze the relation by using 2nd, 3rd, BCNF and 4th NF."></a><strong>Analyze the relation by using 2nd, 3rd, BCNF and 4th NF.</strong></h4><p>在关系 SC 中，所有的依赖关系如下：</p>
<ul>
<li>Functional Dependencies:<ul>
<li>sno &rarr; sname</li>
<li>sno &rarr; sdept</li>
<li>cno &rarr; cname</li>
<li>sdept &rarr; deptaddr</li>
<li>(sno, cno) <em>F</em>&rarr; grade</li>
</ul>
</li>
<li>Partial Functional Dependencies （所有FD中除了最后一个都可以成为PFD）<ul>
<li>(sno, cno) <em>P</em>&rarr; sname</li>
<li>(sno, cno) <em>P</em>&rarr; sdept</li>
<li>…</li>
</ul>
</li>
<li>如果每一个sno的phones和sports只有一个值<ul>
<li>sno &rarr; phones</li>
<li>sno &rarr; sports</li>
</ul>
</li>
<li>如果每个sno有多个phones或者多个sports：<ul>
<li>(sno, phones) <em>F</em>&rarr; phones</li>
<li>(sno, sports) <em>F</em>&rarr; sports</li>
</ul>
</li>
</ul>
<blockquote>
<p>本作业中phones和sports按照存在多个可能值处理</p>
</blockquote>
<p><strong>- 2nd Normal Form：</strong></p>
<p>第二范式可以表述为：</p>
<ul>
<li>Key <em>F</em>&rarr;  non-key attributes</li>
<li>No <em>P</em>&rarr; exists</li>
</ul>
<p>上述SC依赖关系当中，存在四种关键词的可能：</p>
<ul>
<li>sno：可以看到FD sno <em>F</em>&rarr; cno 是不存在的</li>
<li>cno：同样的，cno <em>F</em>&rarr; sno 也是不存在的</li>
<li>sno, cno：存在 (sno, cno) <em>P</em>&rarr; sname</li>
<li>sno, cno, phones, sports：存在 (sno, cno, phones, sports) <em>P</em>&rarr; sname</li>
</ul>
<blockquote>
<p>从依赖关系的左侧属性组成键的角度来说，SC的Key应该是(sno, cno, phones, sports)，且该键唯一。</p>
</blockquote>
<p>因此关系SC不符合第二范式</p>
<p><strong>- 3rd Normal Form：</strong></p>
<p>第三范式可以表述为：</p>
<ul>
<li>Do not exist key X: If X &rarr; Y, and Y &#8603; X, then Y &rarr; Z.<ul>
<li>X: Key</li>
<li>Y: Set of attributes</li>
<li>Z: Set of non-key attributes</li>
</ul>
</li>
</ul>
<p>上述SC依赖关系当中，存在FD：</p>
<ul>
<li>(sno, cno) <em>P</em>&rarr; sdept</li>
<li>sdept &rarr; deptaddr<br>或者：</li>
<li>(sno, cno) <em>P</em>&rarr; sno</li>
<li>sno &rarr; sname</li>
</ul>
<p>因此关系SC不符合第三范式</p>
<p><strong>- Boyce-Codd Normal Form</strong></p>
<p>BCNF可以表述为：</p>
<ul>
<li>whenever X &rarr; A is a nontrivial FD that holds in Relation, X is a superkey.</li>
</ul>
<p>上述SC依赖关系当中，Key是(sno, cno, phones, sports)，同时存在 cno &rarr; cname 等FD且cno是子集</p>
<p>因此关系SC不符合BCNF</p>
<p><strong>- 4th Normal Form：</strong></p>
<p>第四范式可以表述为：</p>
<ul>
<li>whenever X &rarr;&rarr; Y is a nontrivial MVD, then X is a superkey.<ul>
<li>Nontrivial MVD  means that: Y is not a subset of X, and X  and Y  are not, together, all the attributes.</li>
<li>Note that the definition of “superkey” still depends on FD’s only.</li>
</ul>
</li>
</ul>
<p>SC的依赖关系中，存在 sno &rarr;&rarr; phones 和 sno &rarr;&rarr; sports 这两个 nontrivial MVD，同时其他FD只需要满足第四范式表述中的两个附属条件就可以是MVD），但是 sno 不是键的超集。</p>
<p>因此关系SC不符合第四范式</p>
<h4 id="Decompose-the-relation-to-satisfy-BCNF-and-4th-NF"><a href="#Decompose-the-relation-to-satisfy-BCNF-and-4th-NF" class="headerlink" title="Decompose the relation to satisfy BCNF and 4th NF"></a><strong>Decompose the relation to satisfy BCNF and 4th NF</strong></h4><ul>
<li>Student(<u>sno</u>, sname, sdept)</li>
<li>Course(<u>cno</u>, cname)</li>
<li>SC(<u>sno</u>, <u>cno</u>, grade)</li>
<li>Sports(<u>sno</u>, <u>sports</u>)</li>
<li>Phones(<u>sno</u>, <u>phones</u>)</li>
<li>Departments(<u>sdept</u>, deptaddr)</li>
</ul>
<p>或者查看胡老师给出的参考答案：<a href="http://ox3grgjnx.bkt.clouddn.com/Ref%20DBMSSAS%20Assignment4.pdf" target="_blank" rel="external">点击查看</a></p>
<hr>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Student – Course&lt;br&gt;In Student-C
    
    </summary>
    
    
      <category term="TA" scheme="http://mingotang.github.io/tags/TA/"/>
    
  </entry>
  
  <entry>
    <title>DBMSSAS Assignment3</title>
    <link href="http://mingotang.github.io/2017/09/29/DBMSSAS-Assignment3/"/>
    <id>http://mingotang.github.io/2017/09/29/DBMSSAS-Assignment3/</id>
    <published>2017-09-29T08:06:23.000Z</published>
    <updated>2017-10-09T13:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>The E-R diagram of the Student – Course Database showed as:</p>
<p><img src="http://ox3grgjnx.bkt.clouddn.com/DBMSSAS%20Assignment3%20001.png" alt=""></p>
<ol>
<li>Convert the E/R diagram to relations</li>
<li>Create the tables by using SQL Server Management Studio.</li>
<li>Draw database diagram of the three tables.</li>
</ol>
<hr>
<h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p><strong>Relations</strong>:</p>
<ul>
<li>Student (<u>Sno</u>, Sname, Ssex, Sage, Sdept)</li>
<li>Course (<u>Cno</u>, Cname, Cpno, Ccredit)</li>
<li>SC (<u>Sno</u>, <u>Cno</u>, Grade)</li>
</ul>
<p><strong>Create tables</strong></p>
<p>使用MS-SQL图形界面创建表：</p>
<ul>
<li>数据库 - （右键）- 新建数据库</li>
</ul>
<p><img src="http://ox3grgjnx.bkt.clouddn.com/DBMSSAS%20Assignment3%20002b.png" alt="新建数据库"></p>
<ul>
<li>数据库 - 表 - （右键）- 新建表</li>
</ul>
<p><img src="http://ox3grgjnx.bkt.clouddn.com/DBMSSAS%20Assignment3%20003b.png" alt="表Student"></p>
<p><img src="http://ox3grgjnx.bkt.clouddn.com/DBMSSAS%20Assignment3%20004b.png" alt="表Course"></p>
<p><img src="http://ox3grgjnx.bkt.clouddn.com/DBMSSAS%20Assignment3%20005b.png" alt="表SC"></p>
<blockquote>
<p>表 SC 需要设置双键</p>
</blockquote>
<p>使用SQL语句创建表：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student(</div><div class="line">    Sno <span class="built_in">CHAR</span>(<span class="number">100</span>) PRIMARY <span class="keyword">KEY</span>,</div><div class="line">    Sname <span class="built_in">CHAR</span>(<span class="number">100</span>),</div><div class="line">    Ssex <span class="built_in">CHAR</span>(<span class="number">100</span>),</div><div class="line">    Sage <span class="built_in">CHAR</span>(<span class="number">100</span>),</div><div class="line">    Sdept <span class="built_in">CHAR</span>(<span class="number">100</span>)</div><div class="line">    );</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course(</div><div class="line">    Cno <span class="built_in">CHAR</span>(<span class="number">100</span>) PRIMARY <span class="keyword">KEY</span>,</div><div class="line">    Cname <span class="built_in">CHAR</span>(<span class="number">100</span>),</div><div class="line">    Cpno <span class="built_in">CHAR</span>(<span class="number">100</span>),</div><div class="line">    Credit <span class="built_in">CHAR</span>(<span class="number">100</span>)</div><div class="line">    );</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC(</div><div class="line">    Sno <span class="built_in">CHAR</span>(<span class="number">100</span>) <span class="keyword">REFERENCES</span> Student(Sno),</div><div class="line">    Cno <span class="built_in">CHAR</span>(<span class="number">100</span>) <span class="keyword">REFERENCES</span> Course(Cno),</div><div class="line">    Grade <span class="built_in">INT</span>,</div><div class="line">    PRIMARY <span class="keyword">KEY</span>(Sno, Cno)</div><div class="line">);</div></pre></td></tr></table></figure>
<p><strong>Draw database diagram</strong></p>
<p>使用MS-SQL图形界面关系图：</p>
<ul>
<li>数据库关系图 - （右键）- 新建数据库关系图 - 添加表<ul>
<li>按住表SC的Sno拖到表Student的Sno设定外键</li>
</ul>
</li>
</ul>
<p><img src="http://ox3grgjnx.bkt.clouddn.com/DBMSSAS%20Assignment3%20006.png" alt="添加外键"><br><img src="http://ox3grgjnx.bkt.clouddn.com/DBMSSAS%20Assignment3%20007.png" alt="数据库关系图"></p>
<hr>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li>关系表达式当中表不设置关键字<ul>
<li>键需要用下划线标出</li>
</ul>
</li>
<li>使用MS-SQL图形界面创建的表SC没有设定键：<ul>
<li>在表SC的编辑页面按住 Ctrl 同时选中 Sno 与 Cno 设定键</li>
<li>虽然在设定数据库关系图之后SC不设置双键在MS-SQL当中也可以运行，但是作为严谨的初学者，SC不管用还是不用都是需要设置键的，这一点不会因为SC设置外键而改变。（MS-SQL会根据外键自动设定SC的键，但是其他SQL系统并不一定有这个功能）</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;The E-R diagram of the Student –
    
    </summary>
    
    
      <category term="TA" scheme="http://mingotang.github.io/tags/TA/"/>
    
  </entry>
  
  <entry>
    <title>Python 资源包大全</title>
    <link href="http://mingotang.github.io/2017/09/28/Python-%E8%B5%84%E6%BA%90%E5%8C%85%E5%A4%A7%E5%85%A8/"/>
    <id>http://mingotang.github.io/2017/09/28/Python-资源包大全/</id>
    <published>2017-09-28T08:59:46.000Z</published>
    <updated>2017-10-01T12:59:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>转载自：<a href="http://hao.jobbole.com/" target="_blank" rel="external">伯乐在线</a></p>
</blockquote>
<p>GitHub 上有一个 Awesome - XXX 系列的资源整理。<a href="https://github.com/vinta/awesome-python" target="_blank" rel="external">awesome-python</a> 是 vinta 发起维护的 Python 资源列表，内容包括：Web框架、网络爬虫、网络内容提取、模板引擎、数据库、数据可视化、图片处理、文本处理、自然语言处理、机器学习、日志、代码分析等。</p>
<p>Awesome 系列虽然挺全，但基本只对收录的资源做了极为简要的介绍，如果有更详细的中文介绍，对相应开发者的帮助会更大。这也是<a href="http://hao.jobbole.com/" target="_blank" rel="external">伯乐在线</a>发起这个开源项目的初衷。</p>
<a id="more"></a>
<h3 id="我们要做什么？"><a href="#我们要做什么？" class="headerlink" title="我们要做什么？"></a>我们要做什么？</h3><ul>
<li>基于 awesome-python 列表，对其中的各个资源项进行编译整理。此外还将从其他来源补充资源。</li>
<li>整理后的内容，将收录在<a href="http://hao.jobbole.com/" target="_blank" rel="external">伯乐在线资源频道</a>。可参考已整理的内容：<ul>
<li>《<a href="http://hao.jobbole.com/python-scrapy/" target="_blank" rel="external">Scrapy：Python的爬虫框架</a>》</li>
<li>《<a href="http://hao.jobbole.com/flask/" target="_blank" rel="external">Flask：一个使用Python编写的轻量级Web应用框架</a>》</li>
</ul>
</li>
</ul>
<hr>
<h3 id="本项目的参与者"><a href="#本项目的参与者" class="headerlink" title="本项目的参与者"></a>本项目的参与者</h3><ul>
<li>维护者：</li>
<li>贡献者：<a href="https://github.com/hanxiaomax" target="_blank" rel="external">艾凌风</a>、Namco、<a href="https://github.com/Daetalus" target="_blank" rel="external">Daetalus</a>、<a href="http://www.jobbole.com/members/huanglimin/" target="_blank" rel="external">黄利民</a>、<a href="http://www.jobbole.com/members/atupal/" target="_blank" rel="external">atupal</a>、<a href="http://www.jobbole.com/members/rainbow/" target="_blank" rel="external">rainbow</a>、<a href="https://github.com/mutoulbj" target="_blank" rel="external">木头lbj</a>、<a href="http://www.jobbole.com/members/beyondwu/" target="_blank" rel="external">beyondwu</a>、<a href="https://github.com/cissoid" target="_blank" rel="external">cissoid</a>、<a href="https://github.com/liguangsheng" target="_blank" rel="external">李广胜</a>、<a href="https://github.com/polyval" target="_blank" rel="external">polyval</a>、<a href="http://www.jobbole.com/members/libing1209/" target="_blank" rel="external">冰斌</a>、<a href="http://www.jobbole.com/members/nelsonzhao/" target="_blank" rel="external">赵叶宇</a>、<a href="http://www.jobbole.com/members/fengfeng19910805/" target="_blank" rel="external">л stalgic</a>、<a href="http://www.jobbole.com/members/shawnw/" target="_blank" rel="external">硕恩</a>、<a href="https://github.com/strongit" target="_blank" rel="external">strongit</a>、<a href="http://www.jobbole.com/members/yuukilp/" target="_blank" rel="external">yuukilp</a></li>
</ul>
<p>注：名单不分排名，不定期补充更新</p>
<hr>
<h3 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h3><p>管理 Python 版本和环境的工具</p>
<ul>
<li>p：非常简单的交互式 python 版本管理工具。<a href="https://github.com/qw3rtman/p" target="_blank" rel="external">官网</a></li>
<li>pyenv：简单的 Python 版本管理工具。<a href="https://github.com/yyuu/pyenv" target="_blank" rel="external">官网</a></li>
<li>Vex：可以在虚拟环境中执行命令。<a href="https://github.com/sashahart/vex" target="_blank" rel="external">官网</a></li>
<li>virtualenv：创建独立 Python 环境的工具。<a href="https://pypi.python.org/pypi/virtualenv" target="_blank" rel="external">官网</a></li>
<li>virtualenvwrapper：virtualenv 的一组扩展。<a href="https://pypi.python.org/pypi/virtualenvwrapper" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><p>管理包和依赖的工具。</p>
<ul>
<li>pip：Python 包和依赖关系管理工具。<a href="https://pip.pypa.io/" target="_blank" rel="external">官网</a></li>
<li>pip-tools：保证 Python 包依赖关系更新的一组工具。<a href="https://github.com/nvie/pip-tools" target="_blank" rel="external">官网</a></li>
<li>conda：跨平台，Python 二进制包管理工具。<a href="https://github.com/conda/conda/" target="_blank" rel="external">官网</a></li>
<li>Curdling：管理 Python 包的命令行工具。<a href="http://clarete.li/curdling/" target="_blank" rel="external">官网</a></li>
<li>wheel：Python 分发的新标准，意在取代 eggs。<a href="http://pythonwheels.com/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="包仓库"><a href="#包仓库" class="headerlink" title="包仓库"></a>包仓库</h3><p>本地 PyPI 仓库服务和代理。</p>
<ul>
<li>warehouse：下一代 PyPI。<a href="https://github.com/pypa/warehouse" target="_blank" rel="external">官网</a><ul>
<li>Warehouse：PyPA 提供的 PyPI 镜像工具。<a href="https://warehouse.python.org/" target="_blank" rel="external">官网</a> <a href="https://bitbucket.org/pypa/bandersnatch" target="_blank" rel="external">bandersnatch</a></li>
</ul>
</li>
<li>devpi：PyPI 服务和打包/测试/分发工具。<a href="http://doc.devpi.net/" target="_blank" rel="external">官网</a></li>
<li>localshop：本地 PyPI 服务（自定义包并且自动对 PyPI 镜像）。<a href="https://github.com/mvantellingen/localshop" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h3><p>打包为可执行文件以便分发。</p>
<ul>
<li>PyInstaller：将 Python 程序转换成独立的执行文件（跨平台）。<a href="https://github.com/pyinstaller/pyinstaller" target="_blank" rel="external">官网</a></li>
<li>dh-virtualenv：构建并将 virtualenv 虚拟环境作为一个 Debian 包来发布。<a href="http://dh-virtualenv.readthedocs.org/" target="_blank" rel="external">官网</a></li>
<li>Nuitka：将脚本、模块、包编译成可执行文件或扩展模块。<a href="http://nuitka.net/" target="_blank" rel="external">官网</a></li>
<li>py2app：将 Python 脚本变为独立软件包（Mac OS X）。<a href="http://pythonhosted.org/py2app/" target="_blank" rel="external">官网</a></li>
<li>py2exe：将 Python 脚本变为独立软件包（Windows）。<a href="http://www.py2exe.org/" target="_blank" rel="external">官网</a></li>
<li>pynsist：一个用来创建 Windows 安装程序的工具，可以在安装程序中打包 Python本身。<a href="http://pynsist.readthedocs.org/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><p>将源码编译成软件。</p>
<ul>
<li>buildout：一个构建系统，从多个组件来创建，组装和部署应用。<a href="http://www.buildout.org/" target="_blank" rel="external">官网</a></li>
<li>BitBake：针对嵌入式 Linux 的类似 make 的构建工具。<a href="http://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html" target="_blank" rel="external">官网</a></li>
<li>fabricate：对任何语言自动找到依赖关系的构建工具。<a href="https://code.google.com/archive/p/fabricate" target="_blank" rel="external">官网</a></li>
<li>PlatformIO：多平台命令行构建工具。<a href="https://github.com/platformio/platformio" target="_blank" rel="external">官网</a></li>
<li>PyBuilder：纯 Python 实现的持续化构建工具。<a href="https://github.com/pybuilder/pybuilder" target="_blank" rel="external">官网</a></li>
<li>SCons：软件构建工具。<a href="http://www.scons.org/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="交互式解析器"><a href="#交互式解析器" class="headerlink" title="交互式解析器"></a>交互式解析器</h3><p>交互式 Python 解析器。</p>
<ul>
<li>IPython：功能丰富的工具，非常有效的使用交互式 Python。<a href="https://github.com/ipython/ipython" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/bpython/" target="_blank" rel="external">bpython</a>：界面丰富的 Python 解析器。<a href="http://bpython-interpreter.org/" target="_blank" rel="external">官网</a></li>
<li>ptpython：高级交互式Python解析器， 构建于<a href="https://github.com/jonathanslenders/python-prompt-toolkit" target="_blank" rel="external">python-prompt-toolkit</a> 之上。<a href="https://github.com/jonathanslenders/ptpython" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。</p>
<ul>
<li>imghdr：（Python 标准库）检测图片类型。<a href="https://docs.python.org/2/library/imghdr.html" target="_blank" rel="external">官网</a></li>
<li>mimetypes：（Python 标准库）将文件名映射为 MIME 类型。<a href="https://docs.python.org/2/library/mimetypes.html" target="_blank" rel="external">官网</a></li>
<li>path.py：对 os.path 进行封装的模块。<a href="https://github.com/jaraco/path.py" target="_blank" rel="external">官网</a></li>
<li>pathlib：（Python3.4+ 标准库）跨平台的、面向对象的路径操作库。<a href="https://pathlib.readthedocs.org/en/pep428/" target="_blank" rel="external">官网</a></li>
<li>python-magic：文件类型检测的第三方库 libmagic 的 Python 接口。<a href="https://github.com/ahupp/python-magic" target="_blank" rel="external">官网</a></li>
<li>Unipath：用面向对象的方式操作文件和目录。<a href="https://github.com/mikeorr/Unipath" target="_blank" rel="external">官网</a></li>
<li>watchdog：管理文件系统事件的 API 和 shell 工具<a href="https://github.com/gorakhargosh/watchdog" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p>操作日期和时间的类库。</p>
<ul>
<li>arrow：更好的 Python 日期时间操作类库。<a href="https://github.com/crsmithdev/arrow" target="_blank" rel="external">官网</a></li>
<li>Chronyk：Python 3 的类库，用于解析手写格式的时间和日期。<a href="https://github.com/KoffeinFlummi/Chronyk" target="_blank" rel="external">官网</a></li>
<li>dateutil：Python datetime 模块的扩展。<a href="https://pypi.python.org/pypi/python-dateutil" target="_blank" rel="external">官网</a></li>
<li>delorean：解决 Python 中有关日期处理的棘手问题的库。<a href="https://github.com/myusuf3/delorean/" target="_blank" rel="external">官网</a></li>
<li>moment：一个用来处理时间和日期的Python库。灵感来自于Moment.js。<a href="https://github.com/zachwill/moment" target="_blank" rel="external">官网</a></li>
<li>PyTime：一个简单易用的Python模块，用于通过字符串来操作日期/时间。<a href="https://github.com/shinux/PyTime" target="_blank" rel="external">官网</a></li>
<li>pytz：现代以及历史版本的世界时区定义。将时区数据库引入Python。<a href="https://launchpad.net/pytz" target="_blank" rel="external">官网</a></li>
<li>when.py：提供用户友好的函数来帮助用户进行常用的日期和时间操作。<a href="https://github.com/dirn/When.py" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><p>用于解析和操作文本的库。</p>
<ul>
<li>通用<ul>
<li><a href="http://hao.jobbole.com/chardet/" target="_blank" rel="external">chardet</a>：字符编码检测器，兼容 Python2 和 Python3。<a href="https://github.com/chardet/chardet" target="_blank" rel="external">官网</a></li>
<li>difflib：(Python 标准库)帮助我们进行差异化比较。<a href="https://docs.python.org/2/library/difflib.html" target="_blank" rel="external">官网</a></li>
<li>ftfy：让Unicode文本更完整更连贯。<a href="https://github.com/LuminosoInsight/python-ftfy" target="_blank" rel="external">官网</a></li>
<li>fuzzywuzzy：模糊字符串匹配。<a href="https://github.com/seatgeek/fuzzywuzzy" target="_blank" rel="external">官网</a></li>
<li>Levenshtein：快速计算编辑距离以及字符串的相似度。<a href="https://github.com/ztane/python-Levenshtein/" target="_blank" rel="external">官网</a></li>
<li>pangu.py：在中日韩语字符和数字字母之间添加空格。<a href="https://github.com/vinta/pangu.py" target="_blank" rel="external">官网</a></li>
<li>yfiglet-figlet：<a href="https://github.com/pwaller/pyfiglet" target="_blank" rel="external">pyfiglet -figlet</a> 的 Python实现。</li>
<li>shortuuid：一个生成器库，用以生成简洁的，明白的，URL 安全的 UUID。<a href="https://github.com/stochastic-technologies/shortuuid" target="_blank" rel="external">官网</a></li>
<li>unidecode：Unicode 文本的 ASCII 转换形式 。<a href="https://pypi.python.org/pypi/Unidecode" target="_blank" rel="external">官网</a></li>
<li>uniout：打印可读的字符，而不是转义的字符串。<a href="https://github.com/moskytw/uniout" target="_blank" rel="external">官网</a></li>
<li>xpinyin：一个用于把汉字转换为拼音的库。<a href="https://github.com/lxneng/xpinyin" target="_blank" rel="external">官网</a></li>
<li>simplejson：Python的JSON编码、解码器。<a href="https://simplejson.readthedocs.io/en/latest/" target="_blank" rel="external">官网</a>、<a href="https://github.com/simplejson/simplejson" target="_blank" rel="external">GitHub</a></li>
</ul>
</li>
<li>Slug化<ul>
<li>awesome-slugify：一个 Python slug 化库，可以保持 Unicode。<a href="https://github.com/dimka665/awesome-slugify" target="_blank" rel="external">官网</a></li>
<li>python-slugify：Python slug 化库，可以把 unicode 转化为 ASCII。<a href="https://github.com/un33k/python-slugify" target="_blank" rel="external">官网</a></li>
<li>unicode-slugify：一个 slug 工具，可以生成 unicode slugs ,需要依赖 Django 。<a href="https://github.com/mozilla/unicode-slugify" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>解析器<ul>
<li>phonenumbers：解析，格式化，储存，验证电话号码。<a href="https://github.com/daviddrysdale/python-phonenumbers" target="_blank" rel="external">官网</a></li>
<li>PLY：lex 和 yacc 解析工具的 Python 实现。<a href="http://www.dabeaz.com/ply/" target="_blank" rel="external">官网</a></li>
<li>Pygments：通用语法高亮工具。<a href="http://pygments.org/" target="_blank" rel="external">官网</a></li>
<li>pyparsing：生成通用解析器的框架。<a href="http://pyparsing.wikispaces.com/" target="_blank" rel="external">官网</a></li>
<li>python-nameparser：把一个人名分解为几个独立的部分。<a href="https://github.com/derek73/python-nameparser" target="_blank" rel="external">官网</a></li>
<li>python-user-agents：浏览器 user agent 解析器。<a href="https://github.com/selwin/python-user-agents" target="_blank" rel="external">官网</a></li>
<li>sqlparse：一个无验证的 SQL 解析器。<a href="https://sqlparse.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
</ul>
</li>
</ul>
<h3 id="特殊文本格式处理"><a href="#特殊文本格式处理" class="headerlink" title="特殊文本格式处理"></a>特殊文本格式处理</h3><p>一些用来解析和操作特殊文本格式的库。</p>
<ul>
<li>通用<ul>
<li>tablib：一个用来处理中表格数据的模块。<a href="https://github.com/kennethreitz/tablib" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>Office<ul>
<li>Marmir：把输入的Python 数据结构转换为电子表单。<a href="https://github.com/brianray/mm" target="_blank" rel="external">官网</a></li>
<li>openpyxl：一个用来读写 Excel 2010 xlsx/xlsm/xltx/xltm 文件的库。<a href="https://openpyxl.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>python-docx：读取，查询以及修改 Microsoft Word 2007/2008 docx 文件。<a href="https://github.com/python-openxml/python-docx" target="_blank" rel="external">官网</a></li>
<li>unoconv：在 LibreOffice/OpenOffice 支持的任意文件格式之间进行转换。<a href="https://github.com/dagwieers/unoconv" target="_blank" rel="external">官网</a></li>
<li>XlsxWriter：一个用于创建 Excel .xlsx 文件的 Python 模块。<a href="https://xlsxwriter.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>xlwings：一个使得在 Excel 中方便调用 Python 的库（反之亦然），基于 BSD 协议。<a href="http://xlwings.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/xlwt/" target="_blank" rel="external">xlwt</a>：读写 Excel 文件的数据和格式信息。<a href="https://github.com/python-excel/xlwt" target="_blank" rel="external">官网</a> / <a href="https://github.com/python-excel/xlrd" target="_blank" rel="external">xlrd</a></li>
<li>relatorio：模板化OpenDocument 文件。<a href="http://relatorio.tryton.org/" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>PDF<ul>
<li>PDFMiner：一个用于从PDF文档中抽取信息的工具。<a href="https://github.com/euske/pdfminer" target="_blank" rel="external">官网</a></li>
<li>PyPDF2：一个可以分割，合并和转换 PDF 页面的库。<a href="https://github.com/mstamy2/PyPDF2" target="_blank" rel="external">官网</a></li>
<li>ReportLab：快速创建富文本 PDF 文档。<a href="http://www.reportlab.com/opensource/" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>Markdown<ul>
<li>Mistune：快速并且功能齐全的纯 Python 实现的 Markdown 解析器。<a href="https://github.com/lepture/mistune" target="_blank" rel="external">官网</a></li>
<li>Python-Markdown：John Gruber’s Markdown 的 Python 版实现。<a href="https://github.com/waylan/Python-Markdown" target="_blank" rel="external">官网</a></li>
<li>Python-Markdiwn2：纯 Python 实现的 Markdown 解析器，比 Python-Markdown 更快，更准确，可扩展。<a href="https://github.com/trentm/python-markdown2" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>YAML<ul>
<li>PyYAML：Python 版本的 YAML 解析器。<a href="http://pyyaml.org/" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>CSV<ul>
<li>csvkit：用于转换和操作 CSV 的工具。<a href="https://github.com/wireservice/csvkit" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>Archive<ul>
<li>unp：一个用来方便解包归档文件的命令行工具。<a href="https://github.com/mitsuhiko/unp" target="_blank" rel="external">官网</a></li>
</ul>
</li>
</ul>
<h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><p>用来处理人类语言的库。</p>
<ul>
<li><a href="http://hao.jobbole.com/nltk/" target="_blank" rel="external">NLTK</a>：一个先进的平台，用以构建处理人类语言数据的 Python 程序。<a href="http://www.nltk.org/" target="_blank" rel="external">官网</a></li>
<li>jieba：中文分词工具。<a href="https://github.com/fxsjy/jieba" target="_blank" rel="external">官网</a></li>
<li>langid.py：独立的语言识别系统。<a href="https://github.com/saffsd/langid.py" target="_blank" rel="external">官网</a></li>
<li>Pattern：Python 网络信息挖掘模块。<a href="http://www.clips.ua.ac.be/pattern" target="_blank" rel="external">官网</a></li>
<li>SnowNLP：一个用来处理中文文本的库。<a href="https://github.com/isnowfy/snownlp" target="_blank" rel="external">官网</a></li>
<li>TextBlob：为进行普通自然语言处理任务提供一致的 API。<a href="http://textblob.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>TextGrocery：一简单高效的短文本分类工具，基于 LibLinear 和 Jieba。<a href="https://github.com/2shou/TextGrocery" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>用以生成项目文档的库。</p>
<ul>
<li><a href="http://hao.jobbole.com/sphinx/" target="_blank" rel="external">Sphinx</a>：Python 文档生成器。<a href="http://www.sphinx-doc.org/en/latest/" target="_blank" rel="external">官网</a><ul>
<li>awesome-sphinxdoc：<a href="https://github.com/yoloseem/awesome-sphinxdoc" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>MkDocs：对 Markdown 友好的文档生成器。<a href="http://www.mkdocs.org/" target="_blank" rel="external">官网</a></li>
<li>pdoc：一个可以替换Epydoc 的库，可以自动生成 Python 库的 API 文档。<a href="https://github.com/BurntSushi/pdoc" target="_blank" rel="external">官网</a></li>
<li>Pycco：文学编程（literate-programming）风格的文档生成器。<a href="https://github.com/pycco-docs/pycco" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>用来保存和解析配置的库。</p>
<ul>
<li>config：<a href="https://docs.python.org/2/library/logging.html" target="_blank" rel="external">logging</a> 模块作者写的分级配置模块。<a href="https://www.red-dove.com/config-doc/" target="_blank" rel="external">官网</a></li>
<li>ConfigObj：INI 文件解析器，带验证功能。<a href="http://www.voidspace.org.uk/python/configobj.html" target="_blank" rel="external">官网</a></li>
<li>ConfigParser：(Python 标准库) INI 文件解析器。<a href="https://docs.python.org/2/library/configparser.html" target="_blank" rel="external">官网</a></li>
<li>profig：通过多种格式进行配置，具有数值转换功能。<a href="http://profig.readthedocs.org/en/default/" target="_blank" rel="external">官网</a></li>
<li>python-decouple：将设置和代码完全隔离。<a href="https://github.com/henriquebastos/python-decouple" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><p>用于创建命令行程序的库。</p>
<ul>
<li>命令行程序开发<ul>
<li>asciimatics：跨平台，全屏终端包（即鼠标/键盘输入和彩色，定位文本输出），完整的复杂动画和特殊效果的高级API。<a href="https://github.com/peterbrittain/asciimatics" target="_blank" rel="external">官网</a></li>
<li>cement：Python 的命令行程序框架。<a href="http://builtoncement.com/" target="_blank" rel="external">官网</a></li>
<li>click：一个通过组合的方式来创建精美命令行界面的包。<a href="http://click.pocoo.org/dev/" target="_blank" rel="external">官网</a></li>
<li>cliff：一个用于创建命令行程序的框架，可以创建具有多层命令的命令行程序。<a href="http://docs.openstack.org/developer/cliff/" target="_blank" rel="external">官网</a></li>
<li>clint：Python 命令行程序工具。<a href="https://github.com/kennethreitz/clint" target="_blank" rel="external">官网</a></li>
<li>colorama：跨平台彩色终端文本。<a href="https://pypi.python.org/pypi/colorama" target="_blank" rel="external">官网</a></li>
<li>docopt：Python 风格的命令行参数解析器。<a href="http://docopt.org/" target="_blank" rel="external">官网</a></li>
<li>Gooey：一条命令，将命令行程序变成一个 GUI 程序。<a href="https://github.com/chriskiehl/Gooey" target="_blank" rel="external">官网</a></li>
<li>python-prompt-toolkit：一个用于构建强大的交互式命令行程序的库。<a href="https://github.com/jonathanslenders/python-prompt-toolkit" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/pythonpy/" target="_blank" rel="external">Pythonpy</a>：在命令行中直接执行任何Python指令。<a href="https://github.com/Russell91/pythonpy/wiki" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>生产力工具<ul>
<li>aws-cli：Amazon Web Services 的通用命令行界面。<a href="https://github.com/aws/aws-cli" target="_blank" rel="external">官网</a></li>
<li>bashplotlib：在终端中进行基本绘图。<a href="https://github.com/glamp/bashplotlib" target="_blank" rel="external">官网</a></li>
<li>caniusepython3：判断是哪个项目妨碍你你移植到 Python 3。<a href="https://github.com/brettcannon/caniusepython3" target="_blank" rel="external">官网</a></li>
<li>cookiecutter：从 cookiecutters（项目模板）创建项目的一个命令行工具。<a href="https://github.com/audreyr/cookiecutter" target="_blank" rel="external">官网</a></li>
<li>doitlive：一个用来在终端中进行现场演示的工具。<a href="https://github.com/sloria/doitlive" target="_blank" rel="external">官网</a></li>
<li>howdoi：通过命令行获取即时的编程问题解答。<a href="https://github.com/gleitz/howdoi" target="_blank" rel="external">官网</a></li>
<li>httpie：一个命令行HTTP 客户端，cURL 的替代品，易用性更好。<a href="https://github.com/jkbrzt/httpie" target="_blank" rel="external">官网</a></li>
<li>PathPicker：从bash输出中选出文件。<a href="https://github.com/facebook/PathPicker" target="_blank" rel="external">官网</a></li>
<li>percol：向UNIX shell 传统管道概念中加入交互式选择功能。<a href="https://github.com/mooz/percol" target="_blank" rel="external">官网</a></li>
<li>SAWS：一个加强版的 AWS 命令行。<a href="https://github.com/donnemartin/saws" target="_blank" rel="external">官网</a></li>
<li>thefuck：修正你之前的命令行指令。<a href="https://github.com/nvbn/thefuck" target="_blank" rel="external">官网</a></li>
<li>mycli：一个 MySQL 命令行客户端，具有自动补全和语法高亮功能。<a href="https://github.com/dbcli/mycli" target="_blank" rel="external">官网</a></li>
<li>pgcli：Postgres 命令行工具，具有自动补全和语法高亮功能。<a href="https://github.com/dbcli/pgcli" target="_blank" rel="external">官网</a></li>
<li>try：一个从来没有更简单的命令行工具，用来试用python库。<a href="https://github.com/timofurrer/try" target="_blank" rel="external">官网</a></li>
</ul>
</li>
</ul>
<h3 id="下载器"><a href="#下载器" class="headerlink" title="下载器"></a>下载器</h3><p>用来进行下载的库.</p>
<ul>
<li>s3cmd：一个用来管理Amazon S3 和 CloudFront 的命令行工具。<a href="https://github.com/s3tools/s3cmd" target="_blank" rel="external">官网</a></li>
<li>s4cmd：超级 S3 命令行工具，性能更加强劲。<a href="https://github.com/bloomreach/s4cmd" target="_blank" rel="external">官网</a></li>
<li>you-get：一个 YouTube/Youku/Niconico 视频下载器，使用 Python3 编写。<a href="https://www.soimort.org/you-get/" target="_blank" rel="external">官网</a></li>
<li>youtube-dl：一个小巧的命令行程序，用来下载 YouTube 视频。<a href="http://rg3.github.io/youtube-dl/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3><p>用来操作图像的库.</p>
<ul>
<li><a href="http://hao.jobbole.com/pillow/" target="_blank" rel="external">pillow</a>：Pillow 是一个更加易用版的 <a href="http://www.pythonware.com/products/pil/" target="_blank" rel="external">PIL</a>。<a href="http://pillow.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>hmap：图像直方图映射。<a href="https://github.com/rossgoodwin/hmap" target="_blank" rel="external">官网</a></li>
<li>imgSeek：一个使用视觉相似性搜索一组图片集合的项目。<a href="https://sourceforge.net/projects/imgseek/" target="_blank" rel="external">官网</a></li>
<li>nude.py：裸体检测。<a href="https://github.com/hhatto/nude.py" target="_blank" rel="external">官网</a></li>
<li>pyBarcode：不借助 PIL 库在 Python 程序中生成条形码。<a href="https://pythonhosted.org/pyBarcode/" target="_blank" rel="external">官网</a></li>
<li>pygram：类似 Instagram 的图像滤镜。<a href="https://github.com/ajkumar25/pygram" target="_blank" rel="external">官网</a></li>
<li>python-qrcode：一个纯 Python 实现的二维码生成器。<a href="https://github.com/lincolnloop/python-qrcode" target="_blank" rel="external">官网</a></li>
<li>Quads：基于四叉树的计算机艺术。<a href="https://github.com/fogleman/Quads" target="_blank" rel="external">官网</a></li>
<li>scikit-image：一个用于（科学）图像处理的 Python 库。<a href="http://scikit-image.org/" target="_blank" rel="external">官网</a></li>
<li>thumbor：一个小型图像服务，具有剪裁，尺寸重设和翻转功能。<a href="https://github.com/thumbor/thumbor" target="_blank" rel="external">官网</a></li>
<li>wand：<a href="http://www.imagemagick.org/script/magick-wand.php" target="_blank" rel="external">MagickWand</a>的Python 绑定。MagickWand 是 ImageMagick的 C API 。<a href="https://github.com/dahlia/wand" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="OCR"><a href="#OCR" class="headerlink" title="OCR"></a>OCR</h3><p>光学字符识别库。</p>
<ul>
<li>pyocr：Tesseract 和 Cuneiform 的一个封装(wrapper)。<a href="https://github.com/jflesch/pyocr" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/pytesseract/" target="_blank" rel="external">pytesseract</a>：<a href="https://github.com/tesseract-ocr" target="_blank" rel="external">Google Tesseract OCR</a> 的另一个封装(wrapper)。<a href="https://github.com/madmaze/pytesseract" target="_blank" rel="external">官网</a></li>
<li>python-tesseract - <a href="https://github.com/tesseract-ocr" target="_blank" rel="external">Google Tesseract OCR</a> 的一个包装类。</li>
</ul>
<h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><p>用来操作音频的库</p>
<ul>
<li>audiolazy：Python 的数字信号处理包。<a href="https://github.com/danilobellini/audiolazy" target="_blank" rel="external">官网</a> </li>
<li>audioread：交叉库 (GStreamer + Core Audio + MAD + FFmpeg) 音频解码。<a href="https://github.com/beetbox/audioread" target="_blank" rel="external">官网</a></li>
<li>beets：一个音乐库管理工具及 <a href="https://musicbrainz.org/" target="_blank" rel="external">MusicBrainz</a> 标签添加工具<a href="http://beets.io/" target="_blank" rel="external">官网</a></li>
<li>dejavu：音频指纹提取和识别<a href="https://github.com/worldveil/dejavu" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/django-elastic-transcoder/" target="_blank" rel="external">django-elastic-transcoder</a>：Django + <a href="http://aws.amazon.com/elastictranscoder/" target="_blank" rel="external">Amazon Elastic Transcoder</a>。<a href="https://github.com/StreetVoice/django-elastic-transcoder" target="_blank" rel="external">官网</a></li>
<li>eyeD3：一个用来操作音频文件的工具，具体来讲就是包含 ID3 元信息的 MP3 文件。<a href="http://eyed3.nicfit.net/" target="_blank" rel="external">官网</a></li>
<li>id3reader：一个用来读取 MP3 元数据的 Python 模块。<a href="http://nedbatchelder.com/code/modules/id3reader.py" target="_blank" rel="external">官网</a></li>
<li>m3u8：一个用来解析 m3u8 文件的模块。<a href="https://github.com/globocom/m3u8" target="_blank" rel="external">官网</a></li>
<li>mutagen：一个用来处理音频元数据的 Python 模块。<a href="https://bitbucket.org/lazka/mutagen" target="_blank" rel="external">官网</a></li>
<li>pydub：通过简单、简洁的高层接口来操作音频文件。<a href="https://github.com/jiaaro/pydub" target="_blank" rel="external">官网</a></li>
<li>pyechonest：<a href="http://developer.echonest.com/" target="_blank" rel="external">Echo Nest</a> API 的 Python 客户端<a href="https://github.com/echonest/pyechonest" target="_blank" rel="external">官网</a></li>
<li>talkbox：一个用来处理演讲/信号的 Python 库<a href="http://scikits.appspot.com/talkbox" target="_blank" rel="external">官网</a></li>
<li>TimeSide：开源 web 音频处理框架。<a href="https://github.com/Parisson/TimeSide" target="_blank" rel="external">官网</a></li>
<li>tinytag：一个用来读取MP3, OGG, FLAC 以及 Wave 文件音乐元数据的库。<a href="https://github.com/devsnd/tinytag" target="_blank" rel="external">官网</a></li>
<li>mingus：一个高级音乐理论和曲谱包，支持 MIDI 文件和回放功能。<a href="http://bspaans.github.io/python-mingus/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>用来操作视频和GIF的库。</p>
<ul>
<li>moviepy：一个用来进行基于脚本的视频编辑模块，适用于多种格式，包括动图 GIFs。<a href="http://zulko.github.io/moviepy/" target="_blank" rel="external">官网</a></li>
<li>scikit-video：SciPy 视频处理常用程序。<a href="https://github.com/aizvorski/scikit-video" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h3><p>地理编码地址以及用来处理经纬度的库。</p>
<ul>
<li>GeoDjango：世界级地理图形 web 框架。<a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/" target="_blank" rel="external">官网</a></li>
<li>GeoIP：MaxMind GeoIP Legacy 数据库的 Python API。<a href="https://github.com/maxmind/geoip-api-python" target="_blank" rel="external">官网</a></li>
<li>geojson：GeoJSON 的 Python 绑定及工具。<a href="https://github.com/frewsxcv/python-geojson" target="_blank" rel="external">官网</a></li>
<li>geopy：Python 地址编码工具箱。<a href="https://github.com/geopy/geopy" target="_blank" rel="external">官网</a></li>
<li>pygeoip：纯 Python GeoIP API。<a href="https://github.com/appliedsec/pygeoip" target="_blank" rel="external">官网</a></li>
<li>django-countries：一个 Django 应用程序，提供用于表格的国家选择功能，国旗图标静态文件以及模型中的国家字段。<a href="https://github.com/SmileyChris/django-countries" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>使用HTTP的库。</p>
<ul>
<li>requests：人性化的HTTP请求库。<a href="http://docs.python-requests.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>grequests：requests 库 + gevent ，用于异步 HTTP 请求.<a href="https://github.com/kennethreitz/grequests" target="_blank" rel="external">官网</a></li>
<li>httplib2：全面的 HTTP 客户端库。<a href="https://github.com/jcgregorio/httplib2" target="_blank" rel="external">官网</a></li>
<li>treq：类似 requests 的Python API 构建于 Twisted HTTP 客户端之上。<a href="https://github.com/twisted/treq" target="_blank" rel="external">官网</a></li>
<li>urllib3：一个具有线程安全连接池，支持文件 post，清晰友好的 HTTP 库。<a href="https://github.com/shazow/urllib3" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>Python实现的数据库。</p>
<ul>
<li>pickleDB：一个简单，轻量级键值储存数据库。<a href="https://pythonhosted.org/pickleDB/" target="_blank" rel="external">官网</a></li>
<li>PipelineDB：流式 SQL 数据库。<a href="https://www.pipelinedb.com/" target="_blank" rel="external">官网</a></li>
<li>TinyDB：一个微型的，面向文档型数据库。<a href="https://github.com/msiemens/tinydb" target="_blank" rel="external">官网</a></li>
<li>ZODB：一个 Python 原生对象数据库。一个键值和对象图数据库。<a href="http://www.zodb.org/en/latest/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="数据库驱动"><a href="#数据库驱动" class="headerlink" title="数据库驱动"></a>数据库驱动</h3><p>用来连接和操作数据库的库。</p>
<ul>
<li>MySQL：<a href="http://shlomi-noach.github.io/awesome-mysql/" target="_blank" rel="external">awesome-mysql</a>系列<ul>
<li>mysql-python：Python 的 MySQL 数据库连接器。<a href="https://sourceforge.net/projects/mysql-python/" target="_blank" rel="external">官网</a></li>
<li>ysqlclient：<a href="https://github.com/PyMySQL/mysqlclient-python" target="_blank" rel="external">mysql-python</a> 分支，支持 Python 3。</li>
<li>oursql：一个更好的 MySQL 连接器，支持原生预编译指令和 BLOBs.<a href="https://pythonhosted.org/oursql/" target="_blank" rel="external">官网</a></li>
<li>PyMySQL：纯 Python MySQL 驱动，兼容 mysql-python。<a href="https://github.com/PyMySQL/PyMySQL" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>PostgreSQL<ul>
<li>psycopg2：Python 中最流行的 PostgreSQL 适配器。<a href="http://initd.org/psycopg/" target="_blank" rel="external">官网</a></li>
<li>queries：psycopg2 库的封装，用来和 PostgreSQL 进行交互。<a href="https://github.com/gmr/queries" target="_blank" rel="external">官网</a></li>
<li>txpostgres：基于 Twisted 的异步 PostgreSQL 驱动。<a href="http://txpostgres.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>其他关系型数据库<ul>
<li>apsw：另一个 Python SQLite封装。<a href="http://rogerbinns.github.io/apsw/" target="_blank" rel="external">官网</a></li>
<li>dataset：在数据库中存储Python字典</li>
<li>pymssql：一个简单的Microsoft SQL Server数据库接口。<a href="http://www.pymssql.org/en/latest/" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>NoSQL 数据库<ul>
<li>cassandra-python-driver：Cassandra 的 Python 驱动。<a href="https://github.com/datastax/python-driver" target="_blank" rel="external">官网</a></li>
<li>HappyBase：一个为 Apache HBase 设计的，对开发者友好的库。<a href="http://happybase.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>Plyvel：一个快速且功能丰富的 LevelDB 的 Python 接口。<a href="https://plyvel.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>py2neo：Neo4j restful 接口的Python 封装客户端。<a href="http://py2neo.org/2.0/" target="_blank" rel="external">官网</a></li>
<li>pycassa：Cassandra 的 Python Thrift 驱动。<a href="https://github.com/pycassa/pycassa" target="_blank" rel="external">官网</a></li>
<li>PyMongo：MongoDB 的官方 Python 客户端。<a href="https://docs.mongodb.org/ecosystem/drivers/python/" target="_blank" rel="external">官网</a></li>
<li>redis-py：Redis 的 Python 客户端。<a href="https://github.com/andymccurdy/redis-py" target="_blank" rel="external">官网</a></li>
<li>telephus：基于 Twisted 的 Cassandra 客户端。<a href="https://github.com/driftx/Telephus" target="_blank" rel="external">官网</a></li>
<li>txRedis：基于 Twisted 的 Redis 客户端。<a href="https://github.com/deldotdr/txRedis" target="_blank" rel="external">官网</a></li>
</ul>
</li>
</ul>
<h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>实现对象关系映射或数据映射技术的库。</p>
<ul>
<li>关系型数据库<ul>
<li>Django Models：Django 的一部分。<a href="https://docs.djangoproject.com/en/dev/topics/db/models/" target="_blank" rel="external">官网</a></li>
<li>SQLAlchemy：Python SQL 工具以及对象关系映射工具。<a href="http://www.sqlalchemy.org/" target="_blank" rel="external">官网</a><ul>
<li><a href="https://github.com/dahlia/awesome-sqlalchemy" target="_blank" rel="external">awesome-sqlalchemy</a>系列</li>
</ul>
</li>
<li><a href="http://hao.jobbole.com/peewee/" target="_blank" rel="external">Peewee</a>：一个小巧，富有表达力的 ORM。<a href="https://github.com/coleifer/peewee" target="_blank" rel="external">官网</a></li>
<li>PonyORM：提供面向生成器的 SQL 接口的 ORM。<a href="https://ponyorm.com/" target="_blank" rel="external">官网</a></li>
<li>python-sql：编写 Python 风格的 SQL 查询。<a href="https://pypi.python.org/pypi/python-sql" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>NoSQL 数据库<ul>
<li>django-mongodb-engine：Django MongoDB 后端。<a href="https://github.com/django-nonrel/mongodb-engine" target="_blank" rel="external">官网</a></li>
<li>PynamoDB：<a href="https://aws.amazon.com/dynamodb/" target="_blank" rel="external">Amazon DynamoDB</a> 的一个 Python 风格接口。<a href="https://github.com/jlafon/PynamoDB" target="_blank" rel="external">官网</a></li>
<li>flywheel：Amazon DynamoDB 的对象映射工具。<a href="https://github.com/mathcamp/flywheel" target="_blank" rel="external">官网</a></li>
<li>MongoEngine：一个Python 对象文档映射工具，用于 MongoDB。<a href="http://mongoengine.org/" target="_blank" rel="external">官网</a></li>
<li>hot-redis：为 Redis 提供 Python 丰富的数据类型。<a href="https://github.com/stephenmcd/hot-redis" target="_blank" rel="external">官网</a></li>
<li>redisco：一个 Python 库，提供可以持续存在在 Redis 中的简单模型和容器。<a href="https://github.com/kiddouk/redisco" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>其他<ul>
<li>butterdb：Google Drive 电子表格的 Python ORM。<a href="https://github.com/Widdershin/butterdb" target="_blank" rel="external">官网</a></li>
</ul>
</li>
</ul>
<h3 id="Web-框架"><a href="#Web-框架" class="headerlink" title="Web 框架"></a>Web 框架</h3><p>全栈 Web 框架。</p>
<ul>
<li><a href="http://hao.jobbole.com/django/" target="_blank" rel="external">Django</a>：Python 界最流行的 web 框架。<a href="https://www.djangoproject.com/" target="_blank" rel="external">官网</a><ul>
<li><a href="https://github.com/rosarior/awesome-django" target="_blank" rel="external">awesome-django</a>系列</li>
</ul>
</li>
<li><a href="http://hao.jobbole.com/flask/" target="_blank" rel="external">Flask</a>：一个 Python 微型框架。<a href="http://flask.pocoo.org/" target="_blank" rel="external">官网</a><ul>
<li><a href="https://github.com/humiaozuzu/awesome-flask" target="_blank" rel="external">awesome-flask</a>系列</li>
</ul>
</li>
<li>pyramid：一个小巧，快速，接地气的开源Python web 框架。<ul>
<li><a href="https://github.com/uralbash/awesome-pyramid" target="_blank" rel="external">awesome-pyramid</a>系列</li>
</ul>
</li>
<li><a href="http://hao.jobbole.com/bottle/" target="_blank" rel="external">Bottle</a>：一个快速小巧，轻量级的 WSGI 微型 web 框架。<a href="http://bottlepy.org/docs/dev/index.html" target="_blank" rel="external">官网</a></li>
<li>CherryPy：一个极简的 Python web 框架，服从 HTTP/1.1 协议且具有WSGI 线程池。<a href="http://www.cherrypy.org/" target="_blank" rel="external">官网</a></li>
<li>TurboGears：一个可以扩展为全栈解决方案的微型框架。<a href="http://www.turbogears.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/python-webpy/" target="_blank" rel="external">web.py</a>：一个 Python 的 web 框架，既简单，又强大。<a href="http://webpy.org/" target="_blank" rel="external">官网</a></li>
<li>web2py：一个全栈 web 框架和平台，专注于简单易用。<a href="http://www.web2py.com/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/tornado/" target="_blank" rel="external">Tornado</a>：一个web 框架和异步网络库。<a href="http://www.tornadoweb.org/en/latest/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>允许或拒绝用户访问数据或功能的库。</p>
<ul>
<li>Carteblanche：Module to align code with thoughts of users and designers. Also magically handles navigation and permissions.<a href="https://github.com/neuman/python-carteblanche/" target="_blank" rel="external">官网</a></li>
<li>django-guardian：Django 1.2+ 实现了单个对象权限。<a href="https://github.com/django-guardian/django-guardian" target="_blank" rel="external">官网</a></li>
<li>django-rules：一个小巧但是强大的应用，提供对象级别的权限管理，且不需要使用数据库。<a href="https://github.com/dfunckt/django-rules" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><p>内容管理系统</p>
<ul>
<li>odoo-cms: 一个开源的，企业级 CMS，基于odoo。<a href="http://www.odoo.com" target="_blank" rel="external">官网</a></li>
<li>django-cms：一个开源的，企业级 CMS，基于 Django。<a href="http://www.django-cms.org/en/" target="_blank" rel="external">官网</a></li>
<li>djedi-cms：一个轻量级但却非常强大的 Django CMS ，考虑到了插件，内联编辑以及性能。<a href="http://djedi-cms.org/" target="_blank" rel="external">官网</a></li>
<li>FeinCMS：基于 Django 构建的最先进的内容管理系统之一。<a href="http://www.feincms.org/" target="_blank" rel="external">官网</a></li>
<li>Kotti：一个高级的，Python 范的 web 应用框架，基于 Pyramid 构建。<a href="http://kotti.pylonsproject.org/" target="_blank" rel="external">官网</a></li>
<li>Mezzanine：一个强大的，持续的，灵活的内容管理平台。<a href="http://mezzanine.jupo.org/" target="_blank" rel="external">官网</a></li>
<li>Opps：一个为杂志，报纸网站以及大流量门户网站设计的 CMS 平台，基于 Django。<a href="http://opps.github.io/opps/" target="_blank" rel="external">官网</a></li>
<li>Plone：一个构建于开源应用服务器 Zope 之上的 CMS。<a href="https://plone.org/" target="_blank" rel="external">官网</a></li>
<li>Quokka：灵活，可扩展的小型 CMS，基于 Flask 和 MongoDB。<a href="http://quokkaproject.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/wagtail/" target="_blank" rel="external">Wagtail</a>：一个 Django 内容管理系统。<a href="https://wagtail.io/" target="_blank" rel="external">官网</a></li>
<li>Widgy：最新的 CMS 框架，基于 Django。<a href="https://wid.gy/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="电子商务"><a href="#电子商务" class="headerlink" title="电子商务"></a>电子商务</h3><p>用于电子商务以及支付的框架和库。</p>
<ul>
<li>django-oscar：一个用于 Django 的开源的电子商务框架。<a href="http://oscarcommerce.com/" target="_blank" rel="external">官网</a></li>
<li>django-shop：一个基于 Django 的店铺系统。<a href="https://github.com/awesto/django-shop" target="_blank" rel="external">官网</a></li>
<li>Cartridge：一个基于 Mezzanine 构建的购物车应用。<a href="https://github.com/stephenmcd/cartridge" target="_blank" rel="external">官网</a></li>
<li>shoop：一个基于 Django 的开源电子商务平台。<a href="https://www.shoop.io/en/" target="_blank" rel="external">官网</a></li>
<li>alipay：非官方的 Python 支付宝 API。<a href="https://github.com/lxneng/alipay" target="_blank" rel="external">官网</a></li>
<li>merchant：一个可以接收来自多种支付平台支付的 Django 应用。<a href="https://github.com/agiliq/merchant" target="_blank" rel="external">官网</a></li>
<li>money：货币类库with optional CLDR-backed locale-aware formatting and an extensible currency exchange solution.<a href="https://github.com/carlospalol/money" target="_blank" rel="external">官网</a></li>
<li>python-currencies：显示货币格式以及它的数值。<a href="https://github.com/Alir3z4/python-currencies" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h3><p>用来开发RESTful APIs的库</p>
<ul>
<li>Django<ul>
<li><a href="http://hao.jobbole.com/django-rest-framework/" target="_blank" rel="external">django-rest-framework</a>：一个强大灵活的工具，用来构建 web API。<a href="http://www.django-rest-framework.org/" target="_blank" rel="external">官网</a></li>
<li>django-tastypie：为Django 应用开发API。<a href="http://tastypieapi.org/" target="_blank" rel="external">官网</a></li>
<li>django-formapi：为 Django 的表单验证，创建 JSON APIs 。<a href="https://github.com/5monkeys/django-formapi" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>Flask<ul>
<li>flask-api：为 flask 开发的，可浏览 Web APIs 。<a href="http://www.flaskapi.org/" target="_blank" rel="external">官网</a></li>
<li>flask-restful：为 flask 快速创建REST APIs 。<a href="http://flask-restful.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>flask-restless：为 SQLAlchemy 定义的数据库模型创建 RESTful APIs 。<a href="https://flask-restless.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>flask-api-utils：为 Flask 处理 API 表示和验证。<a href="https://github.com/marselester/flask-api-utils" target="_blank" rel="external">官网</a></li>
<li>eve：REST API 框架，由 Flask, MongoDB 等驱动。<a href="https://github.com/nicolaiarocci/eve" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>Pyramid<ul>
<li>cornice：一个Pyramid 的 REST 框架 。<a href="https://cornice.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>与框架无关的<ul>
<li>falcon：一个用来建立云 API 和 web app 后端的高性能框架。<a href="http://falconframework.org/" target="_blank" rel="external">官网</a></li>
<li>sandman：为现存的数据库驱动系统自动创建 REST APIs 。<a href="https://github.com/jeffknupp/sandman" target="_blank" rel="external">官网</a></li>
<li>restless：框架无关的 REST 框架 ，基于从 Tastypie 学到的知识。<a href="http://restless.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>ripozo：快速创建 REST/HATEOAS/Hypermedia APIs。<a href="https://github.com/vertical-knowledge/ripozo" target="_blank" rel="external">官网</a></li>
</ul>
</li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>实现验证方案的库。</p>
<ul>
<li>OAuth<ul>
<li>Authomatic：简单但是强大的框架，身份验证/授权客户端。<a href="http://peterhudec.github.io/authomatic/" target="_blank" rel="external">官网</a></li>
<li>django-allauth：Django 的验证应用。<a href="https://github.com/pennersr/django-allauth" target="_blank" rel="external">官网</a></li>
<li>django-oauth-toolkit：为 Django 用户准备的 OAuth2。<a href="https://github.com/evonove/django-oauth-toolkit" target="_blank" rel="external">官网</a></li>
<li>django-oauth2-provider：为 Django 应用提供 OAuth2 接入。<a href="https://github.com/caffeinehit/django-oauth2-provider" target="_blank" rel="external">官网</a></li>
<li>Flask-OAuthlib：OAuth 1.0/a, 2.0 客户端实现，供 Flask 使用。<a href="https://github.com/lepture/flask-oauthlib" target="_blank" rel="external">官网</a></li>
<li>OAuthLib：一个 OAuth 请求-签名逻辑通用、 完整的实现。<a href="https://github.com/idan/oauthlib" target="_blank" rel="external">官网</a></li>
<li>python-oauth2：一个完全测试的抽象接口。用来创建 OAuth 客户端和服务端。<a href="https://github.com/joestump/python-oauth2" target="_blank" rel="external">官网</a></li>
<li>python-social-auth：一个设置简单的社会化验证方式。<a href="https://github.com/omab/python-social-auth" target="_blank" rel="external">官网</a></li>
<li>rauth：OAuth 1.0/a, 2.0, 和 Ofly 的 Python 库。<a href="https://github.com/litl/rauth" target="_blank" rel="external">官网</a></li>
<li>sanction：一个超级简单的OAuth2 客户端实现。<a href="https://github.com/demianbrecht/sanction" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>其他<ul>
<li>jose：JavaScript 对象签名和加密草案的实现。<a href="https://github.com/demonware/jose" target="_blank" rel="external">官网</a></li>
<li>PyJWT：JSON Web 令牌草案 01。<a href="https://github.com/jpadilla/pyjwt" target="_blank" rel="external">官网</a></li>
<li>python-jws：JSON Web 签名草案 02 的实现。<a href="https://github.com/brianloveswords/python-jws" target="_blank" rel="external">官网</a></li>
<li>python-jwt：一个用来生成和验证 JSON Web 令牌的模块。<a href="https://github.com/davedoesdev/python-jwt" target="_blank" rel="external">官网</a></li>
</ul>
</li>
</ul>
<h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>模板生成和词法解析的库和工具。</p>
<ul>
<li><a href="http://hao.jobbole.com/jinja2/" target="_blank" rel="external">Jinja2</a>：一个现代的，对设计师友好的模板引擎。<a href="https://github.com/pallets/jinja" target="_blank" rel="external">官网</a></li>
<li>Chameleon：一个 HTML/XML 模板引擎。 模仿了 ZPT（Zope Page Templates）, 进行了速度上的优化。<a href="https://chameleon.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>Genshi：Python 模板工具，用以生成 web 感知的结果。<a href="https://genshi.edgewall.org/" target="_blank" rel="external">官网</a></li>
<li>Mako：Python 平台的超高速轻量级模板。<a href="http://www.makotemplates.org/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>处理事件以及任务队列的库。</p>
<ul>
<li>celery：一个异步任务队列/作业队列，基于分布式消息传递。<a href="http://www.celeryproject.org/" target="_blank" rel="external">官网</a></li>
<li>huey：小型多线程任务队列。<a href="https://github.com/coleifer/huey" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/mrq/" target="_blank" rel="external">mrq</a>：Mr. Queue -一个 Python 的分布式 worker 任务队列， 使用 Redis 和 gevent。<a href="https://github.com/pricingassistant/mrq" target="_blank" rel="external">官网</a></li>
<li>rq：简单的 Python 作业队列。<a href="http://python-rq.org/" target="_blank" rel="external">官网</a></li>
<li>simpleq：一个简单的，可无限扩张的，基于亚马逊 SQS 的队列。<a href="https://github.com/rdegges/simpleq" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>对数据进行索引和执行搜索查询的库和软件。</p>
<ul>
<li>django-haystack：Django 模块化搜索。<a href="https://github.com/django-haystack/django-haystack" target="_blank" rel="external">官网</a></li>
<li>elasticsearch-py：Elasticsearch 的官方底层 Python 客户端。<a href="https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html" target="_blank" rel="external">官网</a></li>
<li>elasticsearch-dsl-py：Elasticsearch 的官方高级 Python 客户端。<a href="https://github.com/elastic/elasticsearch-dsl-py" target="_blank" rel="external">官网</a> </li>
<li>solrpy：<a href="http://lucene.apache.org/solr/" target="_blank" rel="external">solr</a>的 Python 客户端。<a href="https://github.com/edsu/solrpy" target="_blank" rel="external">官网</a></li>
<li>Whoosh：一个快速的纯 Python 搜索引擎库。<a href="http://whoosh.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="动态消息"><a href="#动态消息" class="headerlink" title="动态消息"></a>动态消息</h3><p>用来创建用户活动的库。</p>
<ul>
<li>django-activity-stream：从你的站点行为中生成通用活动信息流。<a href="https://github.com/justquick/django-activity-stream" target="_blank" rel="external">官网</a></li>
<li>Stream-Framework：使用 Cassandra 和 Redis 创建动态消息和通知系统。<a href="https://github.com/tschellenbach/Stream-Framework" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h3><p>管理、压缩、缩小网站资源的工具。</p>
<ul>
<li>django-compressor：将链接和内联的 JavaScript 或 CSS 压缩到一个单独的缓存文件中。<a href="https://github.com/django-compressor/django-compressor" target="_blank" rel="external">官网</a></li>
<li>django-storages：一个针对 Django 的自定义存储后端的工具集合。<a href="http://django-storages.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>fanstatic：打包、优化，并且把静态文件依赖作为 Python 的包来提供。<a href="http://www.fanstatic.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>File Conveyor：一个后台驻留的程序，用来发现和同步文件到 CDNs, S3 和 FTP。<a href="http://fileconveyor.org/" target="_blank" rel="external">官网</a></li>
<li>Flask-Assets：帮你将 web 资源整合到你的 Flask app 中。<a href="http://flask-assets.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>jinja-assets-compressor：一个 Jinja 扩展，用来编译和压缩你的资源。<a href="https://github.com/jaysonsantos/jinja-assets-compressor" target="_blank" rel="external">官网</a></li>
<li>webassets：为你的静态资源打包、优化和管理生成独一无二的缓存 URL。<a href="http://webassets.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>缓存数据的库。</p>
<ul>
<li>Beaker：一个缓存和会话库，可以用在 web 应用和独立 Python脚本和应用上。<a href="http://beaker.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>django-cache-machine：Django 模型的自动缓存和失效。<a href="https://github.com/django-cache-machine/django-cache-machine" target="_blank" rel="external">官网</a></li>
<li>django-cacheops：具有自动颗粒化事件驱动失效功能的 ORM。<a href="https://github.com/Suor/django-cacheops" target="_blank" rel="external">官网</a></li>
<li>django-viewlet：渲染模板，同时具有额外的缓存控制功能。<a href="https://github.com/5monkeys/django-viewlet" target="_blank" rel="external">官网</a></li>
<li>dogpile.cache：dogpile.cache 是 Beaker 的下一代替代品，由同一作者开发。<a href="http://dogpilecache.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>HermesCache：Python 缓存库，具有基于标签的失效和 dogpile effect 保护功能。<a href="https://pypi.python.org/pypi/HermesCache" target="_blank" rel="external">官网</a></li>
<li>johnny-cache：django应用缓存框架。<a href="https://github.com/jmoiron/johnny-cache" target="_blank" rel="external">官网</a></li>
<li>pylibmc：<a href="http://libmemcached.org/libMemcached.html" target="_blank" rel="external">libmemcached</a> 接口的 Python 封装。<a href="https://github.com/lericson/pylibmc" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h3><p>用来发送和解析电子邮件的库。</p>
<ul>
<li>django-celery-ses：带有 AWS SES 和 Celery 的 Django email 后端。<a href="https://github.com/StreetVoice/django-celery-ses" target="_blank" rel="external">官网</a></li>
<li>envelopes：供人类使用的电子邮件库。<a href="http://tomekwojcik.github.io/envelopes/" target="_blank" rel="external">官网</a></li>
<li>flanker：一个 email 地址和 Mime 解析库。<a href="https://github.com/mailgun/flanker" target="_blank" rel="external">官网</a></li>
<li>imbox：Python IMAP 库<a href="https://github.com/martinrusev/imbox" target="_blank" rel="external">官网</a></li>
<li>inbox.py：Python SMTP 服务器。<a href="https://github.com/kennethreitz/inbox.py" target="_blank" rel="external">官网</a></li>
<li>inbox：一个开源电子邮件工具箱。<a href="https://github.com/nylas/sync-engine" target="_blank" rel="external">官网</a></li>
<li>lamson：Python 风格的 SMTP 应用服务器。<a href="https://github.com/zedshaw/lamson" target="_blank" rel="external">官网</a></li>
<li>mailjet：Mailjet API 实现，用来提供批量发送邮件，统计等功能。<a href="https://github.com/WoLpH/mailjet" target="_blank" rel="external">官网</a></li>
<li>marrow.mailer：高性能可扩展邮件分发框架。<a href="https://github.com/marrow/mailer" target="_blank" rel="external">官网</a></li>
<li>modoboa：一个邮件托管和管理平台，具有现代的、简约的 Web UI。<a href="https://github.com/tonioo/modoboa" target="_blank" rel="external">官网</a></li>
<li>pyzmail：创建，发送和解析电子邮件。<a href="http://www.magiksys.net/pyzmail/" target="_blank" rel="external">官网</a></li>
<li>Talon：Mailgun 库，用来抽取信息和签名。<a href="https://github.com/mailgun/talon" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>用来进行国际化的库。</p>
<ul>
<li>Babel：一个Python 的国际化库。<a href="http://babel.pocoo.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>Korean：一个韩语词态库。<a href="https://korean.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="URL处理"><a href="#URL处理" class="headerlink" title="URL处理"></a>URL处理</h3><p>解析URLs的库</p>
<ul>
<li>furl：一个让处理 URL 更简单小型 Python 库。<a href="https://github.com/gruns/furl" target="_blank" rel="external">官网</a></li>
<li>purl：一个简单的，不可变的URL类，具有简洁的 API 来进行询问和处理。<a href="https://github.com/codeinthehole/purl" target="_blank" rel="external">官网</a></li>
<li>pyshorteners：一个纯 Python URL 缩短库。<a href="https://github.com/ellisonleao/pyshorteners" target="_blank" rel="external">官网</a></li>
<li>shorturl：生成短小 URL 和类似 bit.ly 短链的Python 实现。<a href="https://github.com/Alir3z4/python-shorturl" target="_blank" rel="external">官网</a></li>
<li>webargs：一个解析 HTTP 请求参数的库，内置对流行 web 框架的支持，包括 Flask, Django, Bottle, Tornado和 Pyramid。<a href="https://github.com/sloria/webargs" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="HTML处理"><a href="#HTML处理" class="headerlink" title="HTML处理"></a>HTML处理</h3><p>处理 HTML和XML的库。</p>
<ul>
<li>BeautifulSoup：以 Python 风格的方式来对 HTML 或 XML 进行迭代，搜索和修改。<a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="external">官网</a></li>
<li>bleach：一个基于白名单的 HTML 清理和文本链接库。<a href="http://bleach.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>cssutils：一个 Python 的 CSS 库。<a href="https://pypi.python.org/pypi/cssutils/" target="_blank" rel="external">官网</a></li>
<li>html5lib：一个兼容标准的 HTML 文档和片段解析及序列化库。<a href="https://github.com/html5lib/html5lib-python" target="_blank" rel="external">官网</a></li>
<li>lxml：一个非常快速，简单易用，功能齐全的库，用来处理 HTML 和 XML。<a href="http://lxml.de/" target="_blank" rel="external">官网</a></li>
<li>MarkupSafe：为Python 实现 XML/HTML/XHTML 标记安全字符串。<a href="https://github.com/pallets/markupsafe" target="_blank" rel="external">官网</a></li>
<li>pyquery：一个解析 HTML 的库，类似 jQuery。<a href="https://github.com/gawel/pyquery" target="_blank" rel="external">官网</a></li>
<li>untangle：将XML文档转换为Python对象，使其可以方便的访问。<a href="https://github.com/stchris/untangle" target="_blank" rel="external">官网</a></li>
<li>xhtml2pdf：HTML/CSS 转 PDF 工具。<a href="https://github.com/xhtml2pdf/xhtml2pdf" target="_blank" rel="external">官网</a></li>
<li>xmltodict：像处理 JSON 一样处理 XML。<a href="https://github.com/martinblech/xmltodict" target="_blank" rel="external">官网</a></li>
</ul>
<p>爬取网络站点的库</p>
<ul>
<li>Scrapy：一个快速高级的屏幕爬取及网页采集框架。<a href="http://scrapy.org/" target="_blank" rel="external">官网</a></li>
<li>cola：一个分布式爬虫框架。<a href="https://github.com/chineking/cola" target="_blank" rel="external">官网</a></li>
<li>Demiurge：基于PyQuery 的爬虫微型框架。<a href="https://github.com/matiasb/demiurge" target="_blank" rel="external">官网</a></li>
<li>feedparser：通用 feed 解析器。<a href="http://pythonhosted.org/feedparser/" target="_blank" rel="external">官网</a></li>
<li>Grab：站点爬取框架。<a href="http://grablib.org/" target="_blank" rel="external">官网</a></li>
<li>MechanicalSoup：用于自动和网络站点交互的 Python 库。<a href="https://github.com/hickford/MechanicalSoup" target="_blank" rel="external">官网</a></li>
<li>portia：Scrapy 可视化爬取。<a href="https://github.com/scrapinghub/portia" target="_blank" rel="external">官网</a></li>
<li>pyspider：一个强大的爬虫系统。<a href="https://github.com/binux/pyspider" target="_blank" rel="external">官网</a></li>
<li>RoboBrowser：一个简单的，Python 风格的库，用来浏览网站，而不需要一个独立安装的浏览器。<a href="https://github.com/jmcarp/robobrowser" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="网页内容提取"><a href="#网页内容提取" class="headerlink" title="网页内容提取"></a>网页内容提取</h3><p>用于进行网页内容提取的库。</p>
<ul>
<li>Haul：一个可以扩展的图像爬取工具。<a href="https://github.com/vinta/Haul" target="_blank" rel="external">官网</a></li>
<li>html2text：将 HTML 转换为 Markdown 格式文本<a href="https://github.com/Alir3z4/html2text" target="_blank" rel="external">官网</a></li>
<li>lassie：人性化的网页内容检索库。<a href="https://github.com/michaelhelmick/lassie" target="_blank" rel="external">官网</a></li>
<li>micawber：一个小型网页内容提取库，用来从 URLs 提取富内容。<a href="https://github.com/coleifer/micawber" target="_blank" rel="external">官网</a> </li>
<li><a href="http://hao.jobbole.com/python-newspaper/" target="_blank" rel="external">newspaper</a>：使用 Python 进行新闻提取，文章提取以及内容策展。<a href="https://github.com/codelucas/newspaper" target="_blank" rel="external">官网</a></li>
<li>opengraph：一个用来解析开放内容协议(Open Graph Protocol)的 Python模块。<a href="https://github.com/erikriver/opengraph" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/python-goose/" target="_blank" rel="external">python-goose</a>：HTML内容/文章提取器。<a href="https://github.com/grangier/python-goose" target="_blank" rel="external">官网</a></li>
<li>python-readability：arc90 公司 readability 工具的 Python 高速端口。<a href="https://github.com/buriy/python-readability" target="_blank" rel="external">官网</a></li>
<li>sanitize：为杂乱的数据世界带来调理性。<a href="https://github.com/Alir3z4/python-sanitize" target="_blank" rel="external">官网</a></li>
<li>sumy：一个为文本文件和 HTML 页面进行自动摘要的模块。<a href="https://github.com/miso-belica/sumy" target="_blank" rel="external">官网</a></li>
<li>textract：从任何格式的文档中提取文本，Word，PowerPoint，PDFs 等等。<a href="https://github.com/deanmalmgren/textract" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>进行表单操作的库。</p>
<ul>
<li>Deform：Python HTML 表单生成库，受到了 formish 表单生成库的启发。<a href="http://deform.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>django-bootstrap3：集成了 Bootstrap 3 的 Django。<a href="https://github.com/dyve/django-bootstrap3" target="_blank" rel="external">官网</a></li>
<li>django-crispy-forms：一个 Django 应用，他可以让你以一种非常优雅且 DRY（Don’t repeat yourself） 的方式来创建美观的表单。<a href="http://django-crispy-forms.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>django-remote-forms：一个平台独立的 Django 表单序列化工具。<a href="https://github.com/WiserTogether/django-remote-forms" target="_blank" rel="external">官网</a></li>
<li>WTForms：一个灵活的表单验证和呈现库。<a href="http://wtforms.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>WTForms-JSON：一个 WTForms 扩展，用来处理 JSON 数据。<a href="http://wtforms-json.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h3><p>数据验证库。多用于表单验证。</p>
<ul>
<li>Cerberus：A mappings-validator with a variety of rules, normalization-features and simple customization that uses a pythonic schema-definition.<a href="http://docs.python-cerberus.org/en/stable/" target="_blank" rel="external">官网</a></li>
<li>colander：一个用于对从 XML, JSON，HTML 表单获取的数据或其他同样简单的序列化数据进行验证和反序列化的系统。<a href="http://docs.pylonsproject.org/projects/colander/en/latest/" target="_blank" rel="external">官网</a></li>
<li>kmatch：一种用于匹配/验证/筛选 Python 字典的语言。<a href="https://github.com/ambitioninc/kmatch" target="_blank" rel="external">官网</a></li>
<li>schema：一个用于对 Python 数据结构进行验证的库。<a href="https://github.com/keleshev/schema" target="_blank" rel="external">官网</a> </li>
<li>Schematics：数据结构验证。<a href="https://github.com/schematics/schematics" target="_blank" rel="external">官网</a></li>
<li>valideer：轻量级可扩展的数据验证和适配库。<a href="https://github.com/podio/valideer" target="_blank" rel="external">官网</a></li>
<li>voluptuous：一个 Python 数据验证库。主要是为了验证传入 Python的 JSON，YAML 等数据。<a href="https://github.com/alecthomas/voluptuous" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="反垃圾技术"><a href="#反垃圾技术" class="headerlink" title="反垃圾技术"></a>反垃圾技术</h3><p>帮助你和电子垃圾进行战斗的库。</p>
<ul>
<li>django-simple-captcha：一个简单、高度可定制的Django 应用，可以为任何Django表单添加验证码。<a href="https://github.com/mbi/django-simple-captcha" target="_blank" rel="external">官网</a></li>
<li>django-simple-spam-blocker：一个用于Django的简单的电子垃圾屏蔽工具。<a href="https://github.com/moqada/django-simple-spam-blocker" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h3><p>用来进行标记的库。</p>
<ul>
<li>django-taggit：简单的 Django 标记工具。<a href="https://github.com/alex/django-taggit" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="管理面板"><a href="#管理面板" class="headerlink" title="管理面板"></a>管理面板</h3><p>管理界面库。</p>
<ul>
<li>Ajenti：一个你的服务器值得拥有的管理面板。<a href="https://github.com/Eugeny/ajenti" target="_blank" rel="external">官网</a></li>
<li>django-suit：Django 管理界面的一个替代品 (仅对于非商业用途是免费的)。<a href="http://djangosuit.com/" target="_blank" rel="external">官网</a></li>
<li>django-xadmin：Django admin 的一个替代品，具有很多不错的功能。<a href="https://github.com/sshwsfc/django-xadmin" target="_blank" rel="external">官网</a></li>
<li>flask-admin：一个用于 Flask 的简单可扩展的管理界面框架。<a href="https://github.com/flask-admin/flask-admin" target="_blank" rel="external">官网</a></li>
<li>flower：一个对 Celery 集群进行实时监控和提供 web 管理界面的工具。<a href="https://github.com/mher/flower" target="_blank" rel="external">官网</a></li>
<li>Grappelli：Django 管理界面的一个漂亮的皮肤。<a href="http://grappelliproject.com/" target="_blank" rel="external">官网</a> </li>
<li>Wooey：一个 Django 应用，可以为 Python 脚本创建 web 用户界面。<a href="https://github.com/wooey/wooey" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="静态站点生成器"><a href="#静态站点生成器" class="headerlink" title="静态站点生成器"></a>静态站点生成器</h3><p>静态站点生成器是一个软件，它把文本和模板作为输入，然后输出HTML文件。</p>
<ul>
<li>Pelican：使用 Markdown 或 ReST 来处理内容， Jinja 2 来制作主题。支持 DVCS, Disqus.。AGPL 许可。<a href="http://blog.getpelican.com/" target="_blank" rel="external">官网</a></li>
<li>Cactus：为设计师设计的静态站点生成器。<a href="https://github.com/koenbok/Cactus/" target="_blank" rel="external">官网</a> </li>
<li>Hyde：基于 Jinja2 的静态站点生成器。<a href="http://hyde.github.io/" target="_blank" rel="external">官网</a></li>
<li>Nikola：一个静态网站和博客生成器。<a href="https://www.getnikola.com/" target="_blank" rel="external">官网</a></li>
<li>Tinkerer：Tinkerer 是一个博客引擎/静态站点生成器，由Sphinx驱动。<a href="http://tinkerer.me/" target="_blank" rel="external">官网</a></li>
<li>Lektor：一个简单易用的静态 CMS 和博客引擎。<a href="https://www.getlektor.com/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>操作系统进程启动及通信库。</p>
<ul>
<li>envoy：比 Python <a href="https://docs.python.org/2/library/subprocess.html" target="_blank" rel="external">subprocess</a> 模块更人性化。<a href="https://github.com/kennethreitz/envoy" target="_blank" rel="external">官网</a></li>
<li>sarge：另一 种 subprocess 模块的封装。<a href="http://sarge.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>sh：一个完备的 subprocess 替代库。<a href="https://github.com/amoffat/sh" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p>用以进行并发和并行操作的库。</p>
<ul>
<li>multiprocessing：(Python 标准库) 基于进程的“线程”接口。<a href="https://docs.python.org/2/library/multiprocessing.html" target="_blank" rel="external">官网</a></li>
<li>threading：(Python 标准库)更高层的线程接口。<a href="https://docs.python.org/2/library/threading.html" target="_blank" rel="external">官网</a></li>
<li>eventlet：支持 WSGI 的异步框架。<a href="http://eventlet.net/" target="_blank" rel="external">官网</a></li>
<li>gevent：一个基于协程的 Python 网络库，使用<a href="https://github.com/python-greenlet/greenlet" target="_blank" rel="external">greenlet</a>。<a href="http://www.gevent.org/" target="_blank" rel="external">官网</a></li>
<li>Tomorrow：用于产生异步代码的神奇的装饰器语法实现。<a href="https://github.com/madisonmay/Tomorrow" target="_blank" rel="external">官网</a></li>
<li>uvloop：在libuv之上超快速实现asyncio事件循环。<a href="https://github.com/MagicStack/uvloop" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>用于网络编程的库。</p>
<ul>
<li>asyncio：(Python 标准库) 异步 I/O, 事件循环, 协程以及任务。<a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/twisted/" target="_blank" rel="external">Twisted</a>：一个事件驱动的网络引擎。<a href="https://twistedmatrix.com/trac/" target="_blank" rel="external">官网</a></li>
<li>pulsar：事件驱动的并发框架。<a href="https://github.com/quantmind/pulsar" target="_blank" rel="external">官网</a></li>
<li>diesel：基于Greenlet 的事件 I/O 框架。<a href="https://github.com/dieseldev/diesel" target="_blank" rel="external">官网</a></li>
<li>pyzmq：一个 ZeroMQ 消息库的 Python 封装。<a href="http://zeromq.github.io/pyzmq/" target="_blank" rel="external">官网</a></li>
<li>txZMQ：基于 Twisted 的 ZeroMQ 消息库的 Python 封装。<a href="https://github.com/smira/txZMQ" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>帮助使用WebSocket的库。</p>
<ul>
<li>AutobahnPython：给 Python 、使用的 WebSocket &amp; WAMP 基于 Twisted 和 <a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="external">asyncio</a>。<a href="https://github.com/crossbario/autobahn-python" target="_blank" rel="external">官网</a></li>
<li>Crossbar：开源统一应用路由(Websocket &amp; WAMP for Python on Autobahn).<a href="https://github.com/crossbario/crossbar/" target="_blank" rel="external">官网</a></li>
<li>django-socketio：给 Django 用的 WebSockets。<a href="https://github.com/stephenmcd/django-socketio" target="_blank" rel="external">官网</a></li>
<li>WebSocket-for-Python：为Python2/3 以及 PyPy 编写的 WebSocket 客户端和服务器库。<a href="https://github.com/Lawouach/WebSocket-for-Python" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="WSGI-服务器"><a href="#WSGI-服务器" class="headerlink" title="WSGI 服务器"></a>WSGI 服务器</h3><p>兼容 WSGI 的 web 服务器</p>
<ul>
<li>gunicorn：Pre-forked, 部分是由 C 语言编写的。<a href="https://pypi.python.org/pypi/gunicorn" target="_blank" rel="external">官网</a></li>
<li>uwsgi：uwsgi 项目的目的是开发一组全栈工具，用来建立托管服务， 由 C 语言编写。<a href="https://uwsgi-docs.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/bjoern/" target="_blank" rel="external">bjoern</a>：异步，非常快速，由 C 语言编写。<a href="https://pypi.python.org/pypi/bjoern" target="_blank" rel="external">官网</a></li>
<li>fapws3：异步 (仅对于网络端)，由 C 语言编写。<a href="http://www.fapws.org/" target="_blank" rel="external">官网</a></li>
<li>meinheld：异步，部分是由 C 语言编写的。<a href="https://pypi.python.org/pypi/meinheld" target="_blank" rel="external">官网</a></li>
<li>netius：异步，非常快速。<a href="https://github.com/hivesolutions/netius" target="_blank" rel="external">官网</a></li>
<li>paste：多线程，稳定，久经考验。<a href="http://pythonpaste.org/" target="_blank" rel="external">官网</a></li>
<li>rocket：多线程。<a href="https://pypi.python.org/pypi/rocket" target="_blank" rel="external">官网</a></li>
<li>waitress：多线程, 是它驱动着 Pyramid 框架。<a href="https://waitress.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>Werkzeug：一个 WSGI 工具库，驱动着 Flask ，而且可以很方便大嵌入到你的项目中去。<a href="http://werkzeug.pocoo.org/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="RPC-服务器"><a href="#RPC-服务器" class="headerlink" title="RPC 服务器"></a>RPC 服务器</h3><p>兼容 RPC 的服务器。</p>
<ul>
<li>SimpleJSONRPCServer：这个库是 JSON-RPC 规范的一个实现。<a href="https://github.com/joshmarshall/jsonrpclib/" target="_blank" rel="external">官网</a></li>
<li>SimpleXMLRPCServer：(Python 标准库) 简单的 XML-RPC 服务器实现，单线程。<a href="https://docs.python.org/2/library/simplexmlrpcserver.html" target="_blank" rel="external">官网</a></li>
<li>zeroRPC：zerorpc 是一个灵活的 RPC 实现，基于 ZeroMQ 和 MessagePack。<a href="https://github.com/0rpc/zerorpc-python" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h3><ul>
<li>cryptography：这个软件包意在提供密码学基本内容和方法提供给 Python 开发者。<a href="https://cryptography.io/en/latest/" target="_blank" rel="external">官网</a></li>
<li>hashids：在 Python 中实现 <a href="http://hashids.org/" target="_blank" rel="external">hashids</a> 。<a href="https://github.com/davidaurelio/hashids-python" target="_blank" rel="external">官网</a></li>
<li>Paramiko：SSHv2 协议的 Python (2.6+, 3.3+) ，提供客户端和服务端的功能。<a href="http://www.paramiko.org/" target="_blank" rel="external">官网</a></li>
<li>Passlib：安全密码存储／哈希库，<a href="https://pythonhosted.org/passlib/" target="_blank" rel="external">官网</a></li>
<li>PyCrypto：Python 密码学工具箱。<a href="https://www.dlitz.net/software/pycrypto/" target="_blank" rel="external">官网</a></li>
<li>PyNacl：网络和密码学(NaCl) 库的 Python 绑定。<a href="https://github.com/pyca/pynacl" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="图形用户界面"><a href="#图形用户界面" class="headerlink" title="图形用户界面"></a>图形用户界面</h3><p>用来创建图形用户界面程序的库。</p>
<ul>
<li>curses：内建的 <a href="http://www.gnu.org/software/ncurses/" target="_blank" rel="external">ncurses</a> 封装，用来创建终端图形用户界面。<a href="https://docs.python.org/2/library/curses.html#module-curses" target="_blank" rel="external">官网</a></li>
<li>enaml：使用类似 QML 的Declaratic语法来创建美观的用户界面。<a href="https://github.com/nucleic/enaml" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/kivy/" target="_blank" rel="external">kivy</a>：一个用来创建自然用户交互（NUI）应用程序的库，可以运行在 Windows, Linux, Mac OS X, Android 以及 iOS平台上。<a href="https://kivy.org/" target="_blank" rel="external">官网</a></li>
<li>pyglet：一个Python 的跨平台窗口及多媒体库。<a href="https://bitbucket.org/pyglet/pyglet/wiki/Home" target="_blank" rel="external">官网</a></li>
<li>PyQt：跨平台用户界面框架 <a href="http://www.qt.io/" target="_blank" rel="external">Qt</a> 的 Python 绑定 ，支持Qt v4 和 Qt v5。<a href="https://riverbankcomputing.com/software/pyqt/intro" target="_blank" rel="external">官网</a></li>
<li>PySide：P跨平台用户界面框架 <a href="http://www.qt.io/" target="_blank" rel="external">Qt</a> 的 Python 绑定 ，支持Qt v4。<a href="https://wiki.qt.io/PySide" target="_blank" rel="external">官网</a></li>
<li>Tkinter：Tkinter 是 Python GUI 的一个事实标准库。<a href="https://wiki.python.org/moin/TkInter" target="_blank" rel="external">官网</a></li>
<li>Toga：一个 Python 原生的, 操作系统原生的 GUI 工具包。<a href="https://github.com/pybee/toga" target="_blank" rel="external">官网</a></li>
<li>urwid：一个用来创建终端 GUI 应用的库，支持组件，事件和丰富的色彩等。<a href="http://urwid.org/" target="_blank" rel="external">官网</a></li>
<li>wxPython：wxPython 是 wxWidgets C++ 类库和 Python 语言混合的产物。<a href="http://wxpython.org/" target="_blank" rel="external">官网</a></li>
<li>PyGObject：GLib/GObject/GIO/GTK+ (GTK+3) 的 Python 绑定<a href="https://wiki.gnome.org/Projects/PyGObject" target="_blank" rel="external">官网</a></li>
<li>Flexx：Flexx 是一个纯 Python 语言编写的用来创建 GUI 程序的工具集，它使用 web 技术进行界面的展示。<a href="https://github.com/zoofIO/flexx" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h3><p>超赞的游戏开发库。</p>
<ul>
<li>Cocos2d：cocos2d 是一个用来开发 2D 游戏， 示例和其他图形/交互应用的框架。基于 pyglet。<a href="http://cocos2d.org/" target="_blank" rel="external">官网</a></li>
<li>Panda3D：由迪士尼开发的 3D 游戏引擎，并由卡内基梅陇娱乐技术中心负责维护。使用C++编写, 针对 Python 进行了完全的封装。<a href="https://www.panda3d.org/" target="_blank" rel="external">官网</a></li>
<li>Pygame：Pygame 是一组 Python 模块，用来编写游戏。<a href="http://www.pygame.org/news.html" target="_blank" rel="external">官网</a></li>
<li>PyOgre：Ogre 3D 渲染引擎的 Python 绑定，可以用来开发游戏和仿真程序等任何 3D 应用。<a href="http://www.ogre3d.org/tikiwiki/PyOgre" target="_blank" rel="external">官网</a></li>
<li>PyOpenGL：OpenGL 的 Python 绑定及其相关 APIs。<a href="http://pyopengl.sourceforge.net/" target="_blank" rel="external">官网</a></li>
<li>PySDL2：SDL2 库的封装，基于 ctypes。<a href="http://pysdl2.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>RenPy：一个视觉小说（visual novel）引擎。<a href="https://www.renpy.org/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>用来生成和操作日志的库。</p>
<ul>
<li>logging：(Python 标准库) 为 Python 提供日志功能。<a href="https://docs.python.org/2/library/logging.html" target="_blank" rel="external">官网</a></li>
<li>logbook：Logging 库的替代品。<a href="http://pythonhosted.org/Logbook/" target="_blank" rel="external">官网</a></li>
<li>Eliot：为复杂的和分布式系统创建日志。<a href="https://eliot.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>Raven：Sentry的 Python 客户端。<a href="http://raven.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>Sentry：实时记录和收集日志的服务器。<a href="https://pypi.python.org/pypi/sentry" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><p>进行代码库测试和生成测试数据的库。</p>
<ul>
<li>测试框架<ul>
<li>unittest：(Python 标准库) 单元测试框架。<a href="https://docs.python.org/2/library/unittest.html" target="_blank" rel="external">官网</a></li>
<li>nose：nose 扩展了 unittest 的功能。<a href="https://nose.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>contexts：一个 Python 3.3+ 的 BDD 框架。受到C# – Machine.Specifications的启发。<a href="https://github.com/benjamin-hodgson/Contexts" target="_blank" rel="external">官网</a></li>
<li>hypothesis：Hypothesis 是一个基于先进的 Quickcheck 风格特性的测试库。<a href="https://github.com/DRMacIver/hypothesis" target="_blank" rel="external">官网</a></li>
<li>mamba：Python 的终极测试工具， 拥护BDD。<a href="http://nestorsalceda.github.io/mamba/" target="_blank" rel="external">官网</a></li>
<li>PyAutoGUI：PyAutoGUI 是一个人性化的跨平台 GUI 自动测试模块。<a href="https://github.com/asweigart/pyautogui" target="_blank" rel="external">官网</a></li>
<li>pyshould：Should 风格的断言，基于 <a href="https://github.com/hamcrest/PyHamcrest" target="_blank" rel="external">PyHamcrest</a>。<a href="https://github.com/drslump/pyshould" target="_blank" rel="external">官网</a></li>
<li>pytest：一个成熟的全功能 Python 测试工具。<a href="http://pytest.org/latest/" target="_blank" rel="external">官网</a></li>
<li>green：干净，多彩的测试工具。<a href="https://github.com/CleanCut/green" target="_blank" rel="external">官网</a></li>
<li>pyvows：BDD 风格的测试工具，受Vows.js的启发。<a href="http://heynemann.github.io/pyvows/" target="_blank" rel="external">官网</a>-</li>
<li>Robot Framework：一个通用的自动化测试框架。<a href="https://github.com/robotframework/robotframework" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>Web 测试<ul>
<li>Selenium：<a href="http://www.seleniumhq.org/" target="_blank" rel="external">Selenium</a> WebDriver 的 Python 绑定。<a href="https://pypi.python.org/pypi/selenium" target="_blank" rel="external">官网</a></li>
<li>locust：使用 Python 编写的，可扩展的用户加载测试工具。<a href="https://github.com/locustio/locust" target="_blank" rel="external">官网</a></li>
<li>sixpack：一个和语言无关的 A/B 测试框架。<a href="https://github.com/seatgeek/sixpack" target="_blank" rel="external">官网</a></li>
<li>splinter：开源的 web 应用测试工具。<a href="https://splinter.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>Mock测试<ul>
<li>mock：(Python 标准库) 一个用于伪造测试的库。<a href="https://docs.python.org/3/library/unittest.mock.html" target="_blank" rel="external">官网</a></li>
<li>doublex：Python 的一个功能强大的 doubles  测试框架。<a href="https://pypi.python.org/pypi/doublex" target="_blank" rel="external">官网</a></li>
<li>freezegun：通过伪造日期模块来生成不同的时间。<a href="https://github.com/spulec/freezegun" target="_blank" rel="external">官网</a></li>
<li>httmock：针对 Python 2.6+ 和 3.2+ 生成 伪造请求的库。<a href="https://github.com/patrys/httmock" target="_blank" rel="external">官网</a></li>
<li>httpretty：Python 的 HTTP 请求 mock 工具。<a href="http://falcao.it/HTTPretty/" target="_blank" rel="external">官网</a></li>
<li>responses：伪造 Python 中的 requests 库的一个通用库。<a href="https://github.com/getsentry/responses" target="_blank" rel="external">官网</a></li>
<li>VCR.py：在你的测试中记录和重放 HTTP 交互。<a href="https://github.com/kevin1024/vcrpy" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>对象工厂<ul>
<li>factoryboy：一个 Python 用的测试固件 (test fixtures) 替代库。<a href="https://github.com/rbarrois/factoryboy" target="_blank" rel="external">官网</a></li>
<li>mixer：另外一个测试固件 (test fixtures) 替代库，支持 Django, Flask, SQLAlchemy, Peewee 等。<a href="https://github.com/klen/mixer" target="_blank" rel="external">官网</a></li>
<li>modelmommy：为 Django 测试创建随机固件<a href="https://github.com/vandersonmota/modelmommy" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>代码覆盖率<ul>
<li>coverage：代码覆盖率测量。<a href="https://pypi.python.org/pypi/coverage" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>伪数据<ul>
<li>faker：一个 Python 库，用来生成伪数据。<a href="http://www.joke2k.net/faker/" target="_blank" rel="external">官网</a></li>
<li>fake2db：伪数据库生成器。<a href="https://github.com/emirozer/fake2db" target="_blank" rel="external">官网</a></li>
<li>radar：生成随机的日期/时间。<a href="https://pypi.python.org/pypi/radar" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>错误处理<ul>
<li>FuckIt.py：FuckIt.py 使用最先进的技术来保证你的 Python 代码无论对错都能继续运行。<a href="https://github.com/ajalt/fuckitpy" target="_blank" rel="external">官网</a></li>
</ul>
</li>
</ul>
<h3 id="代码分析和Lint工具"><a href="#代码分析和Lint工具" class="headerlink" title="代码分析和Lint工具"></a>代码分析和Lint工具</h3><p>进行代码分析，解析和操作代码库的库和工具。</p>
<ul>
<li>代码分析<ul>
<li>coala：语言独立和易于扩展的代码分析应用程序。<a href="http://coala-analyzer.org/" target="_blank" rel="external">官网</a></li>
<li>code2flow：把你的 Python 和 JavaScript 代码转换为流程图。<a href="https://github.com/scottrogowski/code2flow" target="_blank" rel="external">官网</a></li>
<li>pycallgraph：这个库可以把你的Python 应用的流程(调用图)进行可视化。<a href="https://github.com/gak/pycallgraph" target="_blank" rel="external">官网</a></li>
<li>pysonar2：Python 类型推断和检索工具。<a href="https://github.com/yinwang0/pysonar2" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>Lint工具<ul>
<li>Flake8：模块化源码检查工具: pep8, pyflakes 以及 co。<a href="https://pypi.python.org/pypi/flake8" target="_blank" rel="external">官网</a></li>
<li>Pylint：一个完全可定制的源码分析器。<a href="https://www.pylint.org/" target="_blank" rel="external">官网</a></li>
<li>pylama：Python 和 JavaScript 的代码审查工具。<a href="https://pylama.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>代码格式化<ul>
<li>autopep8：自动格式化 Python 代码，以使其符合 PEP8 规范。<a href="https://github.com/hhatto/autopep8" target="_blank" rel="external">官网</a></li>
</ul>
</li>
</ul>
<h3 id="Debugging-Tools"><a href="#Debugging-Tools" class="headerlink" title="Debugging Tools"></a>Debugging Tools</h3><p>用来进行代码调试的库。</p>
<ul>
<li>调试器<ul>
<li>ipdb：IPython 启用的 <a href="https://docs.python.org/2/library/pdb.html" target="_blank" rel="external">pdb</a>。<a href="https://pypi.python.org/pypi/ipdb" target="_blank" rel="external">官网</a></li>
<li>pudb：全屏，基于控制台的 Python 调试器。<a href="https://pypi.python.org/pypi/pudb" target="_blank" rel="external">官网</a></li>
<li>pyringe：可以在 Python 进程中附加和注入代码的调试器。<a href="https://github.com/google/pyringe" target="_blank" rel="external">官网</a></li>
<li>wdb：一个奇异的 web 调试器，通过 WebSockets 工作。<a href="https://github.com/Kozea/wdb" target="_blank" rel="external">官网</a></li>
<li>winpdb：一个具有图形用户界面的 Python 调试器，可以进行远程调试，基于 rpdb2。<a href="http://winpdb.org/" target="_blank" rel="external">官网</a></li>
<li>django-debug-toolbar：为 Django 显示各种调试信息。<a href="https://github.com/django-debug-toolbar/django-debug-toolbar" target="_blank" rel="external">官网</a></li>
<li>django-devserver：一个 Django 运行服务器的替代品。<a href="https://github.com/dcramer/django-devserver" target="_blank" rel="external">官网</a></li>
<li>flask-debugtoolbar：django-debug-toolbar 的 flask 版。<a href="https://github.com/mgood/flask-debugtoolbar" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>性能分析器<ul>
<li>lineprofiler：逐行性能分析。<a href="https://github.com/rkern/lineprofiler" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/memory_profiler/" target="_blank" rel="external">Memory Profiler</a>：监控 Python 代码的内存使用。<a href="http://pypi.python.org/pypi/memory_profiler" target="_blank" rel="external">官网</a>、<a href="https://github.com/fabianp/memoryprofiler" target="_blank" rel="external">内存</a></li>
<li>profiling：一个交互式 Python 性能分析工具。<a href="https://github.com/what-studio/profiling" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>其他<ul>
<li>pyelftools：解析和分析 ELF 文件以及 DWARF 调试信息。<a href="https://github.com/eliben/pyelftools" target="_blank" rel="external">官网</a></li>
<li>python-statsd：<a href="https://github.com/etsy/statsd/" target="_blank" rel="external">statsd</a> 服务器的 Python 客户端。<a href="https://github.com/WoLpH/python-statsd" target="_blank" rel="external">官网</a></li>
</ul>
</li>
</ul>
<h3 id="Science-and-Data-Analysis"><a href="#Science-and-Data-Analysis" class="headerlink" title="Science and Data Analysis"></a>Science and Data Analysis</h3><p>用来进行科学计算和数据分析的库。</p>
<ul>
<li>astropy：一个天文学 Python 库。<a href="http://www.astropy.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/bcbio-nextgen/" target="_blank" rel="external">bcbio-nextgen</a>：这个工具箱为全自动高通量测序分析提供符合最佳实践的处理流程。<a href="https://github.com/chapmanb/bcbio-nextgen" target="_blank" rel="external">官网</a></li>
<li>bccb：生物分析相关代码集合<a href="https://github.com/chapmanb/bcbb" target="_blank" rel="external">官网</a></li>
<li>Biopython：Biopython 是一组可以免费使用的用来进行生物计算的工具。<a href="http://biopython.org/wiki/MainPage" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/blaze/" target="_blank" rel="external">blaze</a>：NumPy 和 Pandas 的大数据接口。<a href="http://blaze.readthedocs.org/en/latest/index.html" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/cclib/" target="_blank" rel="external">cclib</a>：一个用来解析和解释计算化学软件包输出结果的库。<a href="http://cclib.github.io/" target="_blank" rel="external">官网</a></li>
<li>NetworkX：一个为复杂网络设计的高性能软件。<a href="https://networkx.github.io/" target="_blank" rel="external">官网</a></li>
<li>Neupy：执行和测试各种不同的人工神经网络算法。<a href="http://neupy.com/pages/home.html" target="_blank" rel="external">官网</a></li>
<li>Numba：Python JIT (just in time) 编译器，针对科学用的 Python ，由Cython 和 NumPy 的开发者开发。<a href="http://numba.pydata.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/numpy/" target="_blank" rel="external">NumPy</a>：使用 Python 进行科学计算的基础包。<a href="http://www.numpy.org/" target="_blank" rel="external">官网</a></li>
<li>Open Babel：一个化学工具箱，用来描述多种化学数据。<a href="http://openbabel.org/wiki/MainPage" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/open-mining/" target="_blank" rel="external">Open Mining</a>：使用 Python 挖掘商业情报 (BI) (Pandas web 接口)。<a href="https://github.com/mining/mining" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/orange/" target="_blank" rel="external">orange</a>：通过可视化编程或 Python 脚本进行数据挖掘，数据可视化，分析和机器学习。<a href="http://orange.biolab.si/" target="_blank" rel="external">官网</a></li>
<li>Pandas：提供高性能，易用的数据结构和数据分析工具。<a href="http://pandas.pydata.org/" target="_blank" rel="external">官网</a></li>
<li>PyDy：PyDy 是 Python Dynamics 的缩写，用来为动力学运动建模工作流程提供帮助， 基于 NumPy, SciPy, IPython 和 matplotlib。<a href="http://www.pydy.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/pymc/" target="_blank" rel="external">PyMC</a>：马尔科夫链蒙特卡洛采样工具。<a href="https://github.com/pymc-devs/pymc3" target="_blank" rel="external">官网</a></li>
<li>RDKit：化学信息学和机器学习软件。<a href="http://www.rdkit.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/scipy/" target="_blank" rel="external">SciPy</a>：由一些基于 Python ，用于数学，科学和工程的开源软件构成的生态系统。<a href="http://www.scipy.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/statsmodels/" target="_blank" rel="external">statsmodels</a>：统计建模和计量经济学。<a href="https://github.com/statsmodels/statsmodels" target="_blank" rel="external">官网</a></li>
<li>SymPy：一个用于符号数学的 Python 库。<a href="https://github.com/sympy/sympy" target="_blank" rel="external">官网</a></li>
<li>zipline：一个 Python 算法交易库。<a href="https://github.com/quantopian/zipline" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/bayesian-belief-networks/" target="_blank" rel="external">Bayesian-belief-networks</a>：优雅的贝叶斯信念网络框架。<a href="https://github.com/eBay/bayesian-belief-networks" target="_blank" rel="external">官网</a></li>
<li>keras: 以tensorflow或者theano为后端的深度学习封装库，快速上手神经网络<a href="https://keras.io/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><p>进行数据可视化的库。 参见: <a href="https://github.com/sorrycc/awesome-javascript#data-visualization" target="_blank" rel="external">awesome-javascript</a>。</p>
<ul>
<li>matplotlib：一个 Python 2D 绘图库。<a href="http://matplotlib.org/" target="_blank" rel="external">官网</a></li>
<li>bokeh：用 Python 进行交互式 web 绘图。<a href="https://github.com/bokeh/bokeh" target="_blank" rel="external">官网</a></li>
<li>ggplot：ggplot2 给 R 提供的 API 的 Python 版本。<a href="https://github.com/yhat/ggplot" target="_blank" rel="external">官网</a></li>
<li>plotly：协同 Python 和 matplotlib 工作的 web 绘图库。<a href="https://plot.ly/python/" target="_blank" rel="external">官网</a></li>
<li>pygal：一个 Python SVG 图表创建工具。<a href="http://www.pygal.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>pygraphviz：Graphviz 的 Python 接口。<a href="https://pypi.python.org/pypi/pygraphviz" target="_blank" rel="external">官网</a></li>
<li>PyQtGraph：交互式实时2D/3D/图像绘制及科学/工程学组件。<a href="http://www.pyqtgraph.org/" target="_blank" rel="external">官网</a></li>
<li>SnakeViz：一个基于浏览器的 Python’s cProfile 模块输出结果查看工具。<a href="http://jiffyclub.github.io/snakeviz/" target="_blank" rel="external">官网</a></li>
<li>vincent：把 Python 转换为 Vega 语法的转换工具。<a href="https://github.com/wrobstory/vincent" target="_blank" rel="external">官网</a></li>
<li>VisPy：基于 OpenGL 的高性能科学可视化工具。<a href="http://vispy.org/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h3><p>计算机视觉库。</p>
<ul>
<li>OpenCV：开源计算机视觉库。<a href="http://opencv.org/" target="_blank" rel="external">官网</a></li>
<li>pyocr：Tesseract和Cuneiform的包装库。<a href="https://github.com/jflesch/pyocr" target="_blank" rel="external">官网</a></li>
<li>pytesseract：<a href="https://github.com/tesseract-ocr" target="_blank" rel="external">Google Tesseract OCR</a>的另一包装库。<a href="https://github.com/madmaze/pytesseract" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/simplecv/" target="_blank" rel="external">SimpleCV</a>：一个用来创建计算机视觉应用的开源框架。<a href="http://simplecv.org/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p>机器学习库。 参见: <a href="https://github.com/josephmisiti/awesome-machine-learning#python" target="_blank" rel="external">awesome-machine-learning</a>.</p>
<ul>
<li>Crab：灵活、快速的推荐引擎。<a href="https://github.com/muricoca/crab" target="_blank" rel="external">官网</a></li>
<li>gensim：人性化的话题建模库。<a href="https://github.com/piskvorky/gensim" target="_blank" rel="external">官网</a></li>
<li>hebel：GPU 加速的深度学习库。<a href="https://github.com/hannes-brt/hebel" target="_blank" rel="external">官网</a></li>
<li>NuPIC：智能计算 Numenta 平台。<a href="https://github.com/numenta/nupic" target="_blank" rel="external">官网</a></li>
<li>pattern：Python 网络挖掘模块。<a href="https://github.com/clips/pattern" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/pybrain/" target="_blank" rel="external">PyBrain</a>：另一个 Python 机器学习库。<a href="https://github.com/pybrain/pybrain" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/pylearn2/" target="_blank" rel="external">Pylearn2</a>：一个基于 <a href="https://github.com/Theano/Theano" target="_blank" rel="external">Theano</a> 的机器学习库。<a href="https://github.com/lisa-lab/pylearn2" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/python-recsys/" target="_blank" rel="external">python-recsys</a>：一个用来实现推荐系统的 Python 库。<a href="https://github.com/ocelma/python-recsys" target="_blank" rel="external">官网</a></li>
<li>scikit-learn：基于 SciPy 构建的机器学习 Python 模块。<a href="http://scikit-learn.org/" target="_blank" rel="external">官网</a></li>
<li>pydeep：Python 深度学习库。<a href="https://github.com/andersbll/deeppy" target="_blank" rel="external">官网</a></li>
<li>vowpalporpoise：轻量级 <a href="https://github.com/JohnLangford/vowpalwabbit/" target="_blank" rel="external">Vowpal Wabbit</a> 的 Python 封装。<a href="https://github.com/josephreisinger/vowpalporpoise" target="_blank" rel="external">官网</a></li>
<li>skflow：一个 <a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="external">TensorFlow</a> 的简化接口(模仿 scikit-learn)。<a href="https://github.com/tensorflow/skflow" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><p>MapReduce 框架和库。</p>
<ul>
<li><a href="http://hao.jobbole.com/dpark/" target="_blank" rel="external">dpark</a>：Spark 的 Python 克隆版，一个类似 MapReduce 的框架。<a href="https://github.com/douban/dpark" target="_blank" rel="external">官网</a></li>
<li>dumbo：这个 Python 模块可以让人轻松的编写和运行 Hadoop 程序。<a href="https://github.com/klbostee/dumbo" target="_blank" rel="external">官网</a></li>
<li>luigi：这个模块帮你构建批处理作业的复杂流水线。<a href="https://github.com/spotify/luigi" target="_blank" rel="external">官网</a></li>
<li>mrjob：在 Hadoop 或 Amazon Web Services 上运行 MapReduce 任务。<a href="https://github.com/Yelp/mrjob" target="_blank" rel="external">官网</a></li>
<li>PySpark：Spark 的 Python API 。<a href="http://spark.apache.org/docs/latest/programming-guide.html" target="_blank" rel="external">官网</a></li>
<li>streamparse：运行针对事实数据流的 Python 代码。集成了<a href="http://storm.apache.org/" target="_blank" rel="external">Apache Storm</a>。<a href="https://github.com/Parsely/streamparse" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>使用 Python 进行函数式编程。</p>
<ul>
<li>CyToolz：Toolz 的 Cython 实现 : 高性能函数式工具。<a href="https://github.com/pytoolz/cytoolz/" target="_blank" rel="external">官网</a></li>
<li>fn.py：在 Python 中进行函数式编程 : 实现了一些享受函数式编程缺失的功能。<a href="https://github.com/kachayev/fn.py" target="_blank" rel="external">官网</a></li>
<li>funcy：炫酷又实用的函数式工具。<a href="https://github.com/Suor/funcy" target="_blank" rel="external">官网</a></li>
<li>Toolz：一组用于迭代器，函数和字典的函数式编程工具。<a href="https://github.com/pytoolz/toolz" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="第三方-API"><a href="#第三方-API" class="headerlink" title="第三方 API"></a>第三方 API</h3><p>用来访问第三方 API的库。 参见： <a href="https://github.com/realpython/list-of-python-api-wrappers" target="_blank" rel="external">List of Python API Wrappers and Libraries</a>。</p>
<ul>
<li>apache-libcloud：一个为各种云设计的 Python 库。<a href="https://libcloud.apache.org/" target="_blank" rel="external">官网</a></li>
<li>boto：Amazon Web Services 的 Python 接口。<a href="https://github.com/boto/boto" target="_blank" rel="external">官网</a></li>
<li>django-wordpress：WordPress models and views for Django.<a href="https://github.com/sunlightlabs/django-wordpress/" target="_blank" rel="external">官网</a></li>
<li>facebook-sdk：Facebook 平台的 Python SDK.<a href="https://github.com/mobolic/facebook-sdk" target="_blank" rel="external">官网</a></li>
<li>facepy：Facepy 让和 Facebook’s Graph API 的交互变得更容易。<a href="https://github.com/jgorset/facepy" target="_blank" rel="external">官网</a></li>
<li>gmail：Gmail 的 Python 接口。<a href="https://github.com/charlierguo/gmail" target="_blank" rel="external">官网</a></li>
<li>google-api-python-client：Python 用的 Google APIs 客户端库。<a href="https://github.com/google/google-api-python-client" target="_blank" rel="external">官网</a></li>
<li>gspread：Google 电子表格的 Python API.<a href="https://github.com/burnash/gspread" target="_blank" rel="external">官网</a></li>
<li>twython：Twitter API 的封装。<a href="https://github.com/ryanmcgrath/twython" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="DevOps-工具"><a href="#DevOps-工具" class="headerlink" title="DevOps 工具"></a>DevOps 工具</h3><p>用于 DevOps 的软件和库。</p>
<ul>
<li>Ansible：一个非常简单的 IT 自动化平台。<a href="https://github.com/ansible/ansible" target="_blank" rel="external">官网</a></li>
<li>SaltStack：基础设施自动化和管理系统。<a href="https://github.com/saltstack/salt" target="_blank" rel="external">官网</a></li>
<li>OpenStack：用于构建私有和公有云的开源软件。<a href="http://www.openstack.org/" target="_blank" rel="external">官网</a></li>
<li>Docker Compose：快速，分离的开发环境，使用 Docker。<a href="https://docs.docker.com/compose/" target="_blank" rel="external">官网</a></li>
<li>Fabric：一个简单的，Python 风格的工具，用来进行远程执行和部署。<a href="http://www.fabfile.org/" target="_blank" rel="external">官网</a></li>
<li>cuisine：为 Fabric 提供一系列高级函数。<a href="https://github.com/sebastien/cuisine" target="_blank" rel="external">官网</a></li>
<li>Fabtools：一个用来编写超赞的 Fabric 文件的工具。<a href="https://github.com/ronnix/fabtools" target="_blank" rel="external">官网</a></li>
<li>gitapi：Git 的纯 Python API。<a href="https://bitbucket.org/haard/gitapi" target="_blank" rel="external">官网</a></li>
<li>hgapi：Mercurial 的纯 Python API。<a href="https://bitbucket.org/haard/hgapi" target="_blank" rel="external">官网</a></li>
<li>honcho：<a href="https://github.com/ddollar/foreman" target="_blank" rel="external">Foreman</a>的 Python 克隆版，用来管理基于<a href="https://devcenter.heroku.com/articles/procfile" target="_blank" rel="external">Procfile</a>的应用。<a href="https://github.com/nickstenning/honcho" target="_blank" rel="external">官网</a></li>
<li>pexpect：Controlling interactive programs in a pseudo-terminal like 在一个伪终端中控制交互程序，就像 GNU expect 一样。<a href="https://github.com/pexpect/pexpect" target="_blank" rel="external">官网</a></li>
<li>psutil：一个跨平台进程和系统工具模块。<a href="https://github.com/giampaolo/psutil" target="_blank" rel="external">官网</a></li>
<li>supervisor：UNIX 的进程控制系统。<a href="https://github.com/Supervisor/supervisor" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><p>任务调度库。</p>
<ul>
<li>APScheduler：轻巧但强大的进程内任务调度，使你可以调度函数。<a href="http://apscheduler.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>django-schedule：一个 Django 排程应用。<a href="https://github.com/thauber/django-schedule" target="_blank" rel="external">官网</a></li>
<li>doit：一个任务执行和构建工具。<a href="http://pydoit.org/" target="_blank" rel="external">官网</a></li>
<li>gunnery：分布式系统使用的多用途任务执行工具 ，具有 web 交互界面。<a href="https://github.com/gunnery/gunnery" target="_blank" rel="external">官网</a></li>
<li>Joblib：一组为 Python 提供轻量级作业流水线的工具。<a href="http://pythonhosted.org/joblib/index.html" target="_blank" rel="external">官网</a></li>
<li>Plan：如有神助地编写 crontab 文件。<a href="https://github.com/fengsp/plan" target="_blank" rel="external">官网</a></li>
<li>schedule：人性化的 Python 任务调度库。<a href="https://github.com/dbader/schedule" target="_blank" rel="external">官网</a></li>
<li>Spiff：使用纯 Python 实现的强大的工作流引擎。<a href="https://github.com/knipknap/SpiffWorkflow" target="_blank" rel="external">官网</a></li>
<li>TaskFlow：一个可以让你方便执行任务的 Python 库，一致并且可靠。<a href="http://docs.openstack.org/developer/taskflow/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="外来函数接口"><a href="#外来函数接口" class="headerlink" title="外来函数接口"></a>外来函数接口</h3><p>使用外来函数接口的库。</p>
<ul>
<li>cffi：用来调用 C 代码的外来函数接口。<a href="https://pypi.python.org/pypi/cffi" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/ctypes/" target="_blank" rel="external">ctypes</a>：(Python 标准库) 用来调用 C 代码的外来函数接口。<a href="https://docs.python.org/2/library/ctypes.html" target="_blank" rel="external">官网</a></li>
<li>PyCUDA：Nvidia CUDA API 的封装。<a href="https://mathema.tician.de/software/pycuda/" target="_blank" rel="external">官网</a></li>
<li>SWIG：简化的封装和接口生成器。<a href="http://www.swig.org/Doc1.3/Python.html" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>让 Python 更快的库。</p>
<ul>
<li>Cython：优化的 Python 静态编译器。使用类型混合使 Python 编译成 C 或 C++ 模块来获得性能的极大提升。<a href="http://cython.org/" target="_blank" rel="external">官网</a></li>
<li>PeachPy：嵌入 Python 的 x86-64 汇编器。可以被用作 Python 内联的汇编器或者是独立的汇编器，用于 Windows, Linux, OS X, Native Client 或者 Go 。<a href="https://github.com/Maratyszcza/PeachPy" target="_blank" rel="external">官网</a></li>
<li>PyPy：使用 Python 实现的 Python。解释器使用黑魔法加快 Python 运行速度且不需要加入额外的类型信息。<a href="http://pypy.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/pyston-llvm-jit/" target="_blank" rel="external">Pyston</a>：使用 LLVM 和现代 JIT 技术构建的 Python 实现，目标是为了获得很好的性能。<a href="https://github.com/dropbox/pyston" target="_blank" rel="external">官网</a></li>
<li>Stackless Python：一个强化版的 Python。<a href="https://bitbucket.org/stackless-dev/stackless/overview" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="微软的-Windows平台"><a href="#微软的-Windows平台" class="headerlink" title="微软的 Windows平台"></a>微软的 Windows平台</h3><p>在 Windows 平台上进行 Python 编程。</p>
<ul>
<li>Python(x,y)：面向科学应用的 Python 发行版，基于 Qt 和 Spyder。<a href="http://python-xy.github.io/" target="_blank" rel="external">官网</a></li>
<li>pythonlibs：非官方的 Windows 平台 Python 扩展二进制包。<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">官网</a></li>
<li>PythonNet：Python 与 .NET 公共语言运行库 (CLR)的集成。<a href="https://github.com/pythonnet/pythonnet" target="_blank" rel="external">官网</a></li>
<li>PyWin32：针对 Windows 的Python 扩展。<a href="https://sourceforge.net/projects/pywin32/" target="_blank" rel="external">官网</a></li>
<li>WinPython：Windows 7/8 系统下便携式开发环境。<a href="https://winpython.github.io/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="网络可视化和SDN"><a href="#网络可视化和SDN" class="headerlink" title="网络可视化和SDN"></a>网络可视化和SDN</h3><p>用来进行网络可视化和SDN(软件定义网络)的工具和库。</p>
<ul>
<li>Mininet：一款流行的网络模拟器以及用 Python 编写的 API。<a href="http://mininet.org/" target="_blank" rel="external">官网</a></li>
<li>POX：一个针对基于 Python 的软件定义网络应用（例如 OpenFlow SDN 控制器）的开源开发平台。<a href="https://github.com/noxrepo/pox" target="_blank" rel="external">官网</a></li>
<li>Pyretic：火热的 SDN 编程语言中的一员，为网络交换机和模拟器提供强大的抽象能力。<a href="http://frenetic-lang.org/pyretic/" target="_blank" rel="external">官网</a></li>
<li>SDX Platform：基于 SDN 的 IXP 实现，影响了 Mininet, POX 和 Pyretic。<a href="https://github.com/sdn-ixp/internet2award" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>用来对硬件进行编程的库。</p>
<ul>
<li>ino：操作<a href="https://www.arduino.cc/" target="_blank" rel="external">Arduino</a>的命令行工具。<a href="http://inotool.org/" target="_blank" rel="external">官网</a> </li>
<li>Pyro：Python 机器人编程库。<a href="http://pyrorobotics.com/" target="_blank" rel="external">官网</a></li>
<li>PyUserInput：跨平台的，控制鼠标和键盘的模块。<a href="https://github.com/SavinaRoja/PyUserInput" target="_blank" rel="external">官网</a></li>
<li>scapy：一个非常棒的操作数据包的库。<a href="https://github.com/secdev/scapy" target="_blank" rel="external">官网</a></li>
<li>wifi：一个 Python 库和命令行工具用来在 Linux 平台上操作WiFi。<a href="https://wifi.readthedocs.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li>Pingo：Pingo 为类似Raspberry Pi，pcDuino， Intel Galileo等设备提供统一的API用以编程。<a href="http://www.pingo.io/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>帮助从 Python 2 向 Python 3迁移的库。</p>
<ul>
<li>Python-Future：这就是 Python 2 和 Python 3 之间丢失的那个兼容性层。<a href="http://python-future.org/index.html" target="_blank" rel="external">官网</a></li>
<li>Python-Modernize：使 Python 代码更加现代化以便最终迁移到 Python 3。<a href="https://github.com/mitsuhiko/python-modernize" target="_blank" rel="external">官网</a></li>
<li>Six：Python 2 和 3 的兼容性工具。<a href="https://pypi.python.org/pypi/six" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>不属于上面任何一个类别，但是非常有用的库。</p>
<ul>
<li>blinker：一个快速的 Python 进程内信号/事件分发系统。<a href="https://github.com/jek/blinker" target="_blank" rel="external">官网</a></li>
<li>itsdangerous：一系列辅助工具用来将可信的数据传入不可信的环境。<a href="https://github.com/pallets/itsdangerous" target="_blank" rel="external">官网</a></li>
<li>pluginbase：一个简单但是非常灵活的 Python 插件系统。<a href="https://github.com/mitsuhiko/pluginbase" target="_blank" rel="external">官网</a></li>
<li>Pychievements：一个用来创建和追踪成就的 Python 框架。<a href="https://github.com/PacketPerception/pychievements" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/tryton/" target="_blank" rel="external">Tryton</a>：一个通用商务框架。<a href="http://www.tryton.org/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="算法和设计模式"><a href="#算法和设计模式" class="headerlink" title="算法和设计模式"></a>算法和设计模式</h3><p>Python 实现的算法和设计模式。</p>
<ul>
<li><a href="http://hao.jobbole.com/algorithms/" target="_blank" rel="external">algorithms</a>：一个 Python 算法模块。<a href="https://github.com/nryoung/algorithms" target="_blank" rel="external">官网</a> </li>
<li>python-patterns：Python 设计模式的集合。<a href="https://github.com/faif/python-patterns" target="_blank" rel="external">官网</a></li>
<li>sortedcontainers：快速，纯 Python 实现的SortedList，SortedDict 和 SortedSet 类型。<a href="http://www.grantjenks.com/docs/sortedcontainers/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="编辑器插件"><a href="#编辑器插件" class="headerlink" title="编辑器插件"></a>编辑器插件</h3><p>编辑器和 IDE 的插件</p>
<ul>
<li>Emacs<ul>
<li>Elpy：Emacs Python 开发环境。<a href="https://github.com/jorgenschaefer/elpy" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>Sublime Text<ul>
<li>SublimeJEDI：一个 Sublime Text 插件，用来使用超赞的自动补全库 Jedi。<a href="https://github.com/srusskih/SublimeJEDI" target="_blank" rel="external">官网</a></li>
<li>Anaconda：Anaconda 把你的 Sublime Text 3 变成一个功能齐全的 Python IDE。<a href="https://github.com/DamnWidget/anaconda" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>Vim<ul>
<li><a href="http://hao.jobbole.com/youcompleteme/" target="_blank" rel="external">YouCompleteMe</a>：引入基于 <a href="https://github.com/davidhalter/jedi" target="_blank" rel="external">Jedi</a> 的 Python 自动补全引擎。<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">官网</a></li>
<li>Jedi-vim：绑定 Vim 和 Jedi 自动补全库对 Python 进行自动补全。<a href="https://github.com/davidhalter/jedi-vim" target="_blank" rel="external">官网</a></li>
<li>Python-mode：将 Vim 变成 Python IDE 的一款多合一插件。<a href="https://github.com/klen/python-mode" target="_blank" rel="external">官网</a></li>
</ul>
</li>
<li>Visual Studio<ul>
<li>PTVS：Visual Studio 的 Python 工具<a href="https://github.com/Microsoft/PTVS" target="_blank" rel="external">官网</a></li>
</ul>
</li>
</ul>
<h3 id="集成开发环境"><a href="#集成开发环境" class="headerlink" title="集成开发环境"></a>集成开发环境</h3><p>流行的 Python 集成开发环境。</p>
<ul>
<li>PyCharm：商业化的 Python IDE ，由 JetBrains 开发。也有免费的社区版提供。<a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="external">官网</a></li>
<li>LiClipse：基于 Eclipse 的免费多语言 IDE 。使用 PyDev 来支持 Python 。<a href="http://www.liclipse.com/" target="_blank" rel="external">官网</a></li>
<li>Spyder：开源 Python IDE。<a href="https://github.com/spyder-ide/spyder" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="自动聊天工具"><a href="#自动聊天工具" class="headerlink" title="自动聊天工具"></a>自动聊天工具</h3><p>用于开发聊天机器人的库</p>
<ul>
<li>Errbot：最简单和最流行的聊天机器人用来实现自动聊天工具。<a href="http://errbot.io/en/latest/" target="_blank" rel="external">官网</a></li>
</ul>
<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>在线工具和简化开发的 API 。</p>
<h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p>参见: <a href="https://github.com/ciandcd/awesome-ciandcd#online-build-system" target="_blank" rel="external">awesome-CIandCD</a>.</p>
<ul>
<li>Travis CI：一个流行的工具，为你的开源和<a href="https://travis-ci.com/" target="_blank" rel="external">私人</a>项目提供持续集成服务。(仅支持 GitHub)<a href="https://travis-ci.org/" target="_blank" rel="external">官网</a></li>
<li>CircleCI：一个持续集成工具，可以非常快速的进行并行测试。 (仅支持 GitHub)<a href="https://circleci.com/" target="_blank" rel="external">官网</a></li>
<li>Vexor CI：一个为私人 app 提供持续集成的工具，支持按分钟付费。<a href="https://vexor.io/" target="_blank" rel="external">官网</a></li>
<li>Wercker：基于 Docker 平台，用来构建和部署微服务。<a href="http://wercker.com/" target="_blank" rel="external">官网</a></li>
</ul>
<h3 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h3><ul>
<li>Codacy：自动化代码审查，更加快速的发布高质量代码。对于开源项目是免费的。<a href="https://www.codacy.com/" target="_blank" rel="external">官网</a></li>
<li>QuantifiedCode：一个数据驱动、自动、持续的代码审查工具。<a href="https://www.quantifiedcode.com/" target="_blank" rel="external">官网</a></li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>在这里可以找到新的 Python 库。</p>
<h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><ul>
<li><a href="https://www.reddit.com/r/python" target="_blank" rel="external">r/Python</a></li>
<li><a href="https://www.coolgithubprojects.com/" target="_blank" rel="external">CoolGithubProjects</a></li>
<li><a href="https://www.djangopackages.com/" target="_blank" rel="external">Django Packages</a></li>
<li><a href="http://www.fullstackpython.com/" target="_blank" rel="external">Full Stack Python</a></li>
<li><a href="http://python3wos.appspot.com/" target="_blank" rel="external">Python 3 Wall of Superpowers</a></li>
<li><a href="http://pythonhackers.com/open-source/" target="_blank" rel="external">Python Hackers</a></li>
<li><a href="https://python.zeef.com/alan.richmond" target="_blank" rel="external">Python ZEEF</a></li>
<li><a href="https://github.com/trending?l=python" target="_blank" rel="external">Trending Python repositories on GitHub today</a></li>
<li><a href="http://pypi-ranking.info/alltime" target="_blank" rel="external">PyPI Ranking</a></li>
</ul>
<h3 id="周刊"><a href="#周刊" class="headerlink" title="周刊"></a>周刊</h3><ul>
<li><a href="http://importpython.com/newsletter/" target="_blank" rel="external">Import Python Newsletter</a></li>
<li><a href="http://pycoders.com/" target="_blank" rel="external">Pycoder’s Weekly</a></li>
<li><a href="http://www.pythonweekly.com/" target="_blank" rel="external">Python Weekly</a></li>
</ul>
<h3 id="Twitter"><a href="#Twitter" class="headerlink" title="Twitter"></a>Twitter</h3><ul>
<li><a href="https://twitter.com/codetengu" target="_blank" rel="external">@codetengu</a></li>
<li><a href="https://twitter.com/getpy" target="_blank" rel="external">@getpy</a></li>
<li><a href="https://twitter.com/planetpython" target="_blank" rel="external">@planetpython</a></li>
<li><a href="https://twitter.com/pycoders" target="_blank" rel="external">@pycoders</a></li>
<li><a href="https://twitter.com/pypi" target="_blank" rel="external">@pypi</a></li>
<li><a href="https://twitter.com/pythontrending" target="_blank" rel="external">@pythontrending</a></li>
<li><a href="https://twitter.com/PythonWeekly" target="_blank" rel="external">@PythonWeekly</a></li>
</ul>
<h3 id="学习指南"><a href="#学习指南" class="headerlink" title="学习指南"></a>学习指南</h3><ul>
<li><a href="http://hao.jobbole.com/scipy-lecture-notes/" target="_blank" rel="external">Scipy-lecture-notes</a>：如何用Python来做学术？<a href="https://github.com/scipy-lectures/scipy-lecture-notes" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/scientific-python-lectures/" target="_blank" rel="external">SScientific-python-lectures</a>：Python科学计算的资料。<a href="https://github.com/jrjohansson/scientific-python-lectures" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/mario-level-1/" target="_blank" rel="external">Mario-Level-1</a>：用Python和Pygame写的超级马里奥第一关。<a href="https://github.com/justinmeister/Mario-Level-1" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/python-koans/" target="_blank" rel="external">Python Koans</a>：Python的交互式学习工具。<a href="https://github.com/gregmalcolm/python_koans" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/minecraft-python/" target="_blank" rel="external">Minecraft</a>：用python写的Minecraft游戏。<a href="https://github.com/fogleman/Minecraft" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/python-pycrumbs/" target="_blank" rel="external">pycrumbs</a>：Python资源大全。<a href="https://github.com/kirang89/pycrumbs/blob/master/pycrumbs.md" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/python-patterns/" target="_blank" rel="external">python-patterns</a>：使用python实现设计模式。<a href="https://github.com/faif/python-patterns" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/python-projects/" target="_blank" rel="external">Projects</a>：Python项目大集合。<a href="https://github.com/karan/Projects" target="_blank" rel="external">官网</a></li>
<li><a href="http://hao.jobbole.com/the-hitchhikers-guide-to-python/" target="_blank" rel="external">The Hitchhiker’s Guide to Python</a>：旅行者的Python学习指南。<a href="http://docs.python-guide.org/en/latest/" target="_blank" rel="external">官网</a></li>
<li><a href="http://top.jobbole.com/18767/" target="_blank" rel="external">Code Like a Pythonista: Idiomatic Python</a>：如何像Python高手(Pythonista)一样编程。<a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html" target="_blank" rel="external">官网</a></li>
</ul>
<p></p><h3 id="websites">知名网站</h3><br><em>值得关注的 Python 技术站点。</em><p></p>
<h4>中文站点</h4>

<ul>
<li>伯乐在线 Python 频道：分享 Python 开发技术、相关的行业动态。<a href="http://python.jobbole.com/" target="_blank" rel="external">官网</a></li>
</ul>
<h4>英文站点</h4>

<ul>
<li>《<a href="http://python.jobbole.com/81730/" target="_blank" rel="external">值得关注的 10 个 Python 英文博客</a>》</li>
</ul>
<p></p><h3 id="weibo-weixin">微博、微信公众号</h3><p></p>
<ul>
<li>Python开发者 微博：<a href="http://weibo.com/u/5305630013" target="_blank" rel="external">@Python开发者</a></li>
<li>Python开发者：人生苦短，我用 Python。Python 越来越受广大程序员的喜爱。「Python开发者」是最受欢迎的、专注分享Python技术的微信公众号，主要分享 Python 相关的技术文章、工具资源和资讯等。<br><br><img src="http://ww3.sinaimg.cn/small/63918611gw1epb2cbm6cmj2046046wek.jpg" width="150" height="150"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&quot;http://hao.jobbole.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;伯乐在线&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GitHub 上有一个 Awesome - XXX 系列的资源整理。&lt;a href=&quot;https://github.com/vinta/awesome-python&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;awesome-python&lt;/a&gt; 是 vinta 发起维护的 Python 资源列表，内容包括：Web框架、网络爬虫、网络内容提取、模板引擎、数据库、数据可视化、图片处理、文本处理、自然语言处理、机器学习、日志、代码分析等。&lt;/p&gt;
&lt;p&gt;Awesome 系列虽然挺全，但基本只对收录的资源做了极为简要的介绍，如果有更详细的中文介绍，对相应开发者的帮助会更大。这也是&lt;a href=&quot;http://hao.jobbole.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;伯乐在线&lt;/a&gt;发起这个开源项目的初衷。&lt;/p&gt;
    
    </summary>
    
    
      <category term="COLLECTION" scheme="http://mingotang.github.io/tags/COLLECTION/"/>
    
  </entry>
  
  <entry>
    <title>DBMSSAS Assignment2</title>
    <link href="http://mingotang.github.io/2017/09/26/DBMSSAS-Assignment2/"/>
    <id>http://mingotang.github.io/2017/09/26/DBMSSAS-Assignment2/</id>
    <published>2017-09-26T14:18:09.000Z</published>
    <updated>2017-10-14T08:06:34.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Design a Student – Course Database<br>Draw E/R Diagram</p>
<hr>
<h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><p>实体：学生 Student</p>
<ul>
<li>学号 Sno（关键字，需要加下划线）</li>
<li>姓名 Sname</li>
<li>性别 Ssex</li>
<li>年龄 Sage</li>
<li>学院 Sdept</li>
</ul>
<blockquote>
<p>注意：每个实体（表）都需要一个关键字来进行索引</p>
</blockquote>
<p>实体：课程 Course</p>
<ul>
<li>课程编号 Cno（关键字，需要加下划线）</li>
<li>课程名称 Cname</li>
<li>先修课程 Cpno</li>
<li>学分 Ccredit</li>
</ul>
<p>关系：选课 SC</p>
<ul>
<li>分数 Grade</li>
</ul>
<p>实体对应关系：</p>
<ul>
<li>实体学生与实体课程形成关系选课</li>
</ul>
<p><img src="http://ox3grgjnx.bkt.clouddn.com/DBMSSAS%20Assignment3%20001.png" alt="图见 DBMSSAS Assignment 3 中的题目"></p>
<hr>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li>实体的属性当中没有键<ul>
<li>键用下划线标出</li>
</ul>
</li>
</ol>
<blockquote>
<p>谬误更正：之前写的关系没有属性就没有必要记录在SQL当中，这句话是错误的，假设SC没有属性Grade，那么SC(<u>Sno</u>, <u>Cno</u>)，虽然Sno和Cno全是外键，但是SC仍然是有必要记录的，因为没有SC我们就没有办法知道到底谁选择了什么课，SC这个时候就是表Student和表Course键组合的子集。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Design a Student – Course Databa
    
    </summary>
    
    
      <category term="TA" scheme="http://mingotang.github.io/tags/TA/"/>
    
  </entry>
  
  <entry>
    <title>DBMSSAS Assignment1</title>
    <link href="http://mingotang.github.io/2017/09/26/DBMSSAS-Assignment1/"/>
    <id>http://mingotang.github.io/2017/09/26/DBMSSAS-Assignment1/</id>
    <published>2017-09-26T05:57:09.000Z</published>
    <updated>2017-10-01T02:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>软件安装部分提示和注意事项</p>
<a id="more"></a>
<p>请前往 链接:<a href="https://yun.baidu.com/s/1jHEyYTS" target="_blank" rel="external">https://yun.baidu.com/s/1jHEyYTS</a> 密码:u9m4 下载 SQL和SAS软件</p>
<hr>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a><em>软件安装</em></h2><p><code>SQL</code></p>
<p>Windows系统请安装百度云当中的SQL2008版，安装之时注意：</p>
<ul>
<li>遇到无法重启问题请参考：<a href="http://jingyan.baidu.com/article/a24b33cd52a0b919fe002bae.html" target="_blank" rel="external">http://jingyan.baidu.com/article/a24b33cd52a0b919fe002bae.html</a></li>
<li>连接权限妥善设置，偷懒一点的可以设置为windows用户直接登录（添加当前用户按钮）</li>
<li>安装完成之后连接本地服务器 <code>(local)</code></li>
</ul>
<p>Mac系统可以使用DBeaver+MySQL的方式代替，请参考：<a href="http://www.jianshu.com/p/a4e7915023c2" target="_blank" rel="external">Mac OS MySql 连接和使用示例</a></p>
<p><code>SAS</code></p>
<p>Windows系统请安装百度云当中的SAS 9.21版</p>
<ul>
<li>windows 版SAS无法修改安装路径，因此没有D盘的用户请查看注意事项</li>
</ul>
<p>Mac系统可以使用 <a href="https://www.sas.com/en_us/software/university-edition/download-software.html#os-x" target="_blank" rel="external">SAS University Edition</a> 代替</p>
<blockquote>
<p>注意：如果windows电脑分区没有D盘的请安装<a href="https://www.sas.com/en_us/software/university-edition/download-software.html#windows" target="_blank" rel="external">SAS University Edition</a>，mac虚拟机最好不要分区，同时最好安装mac版的<a href="https://www.sas.com/en_us/software/university-edition/download-software.html#os-x" target="_blank" rel="external">SAS University Edition</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;软件安装部分提示和注意事项&lt;/p&gt;
    
    </summary>
    
    
      <category term="TA" scheme="http://mingotang.github.io/tags/TA/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础及SAS应用</title>
    <link href="http://mingotang.github.io/2017/09/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E5%8F%8ASAS%E5%BA%94%E7%94%A8/"/>
    <id>http://mingotang.github.io/2017/09/25/数据库基础及SAS应用/</id>
    <published>2017-09-25T03:09:18.000Z</published>
    <updated>2017-10-14T06:50:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据库基础及SAS应用课程信息</p>
<a id="more"></a>
<h2 id="课程相关"><a href="#课程相关" class="headerlink" title="课程相关"></a><em>课程相关</em></h2><p>教学班 001：</p>
<ul>
<li>行课安排：1-16 周</li>
<li>时间：周五 1-3 节</li>
<li>地点：上院 210</li>
</ul>
<p>教学班 002：</p>
<ul>
<li>行课安排：1-16 周</li>
<li>时间：周五 6-8 节</li>
<li>地点：上院 210</li>
</ul>
<p>授课教授<code>胡代平</code><br>联系方式：</p>
<ul>
<li>E-mail: <a href="mailto:dphu@sjtu.edu.cn" target="_blank" rel="external">dphu@sjtu.edu.cn</a></li>
<li>办公室：徐汇校区 安泰经济与管理学院 1711</li>
</ul>
<p>助教<code>唐铭</code><br>联系方式：</p>
<ul>
<li>E-mail: <a href="mailto:mtang024@126.com" target="_blank" rel="external">mtang024@126.com</a>  （除作业之外的邮件可以确保24小时内回复）</li>
<li>Skype: mingotang</li>
</ul>
<blockquote>
<p>课程资料链接：<a href="https://yun.baidu.com/s/1jHEyYTS" target="_blank" rel="external">百度云：https://yun.baidu.com/s/1jHEyYTS</a>  密码: u9m4</p>
<p>参考教材：<a href="http://ox3grgjnx.bkt.clouddn.com/A.First.Course.in.Database.Systems,.J.D..Ullman,.J..Widom,3rd.2008.pdf" target="_blank" rel="external">A First Course in Database Systems, J.D. Ullman, J. Widom, 3rd, 2008</a></p>
</blockquote>
<h2 id="作业相关"><a href="#作业相关" class="headerlink" title="作业相关"></a><em>作业相关</em></h2><p>作业提交：</p>
<ul>
<li>请在作业截止时间之前把作业发送到 <a href="mailto:mtang024@126.com" target="_blank" rel="external">mtang024@126.com</a>，迟交作业将会按照迟交时间多少扣除一部分作业分数，抄袭作业将会失去大部分作业分数</li>
<li>作业邮件<code>标题</code>和<code>附件</code>请使用 <code>DBMSSAS+C1/C2+学号+姓名+作业编号（编号之前不需要补0）</code> 格式来命名（加号其实是一个空格），例如：<code>DBMSSAS C1 51616161616 姓名 1</code>；非作业提交邮件邮件标题请勿使用这个规则</li>
<li>一般情况下，请把作业涉及到的文字、图片和代码写在<code>word</code>文件里面；如果把文字和代码写在文本文件里面，请在邮件正文<code>注明文本编码</code>（例如 utf-8 或者 gb18030），若除了文本文件之外还有其他文件（依然建议把sas等文件内容写在word里面），请把所有文件放在一个zip压缩包里面</li>
<li>很多时候 sjtu邮箱 是收不到非 sjtu邮箱 发送的文件的，所以使用sjtu邮箱的同学如果没收到我的回信请不要惊讶</li>
</ul>
<div class="note warning"><br>    <h5>请严格按照 <code>DBMSSAS+C1/C2+学号+姓名+作业编号</code> 命名邮件标题和附件</h5><br>    <p>我会在作业提交时间截止时间之后查阅作业并作出回复，所有按照上述规则命名的邮件将自动进入我邮箱的单独文件夹，所以作业提交不按照上述规则命名的话邮件会进入我的收件箱因此可能会被漏掉，同时在学期结束之前检查作业提交情况时我会依照关键字 DBMSSAS 和 姓名 来检索邮件</p><br></div>


<p>作业提交记录：<strong><a href="https://www.icloud.com/numbers/02hSemhFLGugCaOxiZ7KZI-fQ" target="_blank" rel="external">点此查看作业提交记录</a></strong></p>
<h2 id="作业参考答案"><a href="#作业参考答案" class="headerlink" title="作业参考答案"></a><em>作业参考答案</em></h2><p>有时候这个页面没有变化请删除cookies或者刷新，作业参考答案会在作业截止时间之后不久放出。</p>
<ul>
<li><a href="http://mingotang.website/2017/09/26/DBMSSAS-Assignment1/" target="_blank" rel="external">DBMSSAS Assignment1(2017年09月26日8点前提交)</a></li>
<li><a href="http://mingotang.website/2017/09/26/DBMSSAS-Assignment2/" target="_blank" rel="external">DBMSSAS Assignment2(2017年10月10日8点前提交)</a></li>
<li><a href="http://mingotang.website/2017/09/29/DBMSSAS-Assignment3/" target="_blank" rel="external">DBMSSAS Assignment3(2017年10月10日8点前提交)</a></li>
<li><a href="http://mingotang.website/2017/10/13/DBMSSAS-Assignment4/" target="_blank" rel="external">DBMSSAS Assignment4(2017年10月17日8点前提交)</a></li>
</ul>
<h2 id="关于本页面"><a href="#关于本页面" class="headerlink" title="关于本页面"></a><em>关于本页面</em></h2><p>本页面使用 GitHub Page 项目实现，网页承载力比较差（毕竟是免费的），所以载入时间较长请谅解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库基础及SAS应用课程信息&lt;/p&gt;
    
    </summary>
    
    
      <category term="TA" scheme="http://mingotang.github.io/tags/TA/"/>
    
  </entry>
  
  <entry>
    <title>python相关技巧</title>
    <link href="http://mingotang.github.io/2017/09/15/python%E7%9B%B8%E5%85%B3%E6%8A%80%E5%B7%A7/"/>
    <id>http://mingotang.github.io/2017/09/15/python相关技巧/</id>
    <published>2017-09-15T07:38:39.000Z</published>
    <updated>2017-09-29T06:08:07.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="pip-and-packages"><a href="#pip-and-packages" class="headerlink" title="pip and packages"></a>pip and packages</h2><p>获取python运行环境下的扩展包：<code>$ pip freeze &gt; requirements.txt</code></p>
<p>获取当前项目使用扩展包：<code>$ pipreqs /path/to/project</code></p>
<p>安装requirements：<code>$ pip install -r requirements.txt</code></p>
<h2 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter notebook"></a>jupyter notebook</h2><h3 id="更改-jupyter-notebook-主题"><a href="#更改-jupyter-notebook-主题" class="headerlink" title="更改 jupyter notebook 主题"></a>更改 jupyter notebook 主题</h3><p>使用的是jupyter-themes</p>
<p>首先在控制台下用pip 安装 <a href="https://github.com/dunovank/jupyter-themes" target="_blank" rel="external">jupyter-themes</a></p>
<pre><code>$ pip install --upgrade jupyterthemes
</code></pre><p>然后可以查看所有可用的主题：</p>
<pre><code>$ jt -l

Available Themes:
   chesterish
   grade3
   monokai
   oceans16
   onedork
   solarizedd
   solarizedl
</code></pre><p>可以用下面命令选择要用的主题。</p>
<pre><code>$ jt -t 主题名称
</code></pre><p>如果要恢复默认：</p>
<pre><code>$ jt -r
</code></pre><p><a href="https://github.com/dunovank/jupyter-themes" target="_blank" rel="external">查看各主题样式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;pip-and-packages&quot;&gt;&lt;a href=&quot;#pip-and-packages&quot; class=&quot;headerlink&quot; title=&quot;pip and packages&quot;&gt;&lt;/a&gt;pip and packages&lt;/h2
    
    </summary>
    
    
      <category term="Notes" scheme="http://mingotang.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>Pandas Cheat List</title>
    <link href="http://mingotang.github.io/2017/09/14/Pandas-Cheat-List/"/>
    <id>http://mingotang.github.io/2017/09/14/Pandas-Cheat-List/</id>
    <published>2017-09-14T03:08:41.000Z</published>
    <updated>2017-09-25T03:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="class-DataFrame"><a href="#class-DataFrame" class="headerlink" title="class - DataFrame"></a>class - DataFrame</h2><p>A pandas DataFrame is a data structure, which is a labeled two-dimensional object and is similar in spirit to an Excel worksheet or a relational database table.</p>
<p>A DataFrame can be created in the following ways:</p>
<ul>
<li>From another DataFrame.</li>
<li>From a NumPy array or a composite of arrays that has a two-dimensional shape.</li>
<li>Likewise, we can create a DataFrame out of another pandas data structure<br>called Series. We will learn about Series in the following section.</li>
<li>A DataFrame can also be produced from a file, such as a CSV file.</li>
</ul>
<p>Eg.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pandas.io.parsers <span class="keyword">import</span> read_csv</div><div class="line">df = read_csv(<span class="string">"WHO_first9cols.csv"</span>)</div></pre></td></tr></table></figure></p>
<h3 id="attributes"><a href="#attributes" class="headerlink" title="attributes:"></a>attributes:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">df.shape	<span class="comment"># attribute that holds its shape as a tuple</span></div><div class="line">df.columns	<span class="comment"># Check the column's header</span></div><div class="line">df.dtypes		<span class="comment"># Check the column's data types</span></div><div class="line">df.index	 <span class="comment"># the primary key of relational database tables</span></div><div class="line">df.values	 <span class="comment"># iterate with NumPy arrays</span></div></pre></td></tr></table></figure>
<h2 id="class-Series"><a href="#class-Series" class="headerlink" title="class - Series"></a>class - Series</h2><p>The pandas Series data structure is a one-dimensional heterogeneous array with labels.</p>
<p>We can create a pandas Series data structure as follows:</p>
<ul>
<li>From a Python dict</li>
<li>From a NumPy array</li>
<li>From a single scalar value</li>
</ul>
<p>Eg.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">country_col = df[<span class="string">"Country"</span>]</div></pre></td></tr></table></figure></p>
<h3 id="attributes-1"><a href="#attributes-1" class="headerlink" title="attributes"></a>attributes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">country_col.shape</div><div class="line">country_col.index</div><div class="line">country_col.values</div><div class="line">country_col.name</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;class-DataFrame&quot;&gt;&lt;a href=&quot;#class-DataFrame&quot; class=&quot;headerlink&quot; title=&quot;class - DataFrame&quot;&gt;&lt;/a&gt;class - DataFrame&lt;/h2
    
    </summary>
    
    
      <category term="Notes" scheme="http://mingotang.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>NumPy Arrays Cheat List</title>
    <link href="http://mingotang.github.io/2017/09/12/NumPy-Arrays-Cheat-List/"/>
    <id>http://mingotang.github.io/2017/09/12/NumPy-Arrays-Cheat-List/</id>
    <published>2017-09-12T08:38:56.000Z</published>
    <updated>2017-09-25T03:13:52.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="The-NumPy-array-object"><a href="#The-NumPy-array-object" class="headerlink" title="The NumPy array object"></a>The NumPy array object</h2><hr>
<h3 id="class-dtype"><a href="#class-dtype" class="headerlink" title="class - dtype"></a>class - dtype</h3><h4 id="attributes"><a href="#attributes" class="headerlink" title="attributes:"></a>attributes:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dtype.char</div><div class="line"></div><div class="line">dtype.type</div><div class="line"></div><div class="line">dtype.str</div></pre></td></tr></table></figure>
<h4 id="numerical-types"><a href="#numerical-types" class="headerlink" title="numerical types:"></a>numerical types:</h4><table>
<thead>
<tr>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>bool</td>
<td>Boolean (True or False) stored as a bit</td>
</tr>
<tr>
<td>inti</td>
<td>Platform integer (normally either int32 or int64)</td>
</tr>
<tr>
<td>int8</td>
<td>Byte (-128 to 127)</td>
</tr>
<tr>
<td>int16</td>
<td>Integer (-32768 to 32767)</td>
</tr>
<tr>
<td>int32</td>
<td>Integer (-2 ** 31 to 2 ** 31 -1)</td>
</tr>
<tr>
<td>int64</td>
<td>Integer (-2 ** 63 to 2 ** 63 -1)</td>
</tr>
<tr>
<td>uint8</td>
<td>Unsigned integer (0 to 255)</td>
</tr>
<tr>
<td>uint16</td>
<td>Unsigned integer (0 to 65535)</td>
</tr>
<tr>
<td>uint32</td>
<td>Unsigned integer (0 to 2 ** 32 - 1)</td>
</tr>
<tr>
<td>uint64</td>
<td>Unsigned integer (0 to 2 ** 64 - 1)</td>
</tr>
<tr>
<td>float16</td>
<td>Half precision float: sign bit, 5 bits exponent, and 10 bits mantissa</td>
</tr>
<tr>
<td>float32</td>
<td>Single precision float: sign bit, 8 bits exponent, and 23 bits mantissa</td>
</tr>
<tr>
<td>float64 or float</td>
<td>Double precision float: sign bit, 11 bits exponent, and 52 bits mantissa</td>
</tr>
<tr>
<td>complex64</td>
<td>Complex number, represented by two 32-bit floats (real and imaginary components)</td>
</tr>
<tr>
<td>complex128 or complex</td>
<td>Complex number, represented by two 64-bit floats (real and imaginary components)</td>
</tr>
</tbody>
</table>
<h3 id="class-array"><a href="#class-array" class="headerlink" title="class - array"></a>class - array</h3><h4 id="creation"><a href="#creation" class="headerlink" title="creation:"></a>creation:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">array([x, x, x])</div><div class="line"></div><div class="line">zeros(int)</div><div class="line"></div><div class="line">ones(int)</div></pre></td></tr></table></figure>
<h4 id="attributes-1"><a href="#attributes-1" class="headerlink" title="attributes:"></a>attributes:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">array.ndim  <span class="comment"># n * ndim, gives the number of dimensions</span></div><div class="line"></div><div class="line">array.size  <span class="comment"># n * ndim = size, holds the count of elements</span></div><div class="line"></div><div class="line">array.itemsize  <span class="comment"># returns the count of bytes for each element in the array</span></div><div class="line"></div><div class="line">array.nbytes  <span class="comment"># size * itemsize</span></div><div class="line"></div><div class="line">array.resize(int, int)</div><div class="line"></div><div class="line">array.T</div><div class="line"></div><div class="line">array.dtype.str</div><div class="line"></div><div class="line">array.flat  <span class="comment"># flatten</span></div><div class="line"></div><div class="line">array.real</div><div class="line"></div><div class="line">array.imag</div></pre></td></tr></table></figure>
<h4 id="slicing-and-indexing"><a href="#slicing-and-indexing" class="headerlink" title="slicing and indexing:"></a>slicing and indexing:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arange(length: int)</div><div class="line"></div><div class="line">array[start:stop:step]</div></pre></td></tr></table></figure>
<h4 id="array-shapes"><a href="#array-shapes" class="headerlink" title="array shapes:"></a>array shapes:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">array.reshape(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line">array.ravel()	 <span class="comment"># view</span></div><div class="line"></div><div class="line">array.flatten()  <span class="comment"># allocate memory</span></div><div class="line"></div><div class="line">array.shape = (<span class="number">6</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line">array.transpose()</div><div class="line"></div><div class="line">array.resize((<span class="number">2</span>, <span class="number">12</span>))</div></pre></td></tr></table></figure>
<h4 id="stacking-arrays"><a href="#stacking-arrays" class="headerlink" title="stacking arrays:"></a>stacking arrays:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">hstack((a, b))  <span class="comment"># a left, b right</span></div><div class="line"></div><div class="line">concatenate((a, b), axis=<span class="number">1</span>)</div><div class="line"></div><div class="line">vstack((a, b))  <span class="comment"># a over, b down</span></div><div class="line"></div><div class="line">concatenate((a, b), axis=<span class="number">0</span>)</div><div class="line"></div><div class="line">dstack((a, b))	<span class="comment"># stacking a list of arrays along the third axis (depth)</span></div></pre></td></tr></table></figure>
<h4 id="splitting-arrays"><a href="#splitting-arrays" class="headerlink" title="splitting arrays:"></a>splitting arrays:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hsplit(array, parts: int)</div><div class="line"></div><div class="line">vsplit(array, parts: int)</div><div class="line"></div><div class="line">dsplit(array, sqrt(parts: int))</div></pre></td></tr></table></figure>
<h4 id="views-and-copies"><a href="#views-and-copies" class="headerlink" title="views and copies:"></a>views and copies:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">array.copy()</div><div class="line"></div><div class="line">array.view()</div></pre></td></tr></table></figure>
<h4 id="Basic-descriptive-statistics-with-NumPy"><a href="#Basic-descriptive-statistics-with-NumPy" class="headerlink" title="Basic descriptive statistics with NumPy:"></a>Basic descriptive statistics with NumPy:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">array.max(), np.max(data)</div><div class="line"></div><div class="line">array.min()</div><div class="line"></div><div class="line">array.mean()</div><div class="line"></div><div class="line">array.std()</div><div class="line"></div><div class="line">array.median()</div></pre></td></tr></table></figure>
<h4 id="ignoring-values"><a href="#ignoring-values" class="headerlink" title="ignoring values"></a>ignoring values</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">np.ma.log(array)</div><div class="line"></div><div class="line">np.ma.masked_outside(array, bottem, top)</div></pre></td></tr></table></figure>
<h3 id="class-matrice"><a href="#class-matrice" class="headerlink" title="class - matrice"></a>class - matrice</h3><h4 id="creation-1"><a href="#creation-1" class="headerlink" title="creation:"></a>creation:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mat(<span class="string">'x x; x x; x x'</span>)</div><div class="line"></div><div class="line">eye(int)  <span class="comment"># I with scale int</span></div></pre></td></tr></table></figure>
<h4 id="linear-algebra"><a href="#linear-algebra" class="headerlink" title="linear algebra:"></a>linear algebra:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">np.linalg.inv(matrice)  <span class="comment"># inverse of matrice</span></div><div class="line"></div><div class="line">np.linalg.solve(A, b)  <span class="comment"># solve A * x = b</span></div><div class="line"></div><div class="line">np.linalg.dot(A, x)  <span class="comment"># calcuate A * x</span></div><div class="line"></div><div class="line">np.linalg.eigvals(A)  <span class="comment"># eigenvalues of A</span></div><div class="line"></div><div class="line">np.linalg.eig(A)  <span class="comment"># eigenvalues and eigenvectors of A</span></div></pre></td></tr></table></figure>
<h3 id="class-random"><a href="#class-random" class="headerlink" title="class - random"></a>class - random</h3><h4 id="random-functions"><a href="#random-functions" class="headerlink" title="random functions:"></a>random functions:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">normal(size=<span class="number">1000</span>)</div><div class="line"></div><div class="line">binomial(<span class="number">9</span>, <span class="number">0.5</span>, size=<span class="number">1000</span>)</div></pre></td></tr></table></figure>
<h4 id="Test"><a href="#Test" class="headerlink" title="Test:"></a>Test:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">from</span> scipy.stats <span class="keyword">import</span> shapiro</div><div class="line"></div><div class="line"><span class="comment"># The Shapiro-Wilk test can check for normality.</span></div><div class="line"><span class="comment"># The corresponding SciPy function returns a tuple of which the  rst number is a test statistic and the second number is a p-value.</span></div><div class="line"></div><div class="line">	<span class="keyword">from</span> scipy.stats <span class="keyword">import</span> anderson</div><div class="line"></div><div class="line"><span class="comment"># The Anderson-Darling test can check for normality and also for other distributions such as Exponential, Logistic, and Gumbel.</span></div><div class="line"><span class="comment"># The related SciPy function related a test statistic and an array containing critical values for the 15, 10, 5, 2.5, and 1 percentage signi cance levels.</span></div><div class="line"></div><div class="line">	<span class="keyword">from</span> scipy.stats <span class="keyword">import</span> normaltest</div><div class="line"></div><div class="line"><span class="comment"># The D'Agostino and Pearson's test is also implemented in SciPy as the normaltest() function.</span></div><div class="line"><span class="comment"># This function returns a tuple with a statistic and p-value just like the shapiro() function. The p-value is a two-sided Chi-squared probability.</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;The-NumPy-array-object&quot;&gt;&lt;a href=&quot;#The-NumPy-array-object&quot; class=&quot;headerlink&quot; title=&quot;The NumPy array object&quot;&gt;&lt;/a&gt;Th
    
    </summary>
    
    
      <category term="Notes" scheme="http://mingotang.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>Aprior算法</title>
    <link href="http://mingotang.github.io/2017/09/11/Aprior%E7%AE%97%E6%B3%95/"/>
    <id>http://mingotang.github.io/2017/09/11/Aprior算法/</id>
    <published>2017-09-11T11:28:12.000Z</published>
    <updated>2017-09-29T05:57:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>关联规则挖掘在电商、零售、大气物理、生物医学已经有了广泛的应用。</p>
<p>啤酒与尿布的故事已经成为了关联规则挖掘的经典案例，还有人专门出了一本书《啤酒与尿布》，虽然说这个故事是哈弗商学院杜撰出来的，但确实能很好的解释关联规则挖掘的原理。</p>
<a id="more"></a>
<h2 id="一、关联规则、自信度、自持度的定义"><a href="#一、关联规则、自信度、自持度的定义" class="headerlink" title="一、关联规则、自信度、自持度的定义"></a>一、关联规则、自信度、自持度的定义</h2><p>关联规则就是有关联的规则，形式是这样定义的：两个不相交的非空集合X、Y，如果有X–&gt;Y，就说X–&gt;Y是一条关联规则。关联规则的强度用支持度(support)和自信度(confidence)来描述，</p>
<p>支持度的定义：support(X–&gt;Y) = |X交Y|/N = 集合X与集合Y中的项在一条记录中同时出现的次数/数据记录的个数。</p>
<p>自信度的定义：confidence(X–&gt;Y) = |X交Y|/|X| = 集合X与集合Y中的项在一条记录中同时出现的次数/集合X出现的个数 。</p>
<p>这里定义的支持度和自信度都是相对的支持度和自信度，不是绝对支持度，绝对支持度abs_support = 数据记录数N * support。</p>
<p>支持度和自信度越高，说明规则越强，关联规则挖掘就是挖掘出满足一定强度的规则。</p>
<h2 id="二、关联规则挖掘的定义与步骤"><a href="#二、关联规则挖掘的定义与步骤" class="headerlink" title="二、关联规则挖掘的定义与步骤"></a>二、关联规则挖掘的定义与步骤</h2><p>关联规则挖掘的定义：给定一个交易数据集T，找出其中所有支持度support &gt;= min_support、自信度confidence &gt;= min_confidence的关联规则。</p>
<p>有一个简单而粗鲁的方法可以找出所需要的规则，那就是穷举项集的所有组合，并测试每个组合是否满足条件，一个元素个数为n的项集的组合个数为2^n-1(除去空集)，所需要的时间复杂度明显为O(2^N)，对于普通的超市，其商品的项集数也在1万以上，用指数时间复杂度的算法不能在可接受的时间内解决问题。怎样快速挖出满足条件的关联规则是关联挖掘的需要解决的主要问题。</p>
<p>仔细想一下，我们会发现对于{啤酒–&gt;尿布}，{尿布–&gt;啤酒}这两个规则的支持度实际上只需要计算{尿布，啤酒}的支持度，即它们交集的支持度。于是我们把关联规则挖掘分两步进行：</p>
<ul>
<li><p>1）生成频繁项集: 这一阶段找出所有满足最小支持度的项集，找出的这些项集称为频繁项集。</p>
</li>
<li><p>2）生成规则: 在上一步产生的频繁项集的基础上生成满足最小自信度的规则，产生的规则称为强规则。</p>
</li>
</ul>
<p>关联规则挖掘所花费的时间主要是在生成频繁项集上，因为找出的频繁项集往往不会很多，利用频繁项集生成规则也就不会花太多的时间，而生成频繁项集需要测试很多的备选项集，如果不加优化，所需的时间是O(2^N)。</p>
<h2 id="三、Apriori定律"><a href="#三、Apriori定律" class="headerlink" title="三、Apriori定律"></a>三、Apriori定律</h2><p>为了减少频繁项集的生成时间，应该尽早的消除一些完全不可能是频繁项集的集合。</p>
<ul>
<li><p>1)：如果一个集合是频繁项集，则它的所有子集都是频繁项集。举例：假设一个集合{A,B}是频繁项集，即A、B同时出现在一条记录的次数大于等于最小支持度min_support，则它的子集{A},{B}出现次数必定大于等于min_support，即它的子集都是频繁项集。</p>
</li>
<li><p>2)：如果一个集合不是频繁项集，则它的所有超集都不是频繁项集。举例：假设集合{A}不是频繁项集，即A出现的次数小于min_support，则它的任何超集如{A,B}出现的次数必定小于min_support，因此其超集必定也不是频繁项集。</p>
</li>
</ul>
<p>利用这两条定律，我们抛掉很多的候选项集，Apriori算法就是利用这两个定理来实现快速挖掘频繁项集的。</p>
<h2 id="四、Apriori算法"><a href="#四、Apriori算法" class="headerlink" title="四、Apriori算法"></a>四、Apriori算法</h2><p>Apriori是由a priori合并而来的，它的意思是后面的是在前面的基础上推出来的，即先验推导，怎么个先验法，其实就是二级频繁项集是在一级频繁项集的基础上产生的，三级频繁项集是在二级频繁项集的基础上产生的，以此类推。</p>
<p>Apriori算法属于候选消除算法，是一个生成候选集、消除不满足条件的候选集、并不断循环直到不再产生候选集的过程。</p>
<p>关键代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">// <span class="doctag">TODO:</span> Auto-generated method stub</span></div><div class="line">record = getRecord(); <span class="comment">// 获取原始数据记录</span></div><div class="line">List&lt;List&lt;String&gt;&gt; cItemset = findFirstCandidate();  <span class="comment">// 获取第一次的备选集</span></div><div class="line">List&lt;List&lt;String&gt;&gt; lItemset = getSupportedItemset(cItemset);  <span class="comment">// 获取备选集cItemset满足支持的集合</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> (endTag != <span class="literal">true</span>) &#123;  <span class="comment">// 只要能继续挖掘</span></div><div class="line">  List&lt;List&lt;String&gt;&gt; ckItemset = getNextCandidate(lItemset);  <span class="comment">// 获取第下一次的备选集</span></div><div class="line">  List&lt;List&lt;String&gt;&gt; lkItemset = getSupportedItemset(ckItemset);  <span class="comment">// 获取备选集cItemset满足支持的集合</span></div><div class="line">  getConfidencedItemset(lkItemset, lItemset, dkCountMap, dCountMap);  <span class="comment">// 获取备选集cItemset满足置信度的集合</span></div><div class="line">  <span class="keyword">if</span> (confItemset.size() != <span class="number">0</span>)  <span class="comment">// 满足置信度的集合不为空</span></div><div class="line">    printConfItemset(confItemset);  <span class="comment">// 打印满足置信度的集合</span></div><div class="line">    confItemset.clear();  <span class="comment">// 清空置信度的集合</span></div><div class="line">    cItemset = ckItemset;  <span class="comment">// 保存数据，为下次循环迭代准备</span></div><div class="line">    lItemset = lkItemset;</div><div class="line">    dCountMap.clear();</div><div class="line">    dCountMap.putAll(dkCountMap);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关联规则挖掘在电商、零售、大气物理、生物医学已经有了广泛的应用。&lt;/p&gt;
&lt;p&gt;啤酒与尿布的故事已经成为了关联规则挖掘的经典案例，还有人专门出了一本书《啤酒与尿布》，虽然说这个故事是哈弗商学院杜撰出来的，但确实能很好的解释关联规则挖掘的原理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Notes" scheme="http://mingotang.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>python操作符重载</title>
    <link href="http://mingotang.github.io/2017/09/11/python%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>http://mingotang.github.io/2017/09/11/python操作符重载/</id>
    <published>2017-09-11T00:50:21.000Z</published>
    <updated>2017-09-25T03:13:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="http://blog.csdn.net/Rozol/article/details/70769628" target="_blank" rel="external">http://blog.csdn.net/Rozol/article/details/70769628</a></p>
<a id="more"></a>
<h2 id="构造与析构"><a href="#构造与析构" class="headerlink" title="构造与析构"></a>构造与析构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span>:</span></div><div class="line"></div><div class="line">    <span class="comment"># 构造方法, 对象实例化时调用</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"构造方法"</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 析构方法, 对象被回收时调用</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"析构方法"</span>)</div><div class="line"></div><div class="line">    <span class="comment"># __init__之前调用, 一般用于重写父类的__new__方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></div><div class="line">        print(<span class="string">"new"</span>)</div><div class="line">        <span class="keyword">return</span> object.__new__(cls)</div></pre></td></tr></table></figure>
<h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span></div><div class="line">        self.data = num</div><div class="line">    <span class="comment"># +</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data + other.data</div><div class="line">    <span class="comment"># -</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data - other.data</div><div class="line">    <span class="comment"># *</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data * other.data</div><div class="line">    <span class="comment"># /</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__truediv__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data / other.data</div><div class="line">    <span class="comment"># //</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__floordiv__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data // other.data</div><div class="line">    <span class="comment"># %</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mod__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data % other.data</div><div class="line">    <span class="comment"># divmod()</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__divmod__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="comment"># 商(10/5),余数(10%5)</span></div><div class="line">        <span class="keyword">return</span> self.data / other.data, self.data % other.data</div><div class="line">    <span class="comment"># **</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__pow__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data ** other.data</div><div class="line">    <span class="comment"># &lt;&lt;</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lshift__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data &lt;&lt; other.data</div><div class="line">    <span class="comment"># &gt;&gt;</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rshift__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data &gt;&gt; other.data</div><div class="line">    <span class="comment"># &amp;</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__and__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data &amp; other.data</div><div class="line">    <span class="comment"># ^</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__xor__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data ^ other.data</div><div class="line">    <span class="comment"># |</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__or__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data | other.data</div></pre></td></tr></table></figure>
<h2 id="反算术运算符-a-b-若a不支持算术运算符-则寻找b的算术运算符"><a href="#反算术运算符-a-b-若a不支持算术运算符-则寻找b的算术运算符" class="headerlink" title="反算术运算符(a+b, 若a不支持算术运算符,则寻找b的算术运算符)"></a>反算术运算符(a+b, 若a不支持算术运算符,则寻找b的算术运算符)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span></div><div class="line">        self.data = num</div><div class="line">    <span class="comment"># +</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__radd__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> other.data + self.data</div><div class="line">    <span class="comment"># -</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rsub__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> other.data - self.data</div><div class="line">    <span class="comment"># *</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rmul__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> other.data * self.data</div><div class="line">    <span class="comment"># /</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rtruediv__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> other.data / self.data</div><div class="line">    <span class="comment"># //</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rfloordiv__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> other.data // self.data</div><div class="line">    <span class="comment"># %</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rmod__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> other.data % self.data</div><div class="line">    <span class="comment"># divmod()</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rdivmod__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> other.data / self.data, other.data % self.data</div><div class="line">    <span class="comment"># **</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rpow__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> other.data ** self.data</div><div class="line">    <span class="comment"># &lt;&lt;</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rlshift__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> other.data &lt;&lt; self.data</div><div class="line">    <span class="comment"># &gt;&gt;</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rrshift__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> other.data &gt;&gt; self.data</div><div class="line">    <span class="comment"># &amp;</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rand__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> other.data &amp; self.data</div><div class="line">    <span class="comment"># ^</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rxor__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> other.data ^ self.data</div><div class="line">    <span class="comment"># |</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ror__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> other.data | self.data</div></pre></td></tr></table></figure>
<h2 id="增量赋值运算-注-位置同原始函数-在原始函数名前-i"><a href="#增量赋值运算-注-位置同原始函数-在原始函数名前-i" class="headerlink" title="增量赋值运算 (注:位置同原始函数,在原始函数名前+i)"></a>增量赋值运算 (注:位置同原始函数,在原始函数名前+i)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span></div><div class="line">        self.data = num</div><div class="line">    <span class="comment"># +=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iadd__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data + other</div><div class="line">    <span class="comment"># -=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__isub__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data - other</div><div class="line">    <span class="comment"># *=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__imul__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data * other</div><div class="line">    <span class="comment"># /=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__itruediv__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data / other</div><div class="line">    <span class="comment"># //=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ifloordiv__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data // other</div><div class="line">    <span class="comment"># %=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__imod__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data % other</div><div class="line">    <span class="comment"># **=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ipow__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data ** other</div><div class="line">    <span class="comment"># &lt;&lt;=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ilshift__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data &lt;&lt; other</div><div class="line">    <span class="comment"># &gt;&gt;=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__irshift__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data &gt;&gt; other</div><div class="line">    <span class="comment"># &amp;=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iand__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data &amp; other</div><div class="line">    <span class="comment"># ^=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ixor__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data ^ other</div><div class="line">    <span class="comment"># |=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ior__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data | other</div></pre></td></tr></table></figure>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span></div><div class="line">        self.data = num</div><div class="line">    <span class="comment"># &lt;</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data &lt; other.data</div><div class="line">    <span class="comment"># &lt;=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__le__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data &lt;= other.data</div><div class="line">    <span class="comment"># ==</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data == other.data</div><div class="line">    <span class="comment"># !=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ne__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data != other.data</div><div class="line">    <span class="comment"># &gt;</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data &gt; other.data</div><div class="line">    <span class="comment"># &gt;=</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ge__</span><span class="params">(self, other)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data &gt;= other.data</div></pre></td></tr></table></figure>
<h2 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num)</span>:</span></div><div class="line">        self.data = num</div><div class="line">    <span class="comment"># + 正号</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__pos__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> +abs(self.data)</div><div class="line">    <span class="comment"># - 负号</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__neg__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> -abs(self.data)</div><div class="line">    <span class="comment"># abs() 绝对值</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__abs__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> abs(self.data)</div><div class="line">    <span class="comment"># ~ 按位取反</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__invert__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> ~self.data</div><div class="line">    <span class="comment"># complex() 字符转数字</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__complex__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="number">2j</span></div><div class="line">    <span class="comment"># int() 转为整数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__int__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="number">123</span></div><div class="line">    <span class="comment"># float() 转为浮点数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__float__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="number">1.23</span></div><div class="line">    <span class="comment"># round()  近似值</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__round__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="number">1.123</span></div></pre></td></tr></table></figure>
<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span>:</span></div><div class="line">    <span class="comment"># print() 打印</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"This is the demo."</span></div><div class="line">    <span class="comment"># repr() 对象字符串表示</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"This is a demo."</span></div><div class="line">    <span class="comment"># bytes() 对象字节字符串表现形式</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bytes__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">b"This is one demo."</span></div><div class="line">    <span class="comment"># format() 格式化</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__format__</span><span class="params">(self, format_spec)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__str__()</div></pre></td></tr></table></figure>
<h2 id="属性访问"><a href="#属性访问" class="headerlink" title="属性访问"></a>属性访问</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span>:</span></div><div class="line">    <span class="comment"># 获取(不存在)属性</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"访问的属性不存在"</span>)</div><div class="line">    <span class="comment"># getattr() hasattr() 获取属性</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, attr)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"访问的属性是%s"</span>%attr)</div><div class="line">        <span class="keyword">return</span> attr</div><div class="line">    <span class="comment"># setattr() 设置属性</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, attr, value)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"设置 %s 属性值为 %s"</span>%(attr, value))</div><div class="line">    <span class="comment"># delattr() 删除属性</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, attr)</span>:</span></div><div class="line">        <span class="keyword">print</span> (<span class="string">"删除 %s 属性"</span>%attr)</div></pre></td></tr></table></figure>
<h2 id="描述器-类-test1-的实例出现在属主类-runtest-中-这些方法才会调用-注-函数调用-这些方法不会被调用"><a href="#描述器-类-test1-的实例出现在属主类-runtest-中-这些方法才会调用-注-函数调用-这些方法不会被调用" class="headerlink" title="描述器(类(test1)的实例出现在属主类(runtest)中,这些方法才会调用)(注:函数调用,这些方法不会被调用)"></a>描述器(类(test1)的实例出现在属主类(runtest)中,这些方法才会调用)(注:函数调用,这些方法不会被调用)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test1</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value = <span class="number">1</span>)</span>:</span></div><div class="line">        self.value = value * <span class="number">2</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        print(<span class="string">"set %s %s %s"</span>%(self, instance, value))</div><div class="line">        self.value = value * <span class="number">2</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        print(<span class="string">"get %s %s %s"</span>%(self, instance, owner))</div><div class="line">        <span class="keyword">return</span> self.value</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></div><div class="line">        print(<span class="string">"delete %s %s"</span>%(self, instance))</div><div class="line">        <span class="keyword">del</span> self.value</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test2</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value = <span class="number">1</span>)</span>:</span></div><div class="line">        self.value = value + <span class="number">0.3</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        print(<span class="string">"set %s %s %s"</span>%(self, instance, value))</div><div class="line">        instance.t1 = value + <span class="number">0.3</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        print(<span class="string">"get %s %s %s"</span>%(self, instance, owner))</div><div class="line">        <span class="keyword">return</span> instance.t1</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></div><div class="line">        print(<span class="string">"delete %s %s"</span>%(self, instance))</div><div class="line">        <span class="keyword">del</span> self.value</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">runtest</span>:</span></div><div class="line">    t1 = test1()</div><div class="line">    t2 = test2()</div><div class="line"></div><div class="line"><span class="comment"># ---</span></div><div class="line"></div><div class="line"><span class="comment"># 自定义property</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">property_my</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fget=None, fset=None, fdel=None)</span>:</span></div><div class="line">        self.fget = fget</div><div class="line">        self.fset = fset</div><div class="line">        self.fdel = fdel</div><div class="line">    <span class="comment"># 对象被获取(self自身, instance调用该对象的对象(demo9), owner调用该对象的对象类对象(demo9))</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        print(<span class="string">"get %s %s %s"</span>%(self, instance, owner))</div><div class="line">        <span class="keyword">return</span> self.fget(instance)</div><div class="line">    <span class="comment"># 对象被设置属性时</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        print(<span class="string">"set %s %s %s"</span>%(self, instance, value))</div><div class="line">        self.fset(instance, value)</div><div class="line">    <span class="comment"># 对象被删除时</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></div><div class="line">        print(<span class="string">"delete %s %s"</span>%(self, instance))</div><div class="line">        self.fdel(instance)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo10</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.num = <span class="keyword">None</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setvalue</span><span class="params">(self, value)</span>:</span></div><div class="line">        self.num = value</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getvalue</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.num</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">del</span> self.num</div><div class="line">    x = property_my(getvalue, setvalue, delete)</div></pre></td></tr></table></figure>
<h2 id="自定义容器"><a href="#自定义容器" class="headerlink" title="自定义容器"></a>自定义容器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">lis</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args)</span>:</span></div><div class="line">        self.lists = args</div><div class="line">        self.size = len(args)</div><div class="line">        self.startindex = <span class="number">0</span></div><div class="line">        self.endindex = self.size</div><div class="line">    <span class="comment"># len() 容器元素数量</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.size;</div><div class="line">    <span class="comment"># lis[1] 获取元素</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key = <span class="number">0</span>)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.lists[key]</div><div class="line">    <span class="comment"># lis[1] = value 设置元素</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="comment"># del lis[1] 删除元素</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="comment"># 返回迭代器</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line">    <span class="comment"># rversed() 反向迭代器</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reversed__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">while</span> self.endindex &gt; <span class="number">0</span>:</div><div class="line">            self.endindex -= <span class="number">1</span></div><div class="line">            <span class="keyword">yield</span> self[self.endindex]</div><div class="line">    <span class="comment"># next() 迭代器下个元素</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.startindex &gt;= self.size:</div><div class="line">            <span class="keyword">raise</span> StopIteration <span class="comment"># 控制迭代器结束</span></div><div class="line"></div><div class="line">        elem = self.lists[self.startindex]</div><div class="line">        self.startindex += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> elem</div><div class="line"></div><div class="line">    <span class="comment"># in / not in</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.lists:</div><div class="line">            <span class="keyword">if</span> i == item:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<h2 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># yield 生成器(执行一次返回,下次继续执行后续代码返回)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">yielddemo</span><span class="params">()</span>:</span></div><div class="line">    num = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>: <span class="comment"># 1 == True; 0 == False</span></div><div class="line">        <span class="keyword">if</span> num &gt;= <span class="number">10</span>:</div><div class="line">            <span class="keyword">raise</span> StopIteration</div><div class="line">        num += <span class="number">1</span></div><div class="line">        <span class="keyword">yield</span> num</div><div class="line"></div><div class="line"><span class="comment"># 能接收数据的生成器</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">yielddemo_1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        num = <span class="keyword">yield</span></div><div class="line">        print(num)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># with 自动上下文管理</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">withdemo</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></div><div class="line">        self.value = value</div><div class="line">    <span class="comment"># 返回值为 as 之后的值</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.value</div><div class="line">    <span class="comment"># 执行完成,退出时的数据清理动作</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, traceback)</span>:</span></div><div class="line">        <span class="keyword">del</span> self.value</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># yield 生成器(可迭代对象Iterable)</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> yielddemo():</div><div class="line">    print(i)</div><div class="line"><span class="comment"># ---</span></div><div class="line">iters = iter(yielddemo())</div><div class="line">print(next(iters))</div><div class="line">print(next(iters))</div><div class="line"></div><div class="line"><span class="comment"># --- 发送数据给生成器 ---</span></div><div class="line">iters = yielddemo_1()</div><div class="line">next(iters)</div><div class="line">iters.send(<span class="number">6</span>) <span class="comment"># 发送数据并执行</span></div><div class="line">iters.send(<span class="number">10</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># with 自动上下文管理</span></div><div class="line"><span class="keyword">with</span> withdemo(<span class="string">"Less is more!"</span>) <span class="keyword">as</span> s:</div><div class="line">    print(s)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;http://blog.csdn.net/Rozol/article/details/70769628&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/Rozol/article/details/70769628&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Notes" scheme="http://mingotang.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>不要让鱼去学爬树</title>
    <link href="http://mingotang.github.io/2017/09/09/%E4%B8%8D%E8%A6%81%E8%AE%A9%E9%B1%BC%E5%8E%BB%E5%AD%A6%E7%88%AC%E6%A0%91/"/>
    <id>http://mingotang.github.io/2017/09/09/不要让鱼去学爬树/</id>
    <published>2017-09-09T03:29:06.000Z</published>
    <updated>2017-09-09T03:32:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>视频：<a href="http://www.iqiyi.com/w_19rui7j75p.html" target="_blank" rel="external">为什么要让一条鱼学会爬树</a></p>
<a id="more"></a>
<p>Albert Einstein once said: “Everyone’s a genius，But if you judge a fish on its ability to climb a tree, it will live its whole life believing that it is stupid.”</p>
<p>Ladies and gentlemen of the jury, today on trial we have modern day schooling</p>
<p>Glad you could come. Not only does he make fish climb trees, he also makes them climb down and make them do a 10 mile run</p>
<p>Tell me, school, are you proud of the things you’ve done?Turning millions of people into robots</p>
<p>Do you find that fun?</p>
<p>Do you realize how many children relate to that fish swimming upstream in class believing they are useless?</p>
<p>Well the time has come; no more excuses. I call school the to the stand and accuse him of killing creativity, individuality and being inequality abusive he’s ancient institution has outlived his usage</p>
<p>So, your honor, this concludes my open statement and if I may present the opening of my case I will prove it</p>
<p>Proceed</p>
<p>Exhibit A: here’s a modern day phone; recognize it?<br>Now here’s a phone from 150 years ago<br>Big difference, right?<br>Stay with me, all right<br>Here’s a car today and here’s a car from 150 years ago<br>Big difference right?<br>Well get this: here’s a classroom of today and here’s a classroom we used 150 years ago<br>Now isn’t that a shame<br>In literary over a century, nothing has changed<br>Yet you claim to prepare students for the future<br>But with evidence like that I must ask: do you prepare students for the future, or the past?</p>
<p>I did a background check on you and the records show that you were made to trade people to work in factories, which explains why you put students in straight rows nice and neat. Raise your hand if you want to speak, give them a short break to eat, and for eight hours a day tell them what to think</p>
<p>Oh, and make the compete to get an A a letter that determines a product quality hint grade A of meat</p>
<p>I get it, back then times were different<br>We all have a past; I myself am no Ghandi<br>But today, we don’t need to make robot zombies<br>The world had progressed, and now we need people<br>Who think creatively, innovatively, critically, interdependently, with the ability to connect</p>
<p>You see, every scientist will tell you no two brains are the same<br>And every parents with two or more children will confirm that claim<br>So please explain why you treat students like cookie cutter frames<br>Or snap back caps, giving this one size fits all crap?</p>
<p>Watch your language!</p>
<p>Sorry, your honor</p>
<p>But if a doctor prescribed the exact same medicine to all of his patients</p>
<p>The results would be tragic; so many people would get sick<br>Yet when it comes to school this is exactly what happens. This educational malpractice where one teacher stands in front of 20 children each one having different strengths different needs different gifts different dreams and you teach the same thing the same way.that’s horrific lady gentlemen the defendant the gentlemen should not be acquitted</p>
<p>This may be one of the worst criminal offenses ever to be committed. And let’s mention the way you treat your employees<br>Objection!</p>
<p>Overruled I want to hear this!</p>
<p>It’s a shame I mean teachers have the most important job on the planet yet they are underpaid no wonder why so many students are shortchanged. Let’s be honest teachers should earn just as much as doctors because a doctor can do heart surgery and save the life of a child. But a great teacher can reach the heart of that child and allow him to truly live</p>
<p>You see teachers are heroes that often get blamed. But they aren’t the problem they work in a system with not many options or rights curriculum’s are created by policy makers where most of them haven’t taught a day in their life . Just obsessed with standardized tests they think bubbling in a multiple choice question will determine success</p>
<p>That’s how outlandish in fact these test are to cruel to be used and should be abandoned. But don’t take my word for it. take Fredrick J Keely and man who invented standardized testing who said and I quote “These tests are too crude to be used and should be abandoned” Ladies and gentlemen of the jury if we continue down this road the results will be literal</p>
<p>I don’t have much faith in in school but I do have faith in people. and if we can customize health care, cars and Facebook pages then it is our duty to do the same for education to upgrade change and do way with school spirit. Because that’s uses unless we are working to bring the spirit out of each and every student that should be our task. No more common core instead let’s reach the core of every heart in every class</p>
<p>Sure math is important but no more than art or dance let’s give every gift an equal chance I know this sounds like a dream but countries like Finland are doing impressive things they have shorter days, teachers make a decent wage homework is non existent they focus on collaboration instead of competition. But here’s the kicker boys and girls there educational outperforms every other country in the world. Other places like Singapore are succeeding rapidly schools like Montessori programs like Khan Academy there is no single solution</p>
<p>But let’s get moving because while students maybe 20% of our population</p>
<p>They are 100% of our future so let’s attend to their dreams and there’s no telling what we can achieve this is a world in which I believe a world where fish are no longer forced to climb trees ，I rest my case。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;视频：&lt;a href=&quot;http://www.iqiyi.com/w_19rui7j75p.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为什么要让一条鱼学会爬树&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="http://mingotang.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>数据科学和机器学习领域常用的 Python 库</title>
    <link href="http://mingotang.github.io/2017/09/08/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%92%8C%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%A2%86%E5%9F%9F%E5%B8%B8%E7%94%A8%E7%9A%84Python%E5%BA%93/"/>
    <id>http://mingotang.github.io/2017/09/08/数据科学和机器学习领域常用的Python库/</id>
    <published>2017-09-08T08:02:32.000Z</published>
    <updated>2017-09-25T03:26:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章将会针对数据科学介绍几种常用的 Python 包。在与数据挖掘、机器学习以及数据分析相关的项目中，这些 Python 包通常会得到广泛应用。</p>
<a id="more"></a>
<ol>
<li>SciPy</li>
</ol>
<p>SciPy (发音为“Sigh Pie”) 是一个基于 Python 的开源软件生态系统，主要用于数学、科学和工程学等领域，给数据科学家提供了大量的算法和数学工具。</p>
<ol>
<li>NumPy</li>
</ol>
<p>Numpy是用 Pyhton 进行科学计算时的基础包，为 Python 提供了出色的数学功能。</p>
<ol>
<li>Scikit-learn</li>
</ol>
<p>Scikit-learn 是 Python 中最著名的机器学习包，包含了大量不同的分类方法、交叉检验及其他模型选择方法、降维技术、回归和聚类分析的模块以及非常实用的数据预处理的模块。</p>
<ol>
<li>Pandas</li>
</ol>
<p>Pandas 是一个用于处理具有类表格结构数据的库，通常与强大的数据框对象一起使用。DataFrame 是高效处理数据的多维数组对象，类似 Numpy 的 narray ，同时也有些附加的功能。</p>
<ol>
<li>IPython</li>
</ol>
<p>IPython 是一个命令行shell，相对于自带的 Python 解释器，具有很多有用的增强功能。</p>
<p>IPython Notebooks  对于科学计算来说是个不错的环境：不仅仅可以执行代码，同时也能通过 Markdown 、 HTML 、 LaTeX 、内置图片、内置数据图表（例如 matplotlib 等）增加信息化文件，还能为并行计算提供高性能的工具。</p>
<ol>
<li>Requests</li>
</ol>
<p>Requests 是 Python 中为人们搭建的优雅而简单的 HTTP 库。作为一名数据科学家，你或许需要从网上采集数据，而Requests 则为你提供了强大的工具。</p>
<ol>
<li>Scrapy</li>
</ol>
<p>Scrapy 是从互联网上采集数据的开源和协同框架，使用了快速、简单并且可扩展的方式。</p>
<ol>
<li>Statsmodels</li>
</ol>
<p>用户可以通过 Statsmodels 这个 Python 模块去挖掘数据、搭建预测统计模型和进行统计检验。它是个可扩展的列表，用来描述数据、统计检验、绘图以及为不同类型的数据和每一种预测提供统计结果。</p>
<ol>
<li>Theano</li>
</ol>
<p>如果从事深度学习项目，通常会需要 theano 。你可以用它这个 Python 库去定义、优化、高效评估包括多维数组在内的数学表达式。</p>
<ol>
<li>gensim</li>
</ol>
<p>genism 是最稳健、高效和省事的软件之一，通过纯文本实现无监督的语义建模，可以很容易地训练主题模型。如果想要在文本数据中应用主题模型，那你应该去试试 genism。</p>
<ol>
<li>SymPy</li>
</ol>
<p>SymPy 是进行符号数学计算的 Python 库，拥有大量的特征，包括微积分、代数、几何学、离散数学，甚至还有量子物理学。同时在 LaTeX 的支持下具备基础绘图和输出功能。</p>
<ol>
<li>PyMC</li>
</ol>
<p>PyMC 的核心是贝叶斯统计和模型拟合的大量算法（包括Markov Chain Monte Carlo, MCMC）。</p>
<ol>
<li>matplotlib</li>
</ol>
<p>matplotlib 是 python 的平面绘图库，能以硬拷贝格式和跨平台交互环境的多种形式输出高质量的图形，对于任何数据科学家或数据分析师来说都是必备的。</p>
<ol>
<li>BeautifulSoup</li>
</ol>
<p>如果想要提取些数据出来，那么 BeautifulSoup 正是你所需要的，可以用它在网页中提取内容。</p>
<ol>
<li>nltk</li>
</ol>
<p>Natural Language Toolkit (NLTK) 是使用人类语言数据搭建 Python 项目的领先平台。如果你在从事 NLP 相关的项目，那么 NLTK 是个必备工具。</p>
<ol>
<li>sqlite3</li>
</ol>
<p>这个工具能帮助你轻而易举地存储数据。它为 Python 连接 SQLite 数据库提供了接口。搭建开源的 SQL 数据库引擎对于小团队来说是个理想的选择，因为它是独立的本地存储数据库文件（最多140Tb），不像SQL那样，它不需要任何服务器基本结构。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章将会针对数据科学介绍几种常用的 Python 包。在与数据挖掘、机器学习以及数据分析相关的项目中，这些 Python 包通常会得到广泛应用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="COLLECTION" scheme="http://mingotang.github.io/tags/COLLECTION/"/>
    
  </entry>
  
  <entry>
    <title>Git Cheat Sheet</title>
    <link href="http://mingotang.github.io/2017/09/07/Git-Cheat-Sheet/"/>
    <id>http://mingotang.github.io/2017/09/07/Git-Cheat-Sheet/</id>
    <published>2017-09-07T15:00:21.000Z</published>
    <updated>2017-09-28T08:08:40.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="Git-本地更改操作"><a href="#Git-本地更改操作" class="headerlink" title="Git 本地更改操作"></a>Git 本地更改操作</h2><h3 id="GIT-HELP"><a href="#GIT-HELP" class="headerlink" title="GIT HELP"></a>GIT HELP</h3><pre><code>$ git help
usage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value]
       [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]
       [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
       [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]
       &lt;command&gt; [&lt;args&gt;]


$ git help config
    git-config ** Get and set repository or global options
</code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>初始化一个 Git 仓库：<code>git init</code></li>
</ul>
<h3 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h3><ul>
<li>添加文件到暂存区：<code>git add &lt;file&gt;</code><ul>
<li>添加所有修改到暂存区：<code>git add .</code></li>
</ul>
</li>
<li>将暂存区的修改提交到版本库：<code>git commit</code> -&gt; 编辑 commit message -&gt; 保存<ul>
<li>commit message 较简单时，可以：<code>git commit -m &quot;&lt;message&gt;&quot;</code></li>
</ul>
</li>
<li>为文件添加执行权限，并将修改添加到暂存区：<code>git update-index --chmod=+x &lt;file&gt;</code></li>
</ul>
<p>Commit changes  ** A snapshot of those on the stage</p>
<pre><code>$ git status    ** To check what&apos;s changed since last commit

$ git add README.txt

$ git add --all

$ git add &lt;list of files&gt;

$ git add docs/

$ git commit -m &quot;Create a README.&quot;  ** Commit message, what work was done?

$ git log   ** get timeline history
</code></pre><h3 id="回退修改"><a href="#回退修改" class="headerlink" title="回退修改"></a>回退修改</h3><ul>
<li>回退工作区的修改：<code>git checkout -- &lt;file&gt;</code></li>
<li>回退工作区的修改，但保存现场：<code>git stash</code><ul>
<li>恢复现场：<code>git stash pop</code></li>
<li>查看保存的现场：<code>git stash list</code></li>
</ul>
</li>
<li>回退暂存区的修改到工作区：<code>git reset HEAD &lt;file&gt;</code></li>
<li>回退版本库的修改到工作区：<code>git reset &lt;commit&gt;</code> 或 <code>git reset –-mixed &lt;commit&gt;</code></li>
<li>回退版本库的修改到暂存区：<code>git reset –-soft &lt;commit&gt;</code></li>
<li>回退版本库的修改（<strong>不保留</strong>）：<code>git reset --hard &lt;commit&gt;</code><ul>
<li>如果错误执行了该回退操作，可以通过 <code>git reflog</code> 查看命令历史，命令历史中记载了回退前的 commit id，可以执行 <code>git reset --hard &lt;commit&gt;</code> 回退该回退操作</li>
</ul>
</li>
<li>回退所有未被跟踪的文件：<code>git clean -df</code></li>
</ul>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><ul>
<li>从暂存区 + 工作区中删除：<code>git rm &lt;file&gt;</code></li>
<li>从暂存区中删除：<code>git rm --cached &lt;file&gt;</code></li>
</ul>
<h3 id="跟踪文件"><a href="#跟踪文件" class="headerlink" title="跟踪文件"></a>跟踪文件</h3><ul>
<li>强制跟踪指定文件：<code>git update-index --no-assume-unchanged &lt;file&gt;</code></li>
<li>强制不跟踪指定文件：<code>git update-index --assume-unchanged &lt;file&gt;</code></li>
</ul>
<h2 id="Git-比较操作"><a href="#Git-比较操作" class="headerlink" title="Git 比较操作"></a>Git 比较操作</h2><ul>
<li>比较工作区和暂存区的指定文件：<code>git diff &lt;path&gt;</code><ul>
<li>比较所有文件：<code>git diff</code></li>
</ul>
</li>
<li>比较工作区和指定 commit 的指定文件：<code>git diff &lt;commit&gt; &lt;path&gt;</code><ul>
<li>比较所有文件：<code>git diff &lt;commit&gt;</code></li>
</ul>
</li>
<li>比较暂存区和指定 commit 的指定文件：<code>git diff --cached &lt;commit&gt; &lt;path&gt;</code><ul>
<li>比较暂存区和 <code>HEAD</code> 的指定文件：<code>git diff --cached &lt;path&gt;</code></li>
<li>比较所有文件：<code>git diff --cached &lt;commit&gt;</code></li>
</ul>
</li>
<li>比较 commit <code>A</code> 和 commit <code>B</code> 的指定文件：<code>git diff &lt;A&gt; &lt;B&gt; &lt;path&gt;</code><ul>
<li>比较 <code>HEAD</code> 和 commit <code>B</code> 的指定文件：<code>git diff ..&lt;B&gt; &lt;path&gt;</code></li>
<li>比较 commit <code>A</code> 和 <code>HEAD</code> 的指定文件：<code>git diff &lt;A&gt;.. &lt;path&gt;</code></li>
</ul>
</li>
<li>比较 commit <code>A</code> 与 commit <code>B</code> 的 merge base 和 commit <code>B</code> 的指定文件：<code>git diff &lt;A&gt;...&lt;B&gt; &lt;path&gt;</code><ul>
<li>比较 <code>HEAD</code> 与 commit <code>B</code> 的 merge base 和 commit <code>B</code> 的指定文件：<code>git diff ...&lt;B&gt; &lt;path&gt;</code></li>
<li>比较 commit <code>A</code> 与 <code>HEAD</code> 的 merge base 和 <code>HEAD</code> 的指定文件：<code>git diff &lt;A&gt;... &lt;path&gt;</code></li>
</ul>
</li>
<li><p>使用 difftool 比较文件，命令参数与 <code>git diff</code> 一致，但使用 <code>git difftool</code> 子命令</p>
<ul>
<li><p>配置 difftool：</p>
<p>  编辑 <code>~/.gitconfig</code>：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[diff]</div><div class="line">	tool = meld</div><div class="line">[difftool &quot;meld&quot;]</div><div class="line">	path = C:\\path\\to\\meld\\Meld.exe</div></pre></td></tr></table></figure>
<p>$ git diff  ** No difference since all changes are staged</p>
<p>$ git diff –staged     ** View staged difference</p>
<p>$ git reset HEAD <file>    ** unstage</file></p>
<p>$ git checkout – <file>    ** Blow away all changes since last commit</file></p>
<p>$ git commit -a -m “message”    ** Add changes from all tracked files</p>
<p>$ git reset –soft HEAD^    ** Reset into staging, move to commit before ‘HEAD’</p>
<p>$ git commit –amend -m “new message”   ** amend last commit</p>
<p>$ git reset –hard HEAD^    ** Reset to last commit, undo all changes</p>
<p>$ git reset –hard HEAD^^    ** Reset to last 2 commit, undo all changes</p>
</li>
</ul>
</li>
</ul>
<h2 id="Git-历史操作"><a href="#Git-历史操作" class="headerlink" title="Git 历史操作"></a>Git 历史操作</h2><ul>
<li>查看分支合并图：<code>git log --graph</code></li>
<li><p>配置 <code>git lg</code> 作为查看格式良好的历史记录的命令：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[alias]</div><div class="line">	lg = log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Git-分支操作"><a href="#Git-分支操作" class="headerlink" title="Git 分支操作"></a>Git 分支操作</h2><ul>
<li>查看当前分支：<code>git branch</code></li>
<li>基于当前分支创建新分支：<code>git branch &lt;name&gt;</code><ul>
<li>基于当前分支创建并切换到新分支：<code>git checkout -b &lt;name&gt;</code></li>
<li>基于指定分支创建并切换到新分支：<code>git checkout -b &lt;name&gt; &lt;origin-branch&gt;</code></li>
</ul>
</li>
<li>切换到指定分支：<code>git checkout &lt;name&gt;</code></li>
<li><p>合并指定分支到当前分支：<code>git merge &lt;name&gt;</code></p>
<ul>
<li><p>合并时在指定分支基础上重新提交当前分支从 merge base 开始的 commit：<code>git rebase -i &lt;name&gt;</code></p>
<ul>
<li>rebase 时历史会从旧到新显示，编辑历史时有如下 command 可用：<ul>
<li><code>pick</code>：直接入库</li>
<li><code>edit</code>：在入库前允许重新编辑 commit</li>
<li><code>reword</code>：在入库前允许重新编辑 commit message</li>
<li><code>squash</code>：与前次提交进行 commit 合并</li>
<li><code>fixup</code>：同 <code>squash</code>，但丢弃 commit message</li>
</ul>
</li>
<li><p>示例</p>
<ul>
<li><p>原始 log 如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">debug: commit1</div><div class="line">debug: commit2</div><div class="line">debug: commit3</div><div class="line">fix: commit4</div></pre></td></tr></table></figure>
</li>
<li><p>使用以下 command：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pick debug: commit1</div><div class="line">fixup debug: commit2</div><div class="line">fixup debug: commit3</div><div class="line">squash fix: commit4</div></pre></td></tr></table></figure>
</li>
<li><p>结果：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fix: commit4</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>继续检查下个 commit：<code>git rebase --continue</code></p>
</li>
<li>取消本次 rebase：<code>git rebase --abort</code></li>
</ul>
</li>
<li><p>使用指定工具进行 merge 操作：<code>git mergetool</code></p>
<ul>
<li><p>配置 merge 工具：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[merge]</div><div class="line">	tool = meld</div><div class="line">[mergetool &quot;meld&quot;]</div><div class="line">	path = C:\\path\\to\\meld\\Meld.exe</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>删除指定分支：<code>git branch -d &lt;name&gt;</code></p>
<ul>
<li>删除未合并分支：<code>git branch -D &lt;name&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="Git-远程仓库操作"><a href="#Git-远程仓库操作" class="headerlink" title="Git 远程仓库操作"></a>Git 远程仓库操作</h2><ul>
<li>克隆远程仓库到当前目录：<code>git clone &lt;repo-url&gt;</code><ul>
<li>克隆远程仓库到指定目录：<code>git clone &lt;repo-url&gt; &lt;dir&gt;</code><ul>
<li><code>&lt;dir&gt;</code> 目录下会出现 <code>.git</code> 目录</li>
</ul>
</li>
</ul>
</li>
<li>关联远程仓库：<code>git remote add &lt;repo-name&gt; &lt;repo-url&gt;</code><ul>
<li><code>&lt;repo-name&gt;</code> 惯例命名为 <code>origin</code></li>
<li><code>&lt;repo-url&gt;</code> 一般格式为 <code>git@server-name:path/repo-name.git</code></li>
</ul>
</li>
<li>查看远程仓库信息：<code>git remote -v</code></li>
<li>拖取指定远程仓库：<code>git fetch &lt;repo-name&gt;</code></li>
<li>拖取指定远程仓库的指定分支然后合并到当前分支：<code>git pull &lt;repo-name&gt; &lt;branch-name&gt;</code></li>
<li>推送指定分支到指定远程仓库：<code>git push &lt;repo-name&gt; &lt;branch-name&gt;</code><ul>
<li>推送当前分支到指定远程仓库：<code>git push &lt;repo-name&gt;</code></li>
<li>推送当前分支到上游仓库：<code>git push</code><ul>
<li>要配置指定远程仓库为上游仓库，可以：<ul>
<li>在第一次推送时使用 <code>-u</code> 指定：<code>git push -u &lt;repo-name&gt; &lt;branch-name&gt;</code></li>
<li>直接配置：<code>git branch --set-upstream &lt;branch-name&gt; &lt;repo-name&gt;/&lt;branch-name&gt;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>删除指定远程仓库的指定分支：<code>git push &lt;repo-name&gt; :&lt;branch-name&gt;</code><ul>
<li>如果由于远程仓库的 <code>HEAD</code> 指向待删除的分支而无法进行删除操作，可以先把 <code>HEAD</code> 指向其他分支，在远程仓库上进行以下操作：<code>git symbolic-ref HEAD refs/heads/&lt;other-branch-name&gt;</code>，在删除分支后再切换回来</li>
</ul>
</li>
</ul>
<pre><code>$ git remote add name_for_remote https://github.com/Gregg/git-real.git

$ git remote -v     ** show remote repo

$ git push -u name_for_remote local_branch_to_push

$ git pull

$ git remote add &lt;name&gt; &lt;address&gt;

$ git remote rm &lt;name&gt;

$ git push -u &lt;name&gt; &lt;branch&gt;
</code></pre><h2 id="Git-标签操作"><a href="#Git-标签操作" class="headerlink" title="Git 标签操作"></a>Git 标签操作</h2><ul>
<li>基于 <code>HEAD</code> 新建标签：<code>git tag &lt;name&gt;</code><ul>
<li>基于指定 commit 新建标签：<code>git tag &lt;name&gt; &lt;commit&gt;</code></li>
<li>指定标签信息：<code>git tag -m &lt;message&gt; &lt;name&gt;</code></li>
<li>使用PGP签名标签：<code>git tag -s &lt;name&gt;</code></li>
</ul>
</li>
<li>查看标签：<code>git tag</code></li>
<li>推送指定标签到指定远程仓库：<code>git push &lt;repo-name&gt; &lt;tag-name&gt;</code><ul>
<li>推送全部标签到指定远程仓库：<code>git push &lt;repo-name&gt; --tags</code></li>
</ul>
</li>
<li>在指定远程仓库删除指定标签：<code>git push &lt;repo-name&gt; :refs/tags/&lt;tag-name&gt;</code></li>
</ul>
<pre><code>$ git tag   ** list all tags

$ git checkout v0.0.1   ** check out code at commit

$ git tag -a v0.0.3 -m &quot;version 0.0.3&quot;    ** add a new tag

$ git push --tags
</code></pre><h2 id="Git-子模块操作"><a href="#Git-子模块操作" class="headerlink" title="Git 子模块操作"></a>Git 子模块操作</h2><ul>
<li>添加 submodule：<code>git submodule add -b &lt;branch&gt; --name &lt;name&gt; &lt;repo&gt; &lt;path&gt;</code></li>
<li>查看 submodule 状态：<code>git submodule status</code></li>
<li><p>clone 含 submodule 的项目</p>
<ul>
<li>方法一：<code>git clone &lt;repo&gt; --recursive</code></li>
<li><p>方法二：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> &lt;repo&gt;</div><div class="line">git submodule update --init --recursive</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>删除 submodule：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git deinit &lt;path&gt;</div><div class="line">git rm --cached &lt;path&gt;</div><div class="line">rm -rf &lt;path&gt;</div><div class="line">[edit .gitmodules to remove submodule item]</div></pre></td></tr></table></figure>
</li>
<li><p>在 submodule 中执行命令：<code>git submodule foreach &lt;command&gt;</code></p>
</li>
<li>更新 submodule：<code>git submodule update --recursive --remote</code></li>
</ul>
<h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><ul>
<li><p>配置 committer：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &lt;user-name&gt;</div><div class="line">git config --global user.email &lt;user-email&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>让命令行输出显示颜色：<code>git config --global color.ui true</code></p>
</li>
<li>让 non-bare repo 能被 push：<code>git config receive.denyCurrentBranch updateInstead</code></li>
<li>让 Git 不要自动转换 CRLF：<code>git config --global core.autocrlf false</code></li>
<li>让 Git 忽视文件的 mode 变化：<code>git config --global core.fileMode false</code></li>
<li><p>为复杂操作配置别名：</p>
<ul>
<li><p>示例：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[alias]</div><div class="line">	sy = &quot;!f() &#123; git status; git add .; git commit; git push origin-test $&#123;1&#125;; &#125;; f&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>配置 Git 的自动补全和命令行 prompt：</p>
<p>  在 <code>~/.bashrc</code> 中加入如下配置：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> <span class="variable">$&#123;GIT_SOURCE_DIR&#125;</span>/contrib/completion/git-completion.bash</div><div class="line"><span class="built_in">source</span> <span class="variable">$&#123;GIT_SOURCE_DIR&#125;</span>/contrib/completion/git-prompt.sh</div><div class="line"></div><div class="line"><span class="keyword">function</span> color_my_prompt &#123;</div><div class="line">    <span class="built_in">local</span> __user_and_host=<span class="string">"\[\033[01;32m\]\u@\h"</span></div><div class="line">    <span class="built_in">local</span> __cur_location=<span class="string">"\[\033[01;34m\]\w"</span></div><div class="line">    <span class="built_in">local</span> __git_branch_color=<span class="string">"\[\033[31m\]"</span></div><div class="line">    <span class="built_in">local</span> __git_branch=<span class="string">'`git branch 2&gt; /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /`'</span></div><div class="line">    <span class="built_in">local</span> __prompt_tail=<span class="string">"\[\033[35m\]$"</span></div><div class="line">    <span class="built_in">local</span> __last_color=<span class="string">"\[\033[00m\]"</span></div><div class="line">    <span class="built_in">export</span> PS1=<span class="string">"<span class="variable">$__user_and_host</span> <span class="variable">$__cur_location</span> <span class="variable">$__git_branch_color</span><span class="variable">$__git_branch</span><span class="variable">$__prompt_tail</span><span class="variable">$__last_color</span> "</span></div><div class="line">&#125;</div><div class="line">color_my_prompt</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="REBASE"><a href="#REBASE" class="headerlink" title="REBASE"></a>REBASE</h3><ul>
<li>Move all changes to master which are not in origin/master to a temporary area.</li>
<li>Run all origin/master commits.</li>
<li>Run all commits in the temporary area, one at a time.</li>
</ul>
<pre><code>$ git rebase --continue

$ git rebase --skip

$ git rebase --abort
$ git fetch     ** Syncs, but doesn&apos;t merge

$ git rebase &lt;branch&gt;
</code></pre><h3 id="HISTORY"><a href="#HISTORY" class="headerlink" title="HISTORY"></a>HISTORY</h3><p>LOG</p>
<pre><code>$ git config --global color.ui true       ** set log colorful to read

$ git log --pretty=oneline

$ git log --pretty=format:&quot;%h %ad- %s [%an]&quot;

$ git log --oneline -p     ** To see lines added and deleted

$ git log --oneline -stat       ** To see how many lines changed

$ git log --oneline -graph

$ git log --until=1.minute.ago

$ git log --since=1.day.ago

$ git log --since=1.hour.ago

$ git log --since=1.month.ago --until=2.weeks.ago

$ git log --since=2000-01-01 --until=2012-12-21

$ git diff

$ git diff HEAD/HEAD^/HEAD^^/HEAD~5

$ git diff HEAD^..HEAD

$ git diff &lt;branch&gt; &lt;branch&gt;

$ git blame index.html --date short
</code></pre><h3 id="Excluding"><a href="#Excluding" class="headerlink" title="Excluding"></a>Excluding</h3><p>.gitignore</p>
<pre><code>$ git rm README.txt           ** delete the file

$ git rm --cached development.log     ** stop tracking but do not delete
</code></pre><h3 id="CONFIG"><a href="#CONFIG" class="headerlink" title="CONFIG"></a>CONFIG</h3><pre><code>$ git config --global user.name &quot;Gregg Pollack&quot;

$ git config --global user.email &quot;gregg@codeschool.com&quot;

$ git config --global core.editor emacs     ** use emacs for interactive commands

$ git config --global merge.tool opendiff    ** use opendiff for merging conflicts

$ git config user.email &quot;spamme@example.com&quot;     ** sets email for current repo

$ git config --list
</code></pre><h2 id="豆知识"><a href="#豆知识" class="headerlink" title="豆知识"></a>豆知识</h2><h3 id="commit-别名"><a href="#commit-别名" class="headerlink" title="commit 别名"></a>commit 别名</h3><p>在 Git 中，<code>HEAD</code> 表示当前版本，也就是最新的提交，上一个版本就是 <code>HEAD^</code>，上上一个版本就是 <code>HEAD^^</code>，上100个版本写成 <code>HEAD~100</code>。</p>
<h3 id="dry-run"><a href="#dry-run" class="headerlink" title="dry run"></a>dry run</h3><p>很多命令都有 <code>-n</code> 或 <code>--dry-run</code> 选项，使用了该选项后，命令不会直接运行，而是输出它将执行的内容，供用户判断执行的内容是否和预期一致，从而决定是否实际执行该命令。这避免了一些手误的情况，在某些重要的操作上很有用。</p>
<h3 id=""><a href="#" class="headerlink" title="--"></a><code>--</code></h3><p>Git 的命令中常含有 <code>--</code>，它用来分割 Git 命令的选项和文件/文件列表，以防某些文件名被误认为是选项。</p>
<h3 id="在-Windows-下启动-Git-server"><a href="#在-Windows-下启动-Git-server" class="headerlink" title="在 Windows 下启动 Git server"></a>在 Windows 下启动 Git server</h3><p>将指定目录下所有的仓库都通过 Git server 暴露给其他人：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git daemon --base-path=/path/to/workplace --<span class="built_in">export</span>-all</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Git-本地更改操作&quot;&gt;&lt;a href=&quot;#Git-本地更改操作&quot; class=&quot;headerlink&quot; title=&quot;Git 本地更改操作&quot;&gt;&lt;/a&gt;Git 本地更改操作&lt;/h2&gt;&lt;h3 id=&quot;GIT-HELP&quot;&gt;&lt;a hr
    
    </summary>
    
    
      <category term="Notes" scheme="http://mingotang.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>33款开源爬虫软件工具</title>
    <link href="http://mingotang.github.io/2017/09/07/33%E6%AC%BE%E5%BC%80%E6%BA%90%E7%88%AC%E8%99%AB%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    <id>http://mingotang.github.io/2017/09/07/33款开源爬虫软件工具/</id>
    <published>2017-09-07T13:53:19.000Z</published>
    <updated>2017-09-25T03:13:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文对较为知名及常见的开源爬虫软件进行梳理，按开发语言进行汇总。虽然搜索引擎也有爬虫，但这里只是爬虫软件，而非大型、复杂的搜索引擎。</p>
<a id="more"></a>
<h2 id="Java爬虫"><a href="#Java爬虫" class="headerlink" title="Java爬虫"></a>Java爬虫</h2><hr>
<h3 id="1、Arachnid"><a href="#1、Arachnid" class="headerlink" title="1、Arachnid"></a>1、Arachnid</h3><p>Arachnid是一个基于Java的web spider框架.它包含一个简单的HTML剖析器能够分析包含HTML内容的输入流.通过实现Arachnid的子类就能够开发一个简单的Web spiders并能够在Web站上的每个页面被解析之后增加几行代码调用。 Arachnid的下载包中包含两个spider应用程序例子用于演示如何使用该框架。</p>
<ul>
<li><p>特点：微型爬虫框架，含有一个小型HTML解析器</p>
</li>
<li><p>许可证：GPL</p>
</li>
</ul>
<h3 id="2、crawlzilla"><a href="#2、crawlzilla" class="headerlink" title="2、crawlzilla"></a>2、crawlzilla</h3><p>crawlzilla 是一个帮你轻松建立搜索引擎的自由软件，有了它，你就不用依靠商业公司的搜索引擎，也不用再烦恼公司內部网站资料索引的问题。</p>
<p>由 nutch 专案为核心，并整合更多相关套件，并卡发设计安装与管理UI，让使用者更方便上手。</p>
<p>crawlzilla 除了爬取基本的 html 外，还能分析网页上的文件，如（ doc、pdf、ppt、ooo、rss ）等多种文件格式，让你的搜索引擎不只是网页搜索引擎，而是网站的完整资料索引库。</p>
<p>拥有中文分词能力，让你的搜索更精准。</p>
<p>crawlzilla的特色与目标，最主要就是提供使用者一个方便好用易安裝的搜索平台。</p>
<ul>
<li>授权协议： Apache License 2</li>
<li>开发语言： Java JavaScript SHELL</li>
<li>操作系统： Linux</li>
<li>项目主页： <a href="https://github.com/shunfa/crawlzilla" target="_blank" rel="external">https://github.com/shunfa/crawlzilla</a></li>
<li>下载地址： <a href="http://sourceforge.net/projects/crawlzilla/" target="_blank" rel="external">http://sourceforge.net/projects/crawlzilla/</a></li>
</ul>
<blockquote>
<p>特点：安装简易，拥有中文分词功能</p>
</blockquote>
<h3 id="3、Ex-Crawler"><a href="#3、Ex-Crawler" class="headerlink" title="3、Ex-Crawler"></a>3、Ex-Crawler</h3><p>Ex-Crawler 是一个网页爬虫，采用 Java 开发，该项目分成两部分，一个是守护进程，另外一个是灵活可配置的 Web 爬虫。使用数据库存储网页信息。</p>
<ul>
<li>授权协议： GPLv3</li>
<li>开发语言： Java</li>
<li>操作系统： 跨平台</li>
</ul>
<blockquote>
<p>特点：由守护进程执行，使用数据库存储网页信息</p>
</blockquote>
<h3 id="4、Heritrix"><a href="#4、Heritrix" class="headerlink" title="4、Heritrix"></a>4、Heritrix</h3><p>Heritrix 是一个由 java 开发的、开源的网络爬虫，用户可以使用它来从网上抓取想要的资源。其最出色之处在于它良好的可扩展性，方便用户实现自己的抓取逻辑。</p>
<p>Heritrix采用的是模块化的设计，各个模块由一个控制器类（CrawlController类）来协调，控制器是整体的核心。</p>
<ul>
<li>代码托管：<a href="https://github.com/internetarchive/heritrix3" target="_blank" rel="external">https://github.com/internetarchive/heritrix3</a></li>
<li>授权协议： Apache</li>
<li>开发语言： Java</li>
<li>操作系统： 跨平台</li>
</ul>
<blockquote>
<p>特点：严格遵照robots文件的排除指示和META robots标签</p>
</blockquote>
<h3 id="5、heyDr"><a href="#5、heyDr" class="headerlink" title="5、heyDr"></a>5、heyDr</h3><p>heyDr是一款基于java的轻量级开源多线程垂直检索爬虫框架，遵循GNU GPL V3协议。</p>
<p>用户可以通过heyDr构建自己的垂直资源爬虫，用于搭建垂直搜索引擎前期的数据准备。</p>
<ul>
<li>授权协议： GPLv3</li>
<li>开发语言： Java</li>
<li>操作系统： 跨平台</li>
</ul>
<blockquote>
<p>特点：轻量级开源多线程垂直检索爬虫框架</p>
</blockquote>
<h3 id="6、ItSucks"><a href="#6、ItSucks" class="headerlink" title="6、ItSucks"></a>6、ItSucks</h3><p>ItSucks是一个java web spider（web机器人，爬虫）开源项目。支持通过下载模板和正则表达式来定义下载规则。提供一个swing GUI操作界面。</p>
<blockquote>
<p>特点：提供swing GUI操作界面</p>
</blockquote>
<h3 id="7、jcrawl"><a href="#7、jcrawl" class="headerlink" title="7、jcrawl"></a>7、jcrawl</h3><p>jcrawl是一款小巧性能优良的的web爬虫,它可以从网页抓取各种类型的文件,基于用户定义的符号,比如email,qq.</p>
<ul>
<li>授权协议： Apache</li>
<li>开发语言： Java</li>
<li>操作系统： 跨平台</li>
</ul>
<blockquote>
<p>特点：轻量、性能优良，可以从网页抓取各种类型的文件</p>
</blockquote>
<h3 id="8、JSpider"><a href="#8、JSpider" class="headerlink" title="8、JSpider"></a>8、JSpider</h3><p>JSpider是一个用Java实现的WebSpider，JSpider的执行格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jspider [URL] [ConfigName]</div></pre></td></tr></table></figure></p>
<p>URL一定要加上协议名称，如：<a href="http://，否则会报错。如果省掉ConfigName，则采用默认配置。" target="_blank" rel="external">http://，否则会报错。如果省掉ConfigName，则采用默认配置。</a></p>
<p>JSpider 的行为是由配置文件具体配置的，比如采用什么插件，结果存储方式等等都在conf[ConfigName]\目录下设置。JSpider默认的配置种类 很少，用途也不大。但是JSpider非常容易扩展，可以利用它开发强大的网页抓取与数据分析工具。要做到这些，需要对JSpider的原理有深入的了 解，然后根据自己的需求开发插件，撰写配置文件。</p>
<ul>
<li>授权协议： LGPL</li>
<li>开发语言： Java</li>
<li>操作系统： 跨平台</li>
</ul>
<blockquote>
<p>特点：功能强大，容易扩展</p>
</blockquote>
<h3 id="9、Leopdo"><a href="#9、Leopdo" class="headerlink" title="9、Leopdo"></a>9、Leopdo</h3><p>用JAVA编写的web 搜索和爬虫，包括全文和分类垂直搜索，以及分词系统</p>
<ul>
<li>授权协议： Apache</li>
<li>开发语言： Java</li>
<li>操作系统： 跨平台</li>
</ul>
<blockquote>
<p>特点：包括全文和分类垂直搜索，以及分词系统</p>
</blockquote>
<h3 id="10、MetaSeeker"><a href="#10、MetaSeeker" class="headerlink" title="10、MetaSeeker"></a>10、MetaSeeker</h3><p>是一套完整的网页内容抓取、格式化、数据集成、存储管理和搜索解决方案。</p>
<p>网络爬虫有多种实现方法，如果按照部署在哪里分，可以分成：</p>
<ul>
<li><p>1，服务器侧：一般是一个多线程程序，同时下载多个目标HTML，可以用PHP， Java, Python(当前很流行）等做，可以速度做得很快，一般综合搜索引擎的爬虫这样做。但是，如果对方讨厌爬虫，很可能封掉你的IP，服务器IP又不容易 改，另外耗用的带宽也是挺贵的。建议看一下Beautiful soap。</p>
</li>
<li><p>2，客户端：一般实现定题爬虫，或者是聚焦爬虫，做综合搜索引擎不容易成功，而垂直搜诉或者比价服务或者推荐引擎，相对容易很多，这类爬虫不是什么页面都 取的，而是只取你关系的页面，而且只取页面上关心的内容，例如提取黄页信息，商品价格信息，还有提取竞争对手广告信息的，搜一下Spyfu，很有趣。这类 爬虫可以部署很多，而且可以很有侵略性，对方很难封锁。</p>
</li>
</ul>
<p>MetaSeeker中的网络爬虫就属于后者。</p>
<p>MetaSeeker工具包利用Mozilla平台的能力，只要是Firefox看到的东西，它都能提取。</p>
<p>MetaSeeker工具包是免费使用的，下载地址：www.gooseeker.com/cn/node/download/front</p>
<blockquote>
<p>特点：网页抓取、信息提取、数据抽取工具包，操作简单</p>
</blockquote>
<h3 id="11、Playfish"><a href="#11、Playfish" class="headerlink" title="11、Playfish"></a>11、Playfish</h3><p>playfish是一个采用java技术，综合应用多个开源java组件实现的网页抓取工具，通过XML配置文件实现高度可定制性与可扩展性的网页抓取工具</p>
<p>应用开源jar包包括httpclient(内容读取),dom4j（配置文件解析）,jericho（html解析），已经在 war包的lib下。</p>
<p>这个项目目前还很不成熟，但是功能基本都完成了。要求使用者熟悉XML，熟悉正则表达式。目前通过这个工具可以抓取各类论坛，贴吧，以及各类CMS系统。像Discuz!,phpbb,论坛跟博客的文章，通过本工具都可以轻松抓取。抓取定义完全采用XML，适合Java开发人员使用。</p>
<p>使用方法:</p>
<ul>
<li>1.下载右边的.war包导入到eclipse中，</li>
<li>2.使用WebContent/sql下的wcc.sql文件建立一个范例数据库，</li>
<li>3.修改src包下wcc.core的dbConfig.txt，将用户名与密码设置成你自己的mysql用户名密码。</li>
<li>4.然后运行SystemCore,运行时候会在控制台，无参数会执行默认的example.xml的配置文件，带参数时候名称为配置文件名。</li>
</ul>
<p>系统自带了3个例子，分别为baidu.xml抓取百度知道，example.xml抓取我的javaeye的博客，bbs.xml抓取一个采用 discuz论坛的内容。</p>
<ul>
<li>授权协议： MIT</li>
<li>开发语言： Java</li>
<li>操作系统： 跨平台</li>
</ul>
<blockquote>
<p>特点：通过XML配置文件实现高度可定制性与可扩展性</p>
</blockquote>
<h3 id="12、Spiderman"><a href="#12、Spiderman" class="headerlink" title="12、Spiderman"></a>12、Spiderman</h3><p>Spiderman 是一个基于微内核+插件式架构的网络蜘蛛，它的目标是通过简单的方法就能将复杂的目标网页信息抓取并解析为自己所需要的业务数据。</p>
<p>怎么使用？</p>
<ul>
<li>首先，确定好你的目标网站以及目标网页（即某一类你想要获取数据的网页，例如网易新闻的新闻页面）</li>
<li>然后，打开目标页面，分析页面的HTML结构，得到你想要数据的XPath，具体XPath怎么获取请看下文。</li>
<li>最后，在一个xml配置文件里填写好参数，运行Spiderman吧！</li>
</ul>
<ul>
<li>授权协议： Apache</li>
<li>开发语言： Java</li>
<li>操作系统： 跨平台</li>
</ul>
<blockquote>
<p>特点：灵活、扩展性强，微内核+插件式架构，通过简单的配置就可以完成数据抓取，无需编写一句代码</p>
</blockquote>
<h3 id="13、webmagic"><a href="#13、webmagic" class="headerlink" title="13、webmagic"></a>13、webmagic</h3><p>webmagic的是一个无须配置、便于二次开发的爬虫框架，它提供简单灵活的API，只需少量代码即可实现一个爬虫。</p>
<p>webmagic采用完全模块化的设计，功能覆盖整个爬虫的生命周期(链接提取、页面下载、内容抽取、持久化)，支持多线程抓取，分布式抓取，并支持自动重试、自定义UA/cookie等功能。</p>
<p>webmagic包含强大的页面抽取功能，开发者可以便捷的使用css selector、xpath和正则表达式进行链接和内容的提取，支持多个选择器链式调用。</p>
<ul>
<li>webmagic的使用文档：<a href="http://webmagic.io/docs/" target="_blank" rel="external">http://webmagic.io/docs/</a></li>
<li>查看源代码：<a href="http://git.oschina.net/flashsword20/webmagic" target="_blank" rel="external">http://git.oschina.net/flashsword20/webmagic</a></li>
<li>授权协议： Apache</li>
<li>开发语言： Java</li>
<li>操作系统： 跨平台</li>
</ul>
<blockquote>
<p>特点：功能覆盖整个爬虫生命周期，使用Xpath和正则表达式进行链接和内容的提取。</p>
</blockquote>
<p><em>备注：这是一款国产开源软件，由 黄亿华贡献</em></p>
<h3 id="14、Web-Harvest"><a href="#14、Web-Harvest" class="headerlink" title="14、Web-Harvest"></a>14、Web-Harvest</h3><p>Web-Harvest是一个Java开源Web数据抽取工具。它能够收集指定的Web页面并从这些页面中提取有用的数据。Web-Harvest主要是运用了像XSLT,XQuery,正则表达式等这些技术来实现对text/xml的操作。</p>
<p>其实现原理是，根据预先定义的配置文件用httpclient获取页面的全部内容（关于httpclient的内容，本博有些文章已介绍），然后运用XPath、XQuery、正则表达式等这些技术来实现对text/xml的内容筛选操作，选取精确的数据。前两年比较火的垂直搜索（比如：酷讯等）也是采用类似的原理实现的。Web-Harvest应用，关键就是理解和定义配置文件，其他的就是考虑怎么处理数据的Java代码。当然在爬虫开始前，也可以把Java变量填充到配置文件中，实现动态的配置。</p>
<ul>
<li>授权协议： BSD</li>
<li>开发语言： Java</li>
</ul>
<blockquote>
<p>特点：运用XSLT、XQuery、正则表达式等技术来实现对Text或XML的操作，具有可视化的界面</p>
</blockquote>
<h3 id="15、WebSPHINX"><a href="#15、WebSPHINX" class="headerlink" title="15、WebSPHINX"></a>15、WebSPHINX</h3><p>WebSPHINX是一个Java类包和Web爬虫的交互式开发环境。Web爬虫(也叫作机器人或蜘蛛)是可以自动浏览与处理Web页面的程序。WebSPHINX由两部分组成：爬虫工作平台和WebSPHINX类包。</p>
<ul>
<li>授权协议：Apache</li>
<li>开发语言：Java</li>
</ul>
<blockquote>
<p>特点：由两部分组成：爬虫工作平台和WebSPHINX类包</p>
</blockquote>
<h3 id="16、YaCy"><a href="#16、YaCy" class="headerlink" title="16、YaCy"></a>16、YaCy</h3><p>YaCy基于p2p的分布式Web搜索引擎.同时也是一个Http缓存代理服务器.这个项目是构建基于p2p Web索引网络的一个新方法.它可以搜索你自己的或全局的索引,也可以Crawl自己的网页或启动分布式Crawling等.</p>
<ul>
<li>授权协议： GPL</li>
<li>开发语言： Java Perl</li>
<li>操作系统： 跨平台</li>
</ul>
<blockquote>
<p>特点：基于P2P的分布式Web搜索引擎</p>
</blockquote>
<h2 id="Python爬虫"><a href="#Python爬虫" class="headerlink" title="Python爬虫"></a>Python爬虫</h2><hr>
<h3 id="17、QuickRecon"><a href="#17、QuickRecon" class="headerlink" title="17、QuickRecon"></a>17、QuickRecon</h3><p>QuickRecon是一个简单的信息收集工具,它可以帮助你查找子域名名称、perform zone transfe、收集电子邮件地址和使用microformats寻找人际关系等。QuickRecon使用python编写，支持linux和 windows操作系统。</p>
<ul>
<li>授权协议： GPLv3</li>
<li>开发语言： Python</li>
<li>操作系统： Windows Linux</li>
</ul>
<blockquote>
<p>特点：具有查找子域名名称、收集电子邮件地址并寻找人际关系等功能</p>
</blockquote>
<h3 id="18、PyRailgun"><a href="#18、PyRailgun" class="headerlink" title="18、PyRailgun"></a>18、PyRailgun</h3><p>这是一个非常简单易用的抓取工具。支持抓取javascript渲染的页面的简单实用高效的python网页爬虫抓取模块</p>
<ul>
<li>授权协议： MIT</li>
<li>开发语言： Python</li>
<li>操作系统： 跨平台 Windows Linux OS X</li>
</ul>
<blockquote>
<p>特点：简洁、轻量、高效的网页抓取框架</p>
</blockquote>
<p><em>备注：此软件也是由国人开放</em></p>
<ul>
<li>github下载：<a href="https://github.com/princehaku/pyrailgun#readme" target="_blank" rel="external">https://github.com/princehaku/pyrailgun#readme</a></li>
</ul>
<h3 id="19、Scrapy"><a href="#19、Scrapy" class="headerlink" title="19、Scrapy"></a>19、Scrapy</h3><p>Scrapy 是一套基于基于Twisted的异步处理框架，纯python实现的爬虫框架，用户只需要定制开发几个模块就可以轻松的实现一个爬虫，用来抓取网页内容以及各种图片，非常之方便～</p>
<ul>
<li>授权协议： BSD</li>
<li>开发语言： Python</li>
<li><p>操作系统： 跨平台</p>
</li>
<li><p>github源代码：<a href="https://github.com/scrapy/scrapy" target="_blank" rel="external">https://github.com/scrapy/scrapy</a></p>
</li>
</ul>
<blockquote>
<p>特点：基于Twisted的异步处理框架，文档齐全</p>
</blockquote>
<h2 id="C-爬虫"><a href="#C-爬虫" class="headerlink" title="C++爬虫"></a>C++爬虫</h2><hr>
<h3 id="20、hispider"><a href="#20、hispider" class="headerlink" title="20、hispider"></a>20、hispider</h3><p>HiSpider is a fast and high performance spider with high speed</p>
<p>严格说只能是一个spider系统的框架, 没有细化需求, 目前只是能提取URL, URL排重, 异步DNS解析, 队列化任务, 支持N机分布式下载, 支持网站定向下载(需要配置hispiderd.ini whitelist).</p>
<p>特征和用法:</p>
<ul>
<li>基于unix/linux系统的开发</li>
<li>异步DNS解析</li>
<li>URL排重</li>
<li>支持HTTP 压缩编码传输 gzip/deflate</li>
<li>字符集判断自动转换成UTF-8编码</li>
<li>文档压缩存储</li>
<li>支持多下载节点分布式下载</li>
<li>支持网站定向下载(需要配置 hispiderd.ini whitelist )</li>
<li>可通过 <a href="http://127.0.0.1:3721/" target="_blank" rel="external">http://127.0.0.1:3721/</a> 查看下载情况统计,下载任务控制(可停止和恢复任务)</li>
<li>依赖基本通信库 libevbase 和 libsbase (安装的时候需要先安装这个两个库)、</li>
</ul>
<p>工作流程:</p>
<ul>
<li>从中心节点取URL(包括URL对应的任务号, IP和port,也可能需要自己解析)</li>
<li>连接服务器发送请求</li>
<li>等待数据头判断是否需要的数据(目前主要取text类型的数据)</li>
<li>等待完成数据(有length头的直接等待说明长度的数据否则等待比较大的数字然后设置超时)</li>
<li>数据完成或者超时, zlib压缩数据返回给中心服务器,数据可能包括自己解析DNS信息, 压缩后数据长度+压缩后数据, 如果出错就直接返回任务号以及相关信息</li>
<li>中心服务器收到带有任务号的数据, 查看是否包括数据, 如果没有数据直接置任务号对应的状态为错误, 如果有数据提取数据种link 然后存储数据到文档文件.<br>完成后返回一个新的任务.</li>
</ul>
<ul>
<li>授权协议： BSD</li>
<li>开发语言： C/C++</li>
<li>操作系统： Linux</li>
</ul>
<blockquote>
<p>特点：支持多机分布式下载, 支持网站定向下载</p>
</blockquote>
<h3 id="21、larbin"><a href="#21、larbin" class="headerlink" title="21、larbin"></a>21、larbin</h3><p>larbin是一种开源的网络爬虫/网络蜘蛛，由法国的年轻人 Sébastien Ailleret独立开发。larbin目的是能够跟踪页面的url进行扩展的抓取，最后为搜索引擎提供广泛的数据来源。Larbin只是一个爬虫，也就 是说larbin只抓取网页，至于如何parse的事情则由用户自己完成。另外，如何存储到数据库以及建立索引的事情 larbin也不提供。一个简单的larbin的爬虫可以每天获取５００万的网页。</p>
<p>利用larbin，我们可以轻易的获取/确定单个网站的所有链接，甚至可以镜像一个网站；也可以用它建立url 列表群，例如针对所有的网页进行 url retrive后，进行xml的联结的获取。或者是 mp3，或者定制larbin，可以作为搜索引擎的信息的来源。</p>
<ul>
<li>授权协议： GPL</li>
<li>开发语言： C/C++</li>
<li>操作系统： Linux</li>
</ul>
<blockquote>
<p>特点：高性能的爬虫软件，只负责抓取不负责解析</p>
</blockquote>
<h3 id="22、Methabot"><a href="#22、Methabot" class="headerlink" title="22、Methabot"></a>22、Methabot</h3><p>Methabot 是一个经过速度优化的高可配置的 WEB、FTP、本地文件系统的爬虫软件。</p>
<ul>
<li>授权协议： 未知</li>
<li>开发语言： C/C++</li>
<li>操作系统： Windows Linux</li>
</ul>
<blockquote>
<p>特点：过速度优化、可抓取WEB、FTP及本地文件系统</p>
</blockquote>
<ul>
<li>源代码：<a href="http://www.oschina.net/code/tag/methabot" target="_blank" rel="external">http://www.oschina.net/code/tag/methabot</a></li>
</ul>
<h2 id="C-爬虫-1"><a href="#C-爬虫-1" class="headerlink" title="C#爬虫"></a>C#爬虫</h2><hr>
<h3 id="23、NWebCrawler"><a href="#23、NWebCrawler" class="headerlink" title="23、NWebCrawler"></a>23、NWebCrawler</h3><p>NWebCrawler是一款开源，C#开发网络爬虫程序。</p>
<p>特性：</p>
<ul>
<li>可配置：线程数，等待时间，连接超时，允许MIME类型和优先级，下载文件夹。</li>
<li>统计信息：URL数量，总下载文件，总下载字节数，CPU利用率和可用内存。</li>
<li>Preferential crawler：用户可以设置优先级的MIME类型。</li>
<li><p>Robust: 10+ URL normalization rules, crawler trap avoiding rules.</p>
</li>
<li><p>授权协议： GPLv2</p>
</li>
<li>开发语言： C#</li>
<li><p>操作系统： Windows</p>
</li>
<li><p>项目主页：<a href="http://www.open-open.com/lib/view/home/1350117470448" target="_blank" rel="external">http://www.open-open.com/lib/view/home/1350117470448</a></p>
</li>
</ul>
<blockquote>
<p>特点：统计信息、执行过程可视化</p>
</blockquote>
<h3 id="24、Sinawler"><a href="#24、Sinawler" class="headerlink" title="24、Sinawler"></a>24、Sinawler</h3><p>国内第一个针对微博数据的爬虫程序！原名“新浪微博爬虫”。</p>
<p>登录后，可以指定用户为起点，以该用户的关注人、粉丝为线索，延人脉关系搜集用户基本信息、微博数据、评论数据。</p>
<p>该应用获取的数据可作为科研、与新浪微博相关的研发等的数据支持，但请勿用于商业用途。该应用基于.NET2.0框架，需SQL SERVER作为后台数据库，并提供了针对SQL Server的数据库脚本文件。</p>
<p>另外，由于新浪微博API的限制，爬取的数据可能不够完整（如获取粉丝数量的限制、获取微博数量的限制等）</p>
<p>本程序版权归作者所有。你可以免费: 拷贝、分发、呈现和表演当前作品,制作派生作品。 你不可将当前作品用于商业目的。</p>
<p>5.x版本已经发布！ 该版本共有6个后台工作线程：爬取用户基本信息的机器人、爬取用户关系的机器人、爬取用户标签的机器人、爬取微博内容的机器人、爬取微博评论的机器人，以及调节请求频率的机器人。更高的性能！最大限度挖掘爬虫潜力！ 以现在测试的结果看，已经能够满足自用。</p>
<p>本程序的特点：</p>
<ol>
<li>6个后台工作线程，最大限度挖掘爬虫性能潜力！</li>
<li>界面上提供参数设置，灵活方便</li>
<li>抛弃app.config配置文件，自己实现配置信息的加密存储，保护数据库帐号信息</li>
<li>自动调整请求频率，防止超限，也避免过慢，降低效率</li>
<li>任意对爬虫控制，可随时暂停、继续、停止爬虫</li>
<li>良好的用户体验</li>
</ol>
<ul>
<li>授权协议： GPLv3</li>
<li>开发语言： C# .NET</li>
<li>操作系统： Windows</li>
</ul>
<h3 id="25、spidernet"><a href="#25、spidernet" class="headerlink" title="25、spidernet"></a>25、spidernet</h3><p>spidernet是一个以递归树为模型的多线程web爬虫程序, 支持text/html资源的获取. 可以设定爬行深度, 最大下载字节数限制, 支持gzip解码, 支持以gbk(gb2312)和utf8编码的资源; 存储于sqlite数据文件.</p>
<p>源码中TODO:标记描述了未完成功能, 希望提交你的代码.</p>
<ul>
<li>授权协议： MIT</li>
<li>开发语言： C#</li>
<li><p>操作系统： Windows</p>
</li>
<li><p>github源代码：<a href="https://github.com/nsnail/spidernet" target="_blank" rel="external">https://github.com/nsnail/spidernet</a></p>
</li>
</ul>
<blockquote>
<p>特点：以递归树为模型的多线程web爬虫程序，支持以GBK (gb2312)和utf8编码的资源，使用sqlite存储数据</p>
</blockquote>
<h3 id="26、Web-Crawler"><a href="#26、Web-Crawler" class="headerlink" title="26、Web Crawler"></a>26、Web Crawler</h3><p>mart and Simple Web Crawler是一个Web爬虫框架。集成Lucene支持。该爬虫可以从单个链接或一个链接数组开始，提供两种遍历模式：最大迭代和最大深度。可以设置 过滤器限制爬回来的链接，默认提供三个过滤器ServerFilter、BeginningPathFilter和 RegularExpressionFilter，这三个过滤器可用AND、OR和NOT联合。在解析过程或页面加载前后都可以加监听器。介绍内容来自Open-Open</p>
<ul>
<li>开发语言： Java</li>
<li>操作系统： 跨平台</li>
<li>授权协议： LGPL</li>
</ul>
<blockquote>
<p>特点：多线程，支持抓取PDF/DOC/EXCEL等文档来源</p>
</blockquote>
<h3 id="27、网络矿工"><a href="#27、网络矿工" class="headerlink" title="27、网络矿工"></a>27、网络矿工</h3><p>网站数据采集软件 网络矿工采集器（原soukey采摘）</p>
<p>Soukey采摘网站数据采集软件是一款基于.Net平台的开源软件，也是网站数据采集软件类型中唯一一款开源软件。尽管Soukey采摘开源，但并不会影响软件功能的提供，甚至要比一些商用软件的功能还要丰富。</p>
<ul>
<li>授权协议： BSD</li>
<li>开发语言： C# .NET</li>
<li>操作系统： Windows</li>
</ul>
<blockquote>
<p>特点：功能丰富，毫不逊色于商业软件</p>
</blockquote>
<h2 id="PHP爬虫"><a href="#PHP爬虫" class="headerlink" title="PHP爬虫"></a>PHP爬虫</h2><hr>
<h3 id="28、OpenWebSpider"><a href="#28、OpenWebSpider" class="headerlink" title="28、OpenWebSpider"></a>28、OpenWebSpider</h3><p>OpenWebSpider是一个开源多线程Web Spider（robot：机器人，crawler：爬虫)和包含许多有趣功能的搜索引擎。</p>
<ul>
<li>授权协议： 未知</li>
<li>开发语言： PHP</li>
<li>操作系统： 跨平台</li>
</ul>
<blockquote>
<p>特点：开源多线程网络爬虫，有许多有趣的功能</p>
</blockquote>
<h3 id="29、PhpDig"><a href="#29、PhpDig" class="headerlink" title="29、PhpDig"></a>29、PhpDig</h3><p>PhpDig是一个采用PHP开发的Web爬虫和搜索引擎。通过对动态和静态页面进行索引建立一个词汇表。当搜索查询时，它将按一定的排序规则显示包含关 键字的搜索结果页面。PhpDig包含一个模板系统并能够索引PDF,Word,Excel,和PowerPoint文档。PHPdig适用于专业化更 强、层次更深的个性化搜索引擎，利用它打造针对某一领域的垂直搜索引擎是最好的选择。</p>
<p>演示：<a href="http://www.phpdig.net/navigation.php?action=demo" target="_blank" rel="external">http://www.phpdig.net/navigation.php?action=demo</a></p>
<ul>
<li>授权协议： GPL</li>
<li>开发语言： PHP</li>
<li>操作系统： 跨平台</li>
</ul>
<blockquote>
<p>特点：具有采集网页内容、提交表单功能</p>
</blockquote>
<h3 id="30、ThinkUp"><a href="#30、ThinkUp" class="headerlink" title="30、ThinkUp"></a>30、ThinkUp</h3><p>ThinkUp 是一个可以采集推特，facebook等社交网络数据的社会媒体视角引擎。通过采集个人的社交网络账号中的数据，对其存档以及处理的交互分析工具，并将数据图形化以便更直观的查看。</p>
<ul>
<li>授权协议： GPL</li>
<li>开发语言： PHP</li>
<li><p>操作系统： 跨平台</p>
</li>
<li><p>github源码：<a href="https://github.com/ThinkUpLLC/ThinkUp" target="_blank" rel="external">https://github.com/ThinkUpLLC/ThinkUp</a></p>
</li>
</ul>
<blockquote>
<p>特点：采集推特、脸谱等社交网络数据的社会媒体视角引擎，可进行交互分析并将结果以可视化形式展现</p>
</blockquote>
<h3 id="31、微购"><a href="#31、微购" class="headerlink" title="31、微购"></a>31、微购</h3><p>微购社会化购物系统是一款基于ThinkPHP框架开发的开源的购物分享系统，同时它也是一套针对站长、开源的的淘宝客网站程序，它整合了淘宝、天猫、淘宝客等300多家商品数据采集接口，为广大的淘宝客站长提供傻瓜式淘客建站服务，会HTML就会做程序模板，免费开放下载，是广大淘客站长的首选。</p>
<p>演示网址：<a href="http://tlx.wego360.com" target="_blank" rel="external">http://tlx.wego360.com</a></p>
<ul>
<li>授权协议： GPL</li>
<li>开发语言： PHP</li>
<li>操作系统： 跨平台</li>
</ul>
<h2 id="ErLang爬虫"><a href="#ErLang爬虫" class="headerlink" title="ErLang爬虫"></a>ErLang爬虫</h2><hr>
<h3 id="32、Ebot"><a href="#32、Ebot" class="headerlink" title="32、Ebot"></a>32、Ebot</h3><p>Ebot 是一个用 ErLang 语言开发的可伸缩的分布式网页爬虫，URLs 被保存在数据库中可通过 RESTful 的 HTTP 请求来查询。</p>
<ul>
<li>授权协议： GPLv3</li>
<li>开发语言： ErLang</li>
<li><p>操作系统： 跨平台</p>
</li>
<li><p>github源代码：<a href="https://github.com/matteoredaelli/ebot" target="_blank" rel="external">https://github.com/matteoredaelli/ebot</a></p>
</li>
<li><p>项目主页： <a href="http://www.redaelli.org/matteo/blog/projects/ebot" target="_blank" rel="external">http://www.redaelli.org/matteo/blog/projects/ebot</a></p>
</li>
</ul>
<blockquote>
<p>特点：可伸缩的分布式网页爬虫</p>
</blockquote>
<h2 id="Ruby爬虫"><a href="#Ruby爬虫" class="headerlink" title="Ruby爬虫"></a>Ruby爬虫</h2><hr>
<h3 id="33、Spidr"><a href="#33、Spidr" class="headerlink" title="33、Spidr"></a>33、Spidr</h3><p>Spidr 是一个Ruby 的网页爬虫库，可以将整个网站、多个网站、某个链接完全抓取到本地。</p>
<ul>
<li><p>开发语言： Ruby</p>
</li>
<li><p>授权协议：MIT</p>
</li>
</ul>
<blockquote>
<p>特点：可将一个或多个网站、某个链接完全抓取到本地</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对较为知名及常见的开源爬虫软件进行梳理，按开发语言进行汇总。虽然搜索引擎也有爬虫，但这里只是爬虫软件，而非大型、复杂的搜索引擎。&lt;/p&gt;
    
    </summary>
    
    
      <category term="COLLECTION" scheme="http://mingotang.github.io/tags/COLLECTION/"/>
    
  </entry>
  
  <entry>
    <title>数据集下载链接汇总</title>
    <link href="http://mingotang.github.io/2017/09/06/%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E6%B1%87%E6%80%BB/"/>
    <id>http://mingotang.github.io/2017/09/06/数据集下载链接汇总/</id>
    <published>2017-09-06T07:04:43.000Z</published>
    <updated>2017-09-25T03:12:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><ul>
<li><a href="http://www.sogou.com/labs/" target="_blank" rel="external">搜狗实验室</a></li>
<li><a href="https://www.ncdc.noaa.gov/data-access/quick-links" target="_blank" rel="external">气象数据集</a></li>
<li><a href="http://cdiac.ornl.gov/ftp/ndp026b" target="_blank" rel="external">气候监测数据集</a></li>
</ul>
<h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p>亚马逊网络服务数据<br><a href="http://aws.amazon.com/datasets" target="_blank" rel="external">http://aws.amazon.com/datasets</a><br>航空公司数据(2009年ASA挑战)<br><a href="http://stat-computing.org/dataexpo/2009/the-data.html" target="_blank" rel="external">http://stat-computing.org/dataexpo/2009/the-data.html</a><br>澳大利亚天气<br><a href="http://www.bom.gov.au/climate/dwo/" target="_blank" rel="external">http://www.bom.gov.au/climate/dwo/</a><br>因果关系工作台<br><a href="http://www.causality.inf.ethz.ch/repository.php" target="_blank" rel="external">http://www.causality.inf.ethz.ch/repository.php</a><br>Kaggle竞争数据<br><a href="https://www.kaggle.com/datasets" target="_blank" rel="external">https://www.kaggle.com/datasets</a><br>KDNuggets竞争网站<br>www.kdnuggets.com/datasets/<br>机器学习的数据集存储库<br><a href="http://mldata.org/" target="_blank" rel="external">http://mldata.org/</a><br>医疗保险数据文件<br><a href="http://go.cms.gov/19xxPN4" target="_blank" rel="external">http://go.cms.gov/19xxPN4</a><br>微软研究院<br><a href="http://research.microsoft.com/apps/dp/dl/downloads.aspx" target="_blank" rel="external">http://research.microsoft.com/apps/dp/dl/downloads.aspx</a><br>百万歌曲数据集<br><a href="http://blog.echonest.com/post/3639160982/million-song-dataset" target="_blank" rel="external">http://blog.echonest.com/post/3639160982/million-song-dataset</a><br>歌曲数据集<br><a href="http://labrosa.ee.columbia.edu/millionsong/pages/additional-datasets" target="_blank" rel="external">http://labrosa.ee.columbia.edu/millionsong/pages/additional-datasets</a><br>RDataMining.com R和数据挖掘电子书数据<br><a href="http://www.rdatamining.com/data" target="_blank" rel="external">http://www.rdatamining.com/data</a><br>革命分析集合<br><a href="http://www.revolutionanalytics.com/subscriptions/datasets/" target="_blank" rel="external">http://www.revolutionanalytics.com/subscriptions/datasets/</a><br>社交网络<br><a href="http://www.cs.cmu.edu//ancestry.com/" target="_blank" rel="external">http://www.cs.cmu.edu//ancestry.com/</a> ~ jelsas /数据<br>UCI机器学习库<br><a href="http://archive.ics.uci.edu/ml/" target="_blank" rel="external">http://archive.ics.uci.edu/ml/</a><br>535亿点击<br>1.<a href="http://cnets.indiana.edu/groups/nan/webtraffic/click-dataset" target="_blank" rel="external">http://cnets.indiana.edu/groups/nan/webtraffic/click-dataset</a><br>2.<a href="http://archive.ics.uci.edu/ml/" target="_blank" rel="external">http://archive.ics.uci.edu/ml/</a><br>3.<a href="http://www.ics.uci.edu/~mlearn//MLRepository.htm" target="_blank" rel="external">http://www.ics.uci.edu/~mlearn//MLRepository.htm</a><br>机器学习样本数据库<br>1.<a href="http://kdd.ics.uci.edu/" target="_blank" rel="external">http://kdd.ics.uci.edu/</a><br>2.<a href="http://www.ics.uci.edu/~mlearn/MLRepository.html" target="_blank" rel="external">http://www.ics.uci.edu/~mlearn/MLRepository.html</a><br>关于基金的数据挖掘的网站<br><a href="http://www.gotofund.com/index.asp" target="_blank" rel="external">http://www.gotofund.com/index.asp</a><br>数据生成器的链接<br><a href="http://www.cse.cuhk.edu.hk/~kdd/data_collection.html" target="_blank" rel="external">http://www.cse.cuhk.edu.hk/~kdd/data_collection.html</a><br>癌症基因<br><a href="http://www.broad.mit.edu/cgi-bin/cancer/datasets.cgi" target="_blank" rel="external">http://www.broad.mit.edu/cgi-bin/cancer/datasets.cgi</a><br>金融数据<br><a href="http://lisp.vse.cz/pkdd99/Challenge/chall.htm" target="_blank" rel="external">http://lisp.vse.cz/pkdd99/Challenge/chall.htm</a></p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>斯坦福大学大型网络数据收集<br><a href="http://snap.stanford.edu/data/" target="_blank" rel="external">http://snap.stanford.edu/data/</a><br>微软匿名网络数据<br><a href="http://kdd.ics.uci.edu/databases/msweb/msweb.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/msweb/msweb.html</a><br>MSNBC匿名网络数据<br><a href="http://kdd.ics.uci.edu/databases/msnbc/msnbc.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/msnbc/msnbc.html</a><br>SyskillWebert Web数据<br><a href="http://kdd.ics.uci.edu/databases/SyskillWebert/SyskillWebert.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/SyskillWebert/SyskillWebert.html</a></p>
<h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><p>ImageNet （包含1400万的图像）<br><a href="http://www.image-net.org/" target="_blank" rel="external">http://www.image-net.org/</a><br>Tiny Images Dataset （包含8000万的32x32图像）<br><a href="http://horatio.cs.nyu.edu/mit/tiny/data/index.html" target="_blank" rel="external">http://horatio.cs.nyu.edu/mit/tiny/data/index.html</a><br>MirFlickr1M （包含100万的图像）<br><a href="http://press.liacs.nl/mirflickr/" target="_blank" rel="external">http://press.liacs.nl/mirflickr/</a><br> CoPhIR （包含1亿600万的图像 ）<br><a href="http://cophir.isti.cnr.it/whatis.html" target="_blank" rel="external">http://cophir.isti.cnr.it/whatis.html</a><br>SBU captioned photo dataset （包含100万的图像）<br><a href="http://dsl1.cewit.stonybrook.edu/~vicente/sbucaptions/" target="_blank" rel="external">http://dsl1.cewit.stonybrook.edu/~vicente/sbucaptions/</a><br>Large-Scale Image Annotation using Visual Synset(ICCV 2011) （包含2亿图像 ）<br><a href="http://cpl.cc.gatech.edu/projects/VisualSynset/" target="_blank" rel="external">http://cpl.cc.gatech.edu/projects/VisualSynset/</a><br>NUS-WIDE（包含27万的图像）<br><a href="http://lms.comp.nus.edu.sg/research/NUS-WIDE.htm" target="_blank" rel="external">http://lms.comp.nus.edu.sg/research/NUS-WIDE.htm</a><br>SUN dataset （包含13万的图像）<br><a href="http://people.csail.mit.edu/jxiao/SUN/" target="_blank" rel="external">http://people.csail.mit.edu/jxiao/SUN/</a><br>MSRA-MM （包含100万的图像，23000视频 ）<br><a href="http://research.microsoft.com/enus/projects/msrammdata/" target="_blank" rel="external">http://research.microsoft.com/enus/projects/msrammdata/</a><br>TRECVID<br><a href="http://trecvid.nist.gov/" target="_blank" rel="external">http://trecvid.nist.gov/</a><br>卡耐基-梅隆的脸图片<br><a href="http://kdd.ics.uci.edu/databases/faces/faces.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/faces/faces.html</a><br>金星上的火山<br><a href="http://kdd.ics.uci.edu/databases/volcanoes/volcanoes.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/volcanoes/volcanoes.html</a><br>雅虎发布超大Flickr数据集 1亿的图片+视频<br><a href="http://yahoolabs.tumblr.com/post/89783581601/one-hundred-million-creative-commons-flickr-images-for" target="_blank" rel="external">http://yahoolabs.tumblr.com/post/89783581601/one-hundred-million-creative-commons-flickr-images-for</a><br>100多个有趣的数据集<br><a href="http://www.csdn.net/article/2014-06-06/2820111-100-Interesting-Data-Sets-for-Statistics" target="_blank" rel="external">http://www.csdn.net/article/2014-06-06/2820111-100-Interesting-Data-Sets-for-Statistics</a><br>图像处理相关个人主页、研究组及公开数据集网址<br><a href="http://blog.sciencenet.cn/blog-673472-759786.html" target="_blank" rel="external">http://blog.sciencenet.cn/blog-673472-759786.html</a></p>
<h2 id="Public-Domain-Collections"><a href="#Public-Domain-Collections" class="headerlink" title="Public Domain Collections"></a>Public Domain Collections</h2><p>Data360<br><a href="http://www.data360.org/index.aspx" target="_blank" rel="external">http://www.data360.org/index.aspx</a><br>Datamob.org<br> <a href="http://datamob.org/datasets" target="_blank" rel="external">http://datamob.org/datasets</a><br>Factual<br><a href="http://www.factual.com/topics/browse" target="_blank" rel="external">http://www.factual.com/topics/browse</a><br>Freebase<br><a href="http://www.freebase.com/" target="_blank" rel="external">http://www.freebase.com/</a><br>Google<br><a href="http://www.google.com/publicdata/directory" target="_blank" rel="external">http://www.google.com/publicdata/directory</a><br>infochimps: <a href="http://www.infochimps.com/" target="_blank" rel="external">http://www.infochimps.com/</a><br>numbray<br> <a href="http://numbrary.com/" target="_blank" rel="external">http://numbrary.com/</a><br>Quora<br><a href="https://www.quora.com/Data/Where-can-I-find-large-datasets-open-to-the-public" target="_blank" rel="external">https://www.quora.com/Data/Where-can-I-find-large-datasets-open-to-the-public</a><br>RS Collection 100+<br><a href="http://rs.io/2014/05/29/list-of-data-sets.html" target="_blank" rel="external">http://rs.io/2014/05/29/list-of-data-sets.html</a><br>Sample R data sets<br><a href="http://stat.ethz.ch/R-manual/R-patched/library/datasets/html/00Index.html" target="_blank" rel="external">http://stat.ethz.ch/R-manual/R-patched/library/datasets/html/00Index.html</a><br>SourceForge研究数据<br> <a href="http://www.nd.edu/" target="_blank" rel="external">http://www.nd.edu/</a> oss /数据/研究司<br>StatSci.org<br><a href="http://www.statsci.org/datasets.html" target="_blank" rel="external">http://www.statsci.org/datasets.html</a><br>UFO报告<br><a href="http://www.nuforc.org/webreports.html" target="_blank" rel="external">http://www.nuforc.org/webreports.html</a><br>维基解密911寻呼机截取<br> <a href="http://911.wikileaks.org/files/index.html" target="_blank" rel="external">http://911.wikileaks.org/files/index.html</a><br>Stats4Stem.org:R数据集<br><a href="http://www.stats4stem.org/data-sets.html" target="_blank" rel="external">http://www.stats4stem.org/data-sets.html</a><br>《华盛顿邮报》名单<br><a href="http://www.washingtonpost.com/wp-srv/metro/data/datapost.html" target="_blank" rel="external">http://www.washingtonpost.com/wp-srv/metro/data/datapost.html</a></p>
<h2 id="科学"><a href="#科学" class="headerlink" title="科学"></a>科学</h2><p>农业实验<br><a href="http://www.insider.org/packages/cran/agridat/docs/agridat" target="_blank" rel="external">http://www.insider.org/packages/cran/agridat/docs/agridat</a><br>气候数据<br><a href="http://www.cru.uea.ac.uk/cru/data/temperature/#datter" target="_blank" rel="external">http://www.cru.uea.ac.uk/cru/data/temperature/#datter</a><br>and ftp://ftp.cmdl.noaa.gov/<br>Gene Expression Omnibus<br><a href="http://www.ncbi.nlm.nih.gov/geo/" target="_blank" rel="external">http://www.ncbi.nlm.nih.gov/geo/</a><br>Geo Spatial Data<br><a href="http://geodacenter.asu.edu/datalist/" target="_blank" rel="external">http://geodacenter.asu.edu/datalist/</a><br>Human Microbiome Project<br><a href="http://www.hmpdacc.org/reference_genomes/reference_genomes.php" target="_blank" rel="external">http://www.hmpdacc.org/reference_genomes/reference_genomes.php</a><br>MIT Cancer Genomics Data<br><a href="http://www.broadinstitute.org/cgibin/cancer/datasets.cgi" target="_blank" rel="external">http://www.broadinstitute.org/cgibin/cancer/datasets.cgi</a><br>NASA<br><a href="http://nssdc.gsfc.nasa.gov/nssdc/obtaining_data.html" target="_blank" rel="external">http://nssdc.gsfc.nasa.gov/nssdc/obtaining_data.html</a><br>NIH Microarray data<br>ftp://ftp.ncbi.nih.gov/pub/geo/DATA/supplementary/series/GSE6532/(R)<br>Protein structure<br><a href="http://www.infobiotic.net/PSPbenchmarks/" target="_blank" rel="external">http://www.infobiotic.net/PSPbenchmarks/</a><br>Public Gene Data<br><a href="http://www.pubgene.org/" target="_blank" rel="external">http://www.pubgene.org/</a><br>斯坦福大学的微阵列数据<br><a href="http://smd.stanford.edu/" target="_blank" rel="external">http://smd.stanford.edu/</a></p>
<h2 id="社会科学"><a href="#社会科学" class="headerlink" title="社会科学"></a>社会科学</h2><p>综合社会调查<br><a href="http://www3.norc.org/GSS" target="_blank" rel="external">http://www3.norc.org/GSS</a> +网站/<br>ICPSR<br><a href="http://www.icpsr.umich.edu/icpsrweb/ICPSR/access/index.jsp" target="_blank" rel="external">http://www.icpsr.umich.edu/icpsrweb/ICPSR/access/index.jsp</a><br>皮尤研究<br><a href="http://www.pewinternet.org/datasets/pages/2/" target="_blank" rel="external">http://www.pewinternet.org/datasets/pages/2/</a><br>加州大学洛杉矶分校的社会科学档案<br><a href="http://dataarchives.ss.ucla.edu/Home.DataPortals.html" target="_blank" rel="external">http://dataarchives.ss.ucla.edu/Home.DataPortals.html</a><br>UPJOHN本月<br><a href="http://www.upjohn.org/erdc/erdc.html" target="_blank" rel="external">http://www.upjohn.org/erdc/erdc.html</a></p>
<h2 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h2><p>时间序列数据库<br><a href="http://robjhyndman.com/TSDL/" target="_blank" rel="external">http://robjhyndman.com/TSDL/</a><br>澳大利亚手语数据<br><a href="http://kdd.ics.uci.edu/databases/auslan/auslan.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/auslan/auslan.html</a><br>高质量的澳大利亚手语数据<br><a href="http://kdd.ics.uci.edu/databases/auslan2/auslan.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/auslan2/auslan.html</a><br>脑电图数据<br><a href="http://kdd.ics.uci.edu/databases/eeg/eeg.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/eeg/eeg.html</a><br>日本的元音<br><a href="http://kdd.ics.uci.edu/databases/JapaneseVowels/JapaneseVowels.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/JapaneseVowels/JapaneseVowels.html</a><br>Pioneer-1移动机器人数据<br><a href="http://kdd.ics.uci.edu/databases/pioneer/pioneer.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/pioneer/pioneer.html</a><br>伪周期合成时间序列<br><a href="http://kdd.ics.uci.edu/databases/synthetic/synthetic.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/synthetic/synthetic.html</a><br>合成控制图时间序列<br><a href="http://kdd.ics.uci.edu/databases/synthetic_control/synthetic_control.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/synthetic_control/synthetic_control.html</a></p>
<h2 id="大学"><a href="#大学" class="headerlink" title="大学"></a>大学</h2><p>卡内基梅隆大学安然电子邮件<br><a href="http://www.cs.cmu.edu/~安然/" target="_blank" rel="external">http://www.cs.cmu.edu/~安然/</a><br>卡内基梅隆大学StatLab<br><a href="http://lib.stat.cmu.edu/datasets/" target="_blank" rel="external">http://lib.stat.cmu.edu/datasets/</a><br>龙骨存储库<br><a href="http://sci2s.ugr.es/keel/datasets.php" target="_blank" rel="external">http://sci2s.ugr.es/keel/datasets.php</a><br>卡内基梅隆大学JASA数据归档<br><a href="http://lib.stat.cmu.edu/jasadata/" target="_blank" rel="external">http://lib.stat.cmu.edu/jasadata/</a><br>俄亥俄州立大学财务数据<br><a href="http://fisher.osu.edu/fin/osudata.htm" target="_blank" rel="external">http://fisher.osu.edu/fin/osudata.htm</a><br>加州大学伯克利分校<br><a href="http://ucdata.berkeley.edu/" target="_blank" rel="external">http://ucdata.berkeley.edu/</a><br>加州大学洛杉矶分校<br> <a href="http://aws.amazon.com/datasets" target="_blank" rel="external">http://aws.amazon.com/datasets</a><br>加州大学河滨分校时间序列<br><a href="http://www.cs.ucr.edu/" target="_blank" rel="external">http://www.cs.ucr.edu/</a> / time_series_data /<br>多伦多大学<br><a href="http://www.cs.toronto.edu/深入/数据/datasets.html" target="_blank" rel="external">http://www.cs.toronto.edu/深入/数据/datasets.html</a><br>UCI知识发现(KDD)归档<br><a href="http://kdd.ics.uci.edu/" target="_blank" rel="external">http://kdd.ics.uci.edu/</a><br>信息和计算机科学<br><a href="http://www.ics.uci.edu/" target="_blank" rel="external">http://www.ics.uci.edu/</a><br>加州大学欧文分校<br><a href="https://uci.edu/" target="_blank" rel="external">https://uci.edu/</a></p>
<h2 id="互联网相关数据集"><a href="#互联网相关数据集" class="headerlink" title="互联网相关数据集"></a>互联网相关数据集</h2><p>Dataset for “Statistics and SocialNetwork of YouTube Videos”<br><a href="http://netsg.cs.sfu.ca/youtubedata/" target="_blank" rel="external">http://netsg.cs.sfu.ca/youtubedata/</a><br>1998 World Cup Web Site Access Logs<br><a href="http://ita.ee.lbl.gov/html/contrib/WorldCup.html" target="_blank" rel="external">http://ita.ee.lbl.gov/html/contrib/WorldCup.html</a><br>（从1998/04/26 到 1998/07/26 的92天中，发生了 1,352,804,107次请求）<br>Page view statistics for Wikimedia projects<br><a href="http://dammit.lt/wikistats/" target="_blank" rel="external">http://dammit.lt/wikistats/</a><br>AOL Search Query Logs - RP<br><a href="http://www.researchpipeline.com/mediawiki/index.php?title=AOL_Search_Query_Logs" target="_blank" rel="external">http://www.researchpipeline.com/mediawiki/index.php?title=AOL_Search_Query_Logs</a><br>livedoor gourmet<br><a href="http://blog.livedoor.jp/techblog/archives/65836960.html" target="_blank" rel="external">http://blog.livedoor.jp/techblog/archives/65836960.html</a></p>
<h2 id="离散序列数据"><a href="#离散序列数据" class="headerlink" title="离散序列数据"></a>离散序列数据</h2><p>UNIX用户数据<br><a href="http://kdd.ics.uci.edu/databases/UNIX_user_data/UNIX_user_data.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/UNIX_user_data/UNIX_user_data.html</a><br>主菜芝加哥推荐数据<br><a href="http://kdd.ics.uci.edu/databases/entree/entree.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/entree/entree.html</a></p>
<h2 id="多元数据"><a href="#多元数据" class="headerlink" title="多元数据"></a>多元数据</h2><p>人口收入调查数据库<br><a href="http://kdd.ics.uci.edu/databases/census-income/census-income.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/census-income/census-income.html</a><br>线圈数据<br><a href="http://kdd.ics.uci.edu/databases/coil/coil.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/coil/coil.html</a><br>Corel图像特征<br><a href="http://kdd.ics.uci.edu/databases/CorelFeatures/CorelFeatures.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/CorelFeatures/CorelFeatures.html</a><br>森林CoverType<br><a href="http://kdd.ics.uci.edu/databases/covertype/covertype.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/covertype/covertype.html</a><br>保险公司基准(2000卷)<br><a href="http://kdd.ics.uci.edu/databases/tic/tic.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/tic/tic.html</a><br>互联网使用数据<br><a href="http://kdd.ics.uci.edu/databases/internet_usage/internet_usage.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/internet_usage/internet_usage.html</a><br>IPUMS人口普查数据<br><a href="http://kdd.ics.uci.edu/databases/ipums/ipums.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/ipums/ipums.html</a><br>KDD CUP 1998数据<br><a href="http://kdd.ics.uci.edu/databases/kddcup98/kddcup98.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/kddcup98/kddcup98.html</a><br>KDD CUP 1999数据<br><a href="http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html</a><br>1990年美国人口普查数据<br><a href="http://kdd.ics.uci.edu/databases/census1990/USCensus1990.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/census1990/USCensus1990.html</a></p>
<h2 id="关系数据"><a href="#关系数据" class="headerlink" title="关系数据"></a>关系数据</h2><p>大肠杆菌基因<br><a href="http://kdd.ics.uci.edu/databases/ecoli/ecoli.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/ecoli/ecoli.html</a><br>结核分枝杆菌基因<br><a href="http://kdd.ics.uci.edu/databases/tb/tb.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/tb/tb.html</a><br>电影<br><a href="http://kdd.ics.uci.edu/databases/movies/movies.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/movies/movies.html</a><br>MovieLens数据集<br><a href="http://datahub.io/dataset/movielens" target="_blank" rel="external">http://datahub.io/dataset/movielens</a><br>厄尔尼诺现象的数据<br><a href="http://kdd.ics.uci.edu/databases/el_nino/el_nino.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/el_nino/el_nino.html</a></p>
<h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><p>20新闻组数据<br><a href="http://kdd.ics.uci.edu/databases/20newsgroups/20newsgroups.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/20newsgroups/20newsgroups.html</a><br>路透社- 21578文本分类收集<br><a href="http://kdd.ics.uci.edu/databases/reuters21578/reuters21578.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/reuters21578/reuters21578.html</a><br>路透转录子集<br><a href="http://kdd.ics.uci.edu/databases/reuters_transcribed/reuters_transcribed.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/reuters_transcribed/reuters_transcribed.html</a><br>摘要1990- 2003年NSF研究奖项<br><a href="http://kdd.ics.uci.edu/databases/nsfabs/nsfawards.html" target="_blank" rel="external">http://kdd.ics.uci.edu/databases/nsfabs/nsfawards.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;大数据&quot;&gt;&lt;a href=&quot;#大数据&quot; class=&quot;headerlink&quot; title=&quot;大数据&quot;&gt;&lt;/a&gt;大数据&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sogou.com/labs/&quot; target=&quot;_blank&quot; rel=&quot;ex
    
    </summary>
    
    
      <category term="COLLECTION" scheme="http://mingotang.github.io/tags/COLLECTION/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown表达</title>
    <link href="http://mingotang.github.io/2017/09/03/MarkDown%E8%A1%A8%E8%BE%BE/"/>
    <id>http://mingotang.github.io/2017/09/03/MarkDown表达/</id>
    <published>2017-09-03T06:43:19.000Z</published>
    <updated>2017-10-01T02:51:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><a id="TOC"></a></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#heads">标题</a></li>
<li><a href="#pictures">插入图片</a></li>
<li><a href="#highlighting">高亮代码</a></li>
<li><a href="#latex">LaTeX公式</a></li>
<li><a href="#todolist">Todo 列表</a></li>
<li><a href="#excel">绘制表格</a></li>
<li><a href="#coloredtags">加重标签</a></li>
</ul>
<p><a id="heads"></a></p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题</div><div class="line">### 三级标题</div><div class="line">#### 四级标题</div></pre></td></tr></table></figure>
<p><a id="specified"></a></p>
<h2 id="重点与注意"><a href="#重点与注意" class="headerlink" title="重点与注意"></a>重点与注意</h2><p><em>加粗</em></p>
<p><strong>加斜</strong></p>
<p><code>注意</code></p>
<blockquote>
<p>注意</p>
</blockquote>
<p><u>Underlined Text</u></p>
<p><del>Deleted</del></p>
<blockquote>
<ul>
<li>加星重点</li>
</ul>
</blockquote>
<p><a id="pictures"></a></p>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p><a href="http://mingotang.website" target="_blank" rel="external">链接</a></p>
<p><img src="http://mingotang.website/image/githubs.png" alt="图片名字"></p>
<p><a id="highlighting"></a></p>
<h2 id="高亮代码"><a href="#高亮代码" class="headerlink" title="高亮代码"></a>高亮代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># A comment</span></div><div class="line">    print(<span class="string">'hello world'</span>)</div></pre></td></tr></table></figure>
<p><a id="latex"></a></p>
<h2 id="LaTeX公式"><a href="#LaTeX公式" class="headerlink" title="LaTeX公式"></a>LaTeX公式</h2><p>$$E=mc^2$$</p>
<p><a id="todolist"></a></p>
<h2 id="Todo-列表"><a href="#Todo-列表" class="headerlink" title="Todo 列表"></a>Todo 列表</h2><ul>
<li style="list-style: none"><input type="checkbox"> 支持以 PDF 格式导出文稿</li>
<li style="list-style: none"><input type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li style="list-style: none"><input type="checkbox" checked> 新增 Todo 列表功能</li>
<li style="list-style: none"><input type="checkbox" checked> 修复 LaTex 公式渲染问题</li>
<li style="list-style: none"><input type="checkbox" checked> 新增 LaTex 公式编号功能</li>
</ul>
<p><a id="excel"></a></p>
<h2 id="绘制表格"><a href="#绘制表格" class="headerlink" title="绘制表格"></a>绘制表格</h2><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格 (\$)</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<p><a id="coloredtags"></a></p>
<h2 id="加重标签"><a href="#加重标签" class="headerlink" title="加重标签"></a>加重标签</h2><div class="note"><br>    <h5>标题</h5><br>    <p>内容 note</p><br></div>



<div class="note info"><br>    <h5>标题</h5><br>    <p>内容 note info</p><br></div>




<div class="note warning"><br>    <h5>标题</h5><br>    <p>内容 note warning</p><br></div>



<div class="note unreleased"><br>    <h5>标题</h5><br>    <p>内容 note unreleased</p><br></div>


]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a id=&quot;TOC&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#heads&quot;&gt;标题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href
    
    </summary>
    
    
      <category term="Notes" scheme="http://mingotang.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用方式</title>
    <link href="http://mingotang.github.io/2015/10/19/Hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://mingotang.github.io/2015/10/19/Hexo使用方式/</id>
    <published>2015-10-19T02:34:12.000Z</published>
    <updated>2017-09-28T08:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/docs/" target="_blank" rel="external">Check documentation for more info.</a></p>
<a id="more"></a>
<hr>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] title</div><div class="line">$ hexo n</div></pre></td></tr></table></figure>
<h4 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h4><table>
<thead>
<tr>
<th>Layout</th>
<th>Path</th>
</tr>
</thead>
<tbody>
<tr>
<td>post</td>
<td>source/_posts</td>
</tr>
<tr>
<td>page</td>
<td>source</td>
</tr>
<tr>
<td>draft</td>
<td>source/_drafts</td>
</tr>
</tbody>
</table>
<h3 id="Drafts"><a href="#Drafts" class="headerlink" title="Drafts"></a>Drafts</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish [layout] title</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<hr>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-server --save</div><div class="line"></div><div class="line">$ hexo server</div><div class="line">$ hexo s</div><div class="line"></div><div class="line">$ hexo server -p 5000</div><div class="line"></div><div class="line">$ hexo server -i 192.168.1.1</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<hr>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo g</div></pre></td></tr></table></figure>
<h3 id="Watch-for-File-Changes"><a href="#Watch-for-File-Changes" class="headerlink" title="Watch for File Changes"></a>Watch for File Changes</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate --watch</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<hr>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div><div class="line">$ hexo d</div></pre></td></tr></table></figure>
<h3 id="Deploy-After-Generating"><a href="#Deploy-After-Generating" class="headerlink" title="Deploy After Generating"></a>Deploy After Generating</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate --deploy</div><div class="line">$ hexo deploy --generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Check documentation for more info.&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Notes" scheme="http://mingotang.github.io/tags/Notes/"/>
    
  </entry>
  
</feed>
